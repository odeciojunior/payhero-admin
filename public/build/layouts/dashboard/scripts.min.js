function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof2(obj) { "@babel/helpers - typeof"; return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof2(obj); }

// Generated by CoffeeScript 1.11.1
(function () {
  var AnimatedText,
      AnimatedTextFactory,
      Bar,
      BaseDonut,
      BaseGauge,
      Donut,
      Gauge,
      GaugePointer,
      TextRenderer,
      ValueUpdater,
      addCommas,
      cutHex,
      formatNumber,
      mergeObjects,
      secondsToString,
      slice = [].slice,
      hasProp = {}.hasOwnProperty,
      extend = function extend(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }

    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  },
      indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }

    return -1;
  };

  (function () {
    var browserRequestAnimationFrame, isCancelled, j, lastId, len, vendor, vendors;
    vendors = ["ms", "moz", "webkit", "o"];

    for (j = 0, len = vendors.length; j < len; j++) {
      vendor = vendors[j];

      if (window.requestAnimationFrame) {
        break;
      }

      window.requestAnimationFrame = window[vendor + "RequestAnimationFrame"];
      window.cancelAnimationFrame = window[vendor + "CancelAnimationFrame"] || window[vendor + "CancelRequestAnimationFrame"];
    }

    browserRequestAnimationFrame = null;
    lastId = 0;
    isCancelled = {};

    if (!requestAnimationFrame) {
      window.requestAnimationFrame = function (callback, element) {
        var currTime, id, lastTime, timeToCall;
        currTime = new Date().getTime();
        timeToCall = Math.max(0, 16 - (currTime - lastTime));
        id = window.setTimeout(function () {
          return callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
      };

      return window.cancelAnimationFrame = function (id) {
        return clearTimeout(id);
      };
    } else if (!window.cancelAnimationFrame) {
      browserRequestAnimationFrame = window.requestAnimationFrame;

      window.requestAnimationFrame = function (callback, element) {
        var myId;
        myId = ++lastId;
        browserRequestAnimationFrame(function () {
          if (!isCancelled[myId]) {
            return callback();
          }
        }, element);
        return myId;
      };

      return window.cancelAnimationFrame = function (id) {
        return isCancelled[id] = true;
      };
    }
  })();

  secondsToString = function secondsToString(sec) {
    var hr, min;
    hr = Math.floor(sec / 3600);
    min = Math.floor((sec - hr * 3600) / 60);
    sec -= hr * 3600 + min * 60;
    sec += "";
    min += "";

    while (min.length < 2) {
      min = "0" + min;
    }

    while (sec.length < 2) {
      sec = "0" + sec;
    }

    hr = hr ? hr + ":" : "";
    return hr + min + ":" + sec;
  };

  formatNumber = function formatNumber() {
    var digits, num, value;
    num = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    value = num[0];
    digits = 0 || num[1];
    return addCommas(value.toFixed(digits));
  };

  mergeObjects = function mergeObjects(obj1, obj2) {
    var key, out, val;
    out = {};

    for (key in obj1) {
      if (!hasProp.call(obj1, key)) continue;
      val = obj1[key];
      out[key] = val;
    }

    for (key in obj2) {
      if (!hasProp.call(obj2, key)) continue;
      val = obj2[key];
      out[key] = val;
    }

    return out;
  };

  addCommas = function addCommas(nStr) {
    var rgx, x, x1, x2;
    nStr += "";
    x = nStr.split(".");
    x1 = x[0];
    x2 = "";

    if (x.length > 1) {
      x2 = "." + x[1];
    }

    rgx = /(\d+)(\d{3})/;

    while (rgx.test(x1)) {
      x1 = x1.replace(rgx, "$1" + "," + "$2");
    }

    return x1 + x2;
  };

  cutHex = function cutHex(nStr) {
    if (nStr.charAt(0) === "#") {
      return nStr.substring(1, 7);
    }

    return nStr;
  };

  ValueUpdater = function () {
    ValueUpdater.prototype.animationSpeed = 32;

    function ValueUpdater(addToAnimationQueue, clear) {
      if (addToAnimationQueue == null) {
        addToAnimationQueue = true;
      }

      this.clear = clear != null ? clear : true;

      if (addToAnimationQueue) {
        AnimationUpdater.add(this);
      }
    }

    ValueUpdater.prototype.update = function (force) {
      var diff;

      if (force == null) {
        force = false;
      }

      if (force || this.displayedValue !== this.value) {
        if (this.ctx && this.clear) {
          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        }

        diff = this.value - this.displayedValue;

        if (Math.abs(diff / this.animationSpeed) <= 0.001) {
          this.displayedValue = this.value;
        } else {
          this.displayedValue = this.displayedValue + diff / this.animationSpeed;
        }

        this.render();
        return true;
      }

      return false;
    };

    return ValueUpdater;
  }();

  BaseGauge = function (superClass) {
    extend(BaseGauge, superClass);

    function BaseGauge() {
      return BaseGauge.__super__.constructor.apply(this, arguments);
    }

    BaseGauge.prototype.displayScale = 1;
    BaseGauge.prototype.forceUpdate = true;

    BaseGauge.prototype.setTextField = function (textField, fractionDigits) {
      return this.textField = textField instanceof TextRenderer ? textField : new TextRenderer(textField, fractionDigits);
    };

    BaseGauge.prototype.setMinValue = function (minValue, updateStartValue) {
      var gauge, j, len, ref, results;
      this.minValue = minValue;

      if (updateStartValue == null) {
        updateStartValue = true;
      }

      if (updateStartValue) {
        this.displayedValue = this.minValue;
        ref = this.gp || [];
        results = [];

        for (j = 0, len = ref.length; j < len; j++) {
          gauge = ref[j];
          results.push(gauge.displayedValue = this.minValue);
        }

        return results;
      }
    };

    BaseGauge.prototype.setOptions = function (options) {
      if (options == null) {
        options = null;
      }

      this.options = mergeObjects(this.options, options);

      if (this.textField) {
        this.textField.el.style.fontSize = options.fontSize + "px";
      }

      if (this.options.angle > 0.5) {
        this.options.angle = 0.5;
      }

      this.configDisplayScale();
      return this;
    };

    BaseGauge.prototype.configDisplayScale = function () {
      var backingStorePixelRatio, devicePixelRatio, height, prevDisplayScale, width;
      prevDisplayScale = this.displayScale;

      if (this.options.highDpiSupport === false) {
        delete this.displayScale;
      } else {
        devicePixelRatio = window.devicePixelRatio || 1;
        backingStorePixelRatio = this.ctx.webkitBackingStorePixelRatio || this.ctx.mozBackingStorePixelRatio || this.ctx.msBackingStorePixelRatio || this.ctx.oBackingStorePixelRatio || this.ctx.backingStorePixelRatio || 1;
        this.displayScale = devicePixelRatio / backingStorePixelRatio;
      }

      if (this.displayScale !== prevDisplayScale) {
        width = this.canvas.G__width || this.canvas.width;
        height = this.canvas.G__height || this.canvas.height;
        this.canvas.width = width * this.displayScale;
        this.canvas.height = height * this.displayScale;
        this.canvas.style.width = width + "px";
        this.canvas.style.height = height + "px";
        this.canvas.G__width = width;
        this.canvas.G__height = height;
      }

      return this;
    };

    BaseGauge.prototype.parseValue = function (value) {
      value = parseFloat(value) || Number(value);

      if (isFinite(value)) {
        return value;
      } else {
        return 0;
      }
    };

    return BaseGauge;
  }(ValueUpdater);

  TextRenderer = function () {
    function TextRenderer(el, fractionDigits1) {
      this.el = el;
      this.fractionDigits = fractionDigits1;
    }

    TextRenderer.prototype.render = function (gauge) {
      return this.el.innerHTML = formatNumber(gauge.displayedValue, this.fractionDigits);
    };

    return TextRenderer;
  }();

  AnimatedText = function (superClass) {
    extend(AnimatedText, superClass);
    AnimatedText.prototype.displayedValue = 0;
    AnimatedText.prototype.value = 0;

    AnimatedText.prototype.setVal = function (value) {
      return this.value = 1 * value;
    };

    function AnimatedText(elem1, text) {
      this.elem = elem1;
      this.text = text != null ? text : false;

      AnimatedText.__super__.constructor.call(this);

      if (this.elem === void 0) {
        throw new Error("The element isn't defined.");
      }

      this.value = 1 * this.elem.innerHTML;

      if (this.text) {
        this.value = 0;
      }
    }

    AnimatedText.prototype.render = function () {
      var textVal;

      if (this.text) {
        textVal = secondsToString(this.displayedValue.toFixed(0));
      } else {
        textVal = addCommas(formatNumber(this.displayedValue));
      }

      return this.elem.innerHTML = textVal;
    };

    return AnimatedText;
  }(ValueUpdater);

  AnimatedTextFactory = {
    create: function create(objList) {
      var elem, j, len, out;
      out = [];

      for (j = 0, len = objList.length; j < len; j++) {
        elem = objList[j];
        out.push(new AnimatedText(elem));
      }

      return out;
    }
  };

  GaugePointer = function (superClass) {
    extend(GaugePointer, superClass);
    GaugePointer.prototype.displayedValue = 0;
    GaugePointer.prototype.value = 0;
    GaugePointer.prototype.options = {
      strokeWidth: 0.035,
      length: 0.1,
      color: "#000000",
      iconPath: null,
      iconScale: 1.0,
      iconAngle: 0
    };
    GaugePointer.prototype.img = null;

    function GaugePointer(gauge1) {
      this.gauge = gauge1;

      if (this.gauge === void 0) {
        throw new Error("The element isn't defined.");
      }

      this.ctx = this.gauge.ctx;
      this.canvas = this.gauge.canvas;

      GaugePointer.__super__.constructor.call(this, false, false);

      this.setOptions();
    }

    GaugePointer.prototype.setOptions = function (options) {
      if (options == null) {
        options = null;
      }

      this.options = mergeObjects(this.options, options);
      this.length = 2 * this.gauge.radius * this.gauge.options.radiusScale * this.options.length;
      this.strokeWidth = this.canvas.height * this.options.strokeWidth;
      this.maxValue = this.gauge.maxValue;
      this.minValue = this.gauge.minValue;
      this.animationSpeed = this.gauge.animationSpeed;
      this.options.angle = this.gauge.options.angle;

      if (this.options.iconPath) {
        this.img = new Image();
        return this.img.src = this.options.iconPath;
      }
    };

    GaugePointer.prototype.render = function () {
      var angle, endX, endY, imgX, imgY, startX, startY, x, y;
      angle = this.gauge.getAngle.call(this, this.displayedValue);
      x = Math.round(this.length * Math.cos(angle));
      y = Math.round(this.length * Math.sin(angle));
      startX = Math.round(this.strokeWidth * Math.cos(angle - Math.PI / 2));
      startY = Math.round(this.strokeWidth * Math.sin(angle - Math.PI / 2));
      endX = Math.round(this.strokeWidth * Math.cos(angle + Math.PI / 2));
      endY = Math.round(this.strokeWidth * Math.sin(angle + Math.PI / 2));
      this.ctx.beginPath();
      this.ctx.fillStyle = this.options.color;
      this.ctx.arc(0, 0, this.strokeWidth, 0, Math.PI * 2, false);
      this.ctx.fill();
      this.ctx.beginPath();
      this.ctx.moveTo(startX, startY);
      this.ctx.lineTo(x, y);
      this.ctx.lineTo(endX, endY);
      this.ctx.fill();

      if (this.img) {
        imgX = Math.round(this.img.width * this.options.iconScale);
        imgY = Math.round(this.img.height * this.options.iconScale);
        this.ctx.save();
        this.ctx.translate(x, y);
        this.ctx.rotate(angle + Math.PI / 180.0 * (90 + this.options.iconAngle));
        this.ctx.drawImage(this.img, -imgX / 2, -imgY / 2, imgX, imgY);
        return this.ctx.restore();
      }
    };

    return GaugePointer;
  }(ValueUpdater);

  Bar = function () {
    function Bar(elem1) {
      this.elem = elem1;
    }

    Bar.prototype.updateValues = function (arrValues) {
      this.value = arrValues[0];
      this.maxValue = arrValues[1];
      this.avgValue = arrValues[2];
      return this.render();
    };

    Bar.prototype.render = function () {
      var avgPercent, valPercent;

      if (this.textField) {
        this.textField.text(formatNumber(this.value));
      }

      if (this.maxValue === 0) {
        this.maxValue = this.avgValue * 2;
      }

      valPercent = this.value / this.maxValue * 100;
      avgPercent = this.avgValue / this.maxValue * 100;
      $(".bar-value", this.elem).css({
        width: valPercent + "%"
      });
      return $(".typical-value", this.elem).css({
        width: avgPercent + "%"
      });
    };

    return Bar;
  }();

  Gauge = function (superClass) {
    extend(Gauge, superClass);
    Gauge.prototype.elem = null;
    Gauge.prototype.value = [20];
    Gauge.prototype.maxValue = 80;
    Gauge.prototype.minValue = 0;
    Gauge.prototype.displayedAngle = 0;
    Gauge.prototype.displayedValue = 0;
    Gauge.prototype.lineWidth = 40;
    Gauge.prototype.paddingTop = 0.1;
    Gauge.prototype.paddingBottom = 0.1;
    Gauge.prototype.percentColors = null;
    Gauge.prototype.options = {
      colorStart: "#6fadcf",
      colorStop: void 0,
      gradientType: 0,
      strokeColor: "#e0e0e0",
      pointer: {
        length: 0.8,
        strokeWidth: 0.035,
        iconScale: 1.0
      },
      angle: 0.15,
      lineWidth: 0.44,
      radiusScale: 1.0,
      fontSize: 40,
      limitMax: false,
      limitMin: false
    };

    function Gauge(canvas) {
      var h, w;
      this.canvas = canvas;

      Gauge.__super__.constructor.call(this);

      this.percentColors = null;

      if (typeof G_vmlCanvasManager !== "undefined") {
        this.canvas = window.G_vmlCanvasManager.initElement(this.canvas);
      }

      this.ctx = this.canvas.getContext("2d");
      h = this.canvas.clientHeight;
      w = this.canvas.clientWidth;
      this.canvas.height = h;
      this.canvas.width = w;
      this.gp = [new GaugePointer(this)];
      this.setOptions();
    }

    Gauge.prototype.setOptions = function (options) {
      var gauge, j, len, phi, ref;

      if (options == null) {
        options = null;
      }

      Gauge.__super__.setOptions.call(this, options);

      this.configPercentColors();
      this.extraPadding = 0;

      if (this.options.angle < 0) {
        phi = Math.PI * (1 + this.options.angle);
        this.extraPadding = Math.sin(phi);
      }

      this.availableHeight = this.canvas.height * (1 - this.paddingTop - this.paddingBottom);
      this.lineWidth = this.availableHeight * this.options.lineWidth;
      this.radius = (this.availableHeight - this.lineWidth / 2) / (1.0 + this.extraPadding);
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      ref = this.gp;

      for (j = 0, len = ref.length; j < len; j++) {
        gauge = ref[j];
        gauge.setOptions(this.options.pointer);
        gauge.render();
      }

      this.render();
      return this;
    };

    Gauge.prototype.configPercentColors = function () {
      var bval, gval, i, j, ref, results, rval;
      this.percentColors = null;

      if (this.options.percentColors !== void 0) {
        this.percentColors = new Array();
        results = [];

        for (i = j = 0, ref = this.options.percentColors.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          rval = parseInt(cutHex(this.options.percentColors[i][1]).substring(0, 2), 16);
          gval = parseInt(cutHex(this.options.percentColors[i][1]).substring(2, 4), 16);
          bval = parseInt(cutHex(this.options.percentColors[i][1]).substring(4, 6), 16);
          results.push(this.percentColors[i] = {
            pct: this.options.percentColors[i][0],
            color: {
              r: rval,
              g: gval,
              b: bval
            }
          });
        }

        return results;
      }
    };

    Gauge.prototype.set = function (value) {
      var gp, i, j, l, len, m, ref, ref1, val;

      if (!(value instanceof Array)) {
        value = [value];
      }

      for (i = j = 0, ref = value.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        value[i] = this.parseValue(value[i]);
      }

      if (value.length > this.gp.length) {
        for (i = l = 0, ref1 = value.length - this.gp.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
          gp = new GaugePointer(this);
          gp.setOptions(this.options.pointer);
          this.gp.push(gp);
        }
      } else if (value.length < this.gp.length) {
        this.gp = this.gp.slice(this.gp.length - value.length);
      }

      i = 0;

      for (m = 0, len = value.length; m < len; m++) {
        val = value[m];

        if (val > this.maxValue) {
          if (this.options.limitMax) {
            val = this.maxValue;
          } else {
            this.maxValue = val + 1;
          }
        } else if (val < this.minValue) {
          if (this.options.limitMin) {
            val = this.minValue;
          } else {
            this.minValue = val - 1;
          }
        }

        this.gp[i].value = val;
        this.gp[i++].setOptions({
          minValue: this.minValue,
          maxValue: this.maxValue,
          angle: this.options.angle
        });
      }

      this.value = Math.max(Math.min(value[value.length - 1], this.maxValue), this.minValue);
      AnimationUpdater.add(this);
      AnimationUpdater.run(this.forceUpdate);
      return this.forceUpdate = false;
    };

    Gauge.prototype.getAngle = function (value) {
      return (1 + this.options.angle) * Math.PI + (value - this.minValue) / (this.maxValue - this.minValue) * (1 - this.options.angle * 2) * Math.PI;
    };

    Gauge.prototype.getColorForPercentage = function (pct, grad) {
      var color, endColor, i, j, rangePct, ref, startColor;

      if (pct === 0) {
        color = this.percentColors[0].color;
      } else {
        color = this.percentColors[this.percentColors.length - 1].color;

        for (i = j = 0, ref = this.percentColors.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          if (pct <= this.percentColors[i].pct) {
            if (grad === true) {
              startColor = this.percentColors[i - 1] || this.percentColors[0];
              endColor = this.percentColors[i];
              rangePct = (pct - startColor.pct) / (endColor.pct - startColor.pct);
              color = {
                r: Math.floor(startColor.color.r * (1 - rangePct) + endColor.color.r * rangePct),
                g: Math.floor(startColor.color.g * (1 - rangePct) + endColor.color.g * rangePct),
                b: Math.floor(startColor.color.b * (1 - rangePct) + endColor.color.b * rangePct)
              };
            } else {
              color = this.percentColors[i].color;
            }

            break;
          }
        }
      }

      return "rgb(" + [color.r, color.g, color.b].join(",") + ")";
    };

    Gauge.prototype.getColorForValue = function (val, grad) {
      var pct;
      pct = (val - this.minValue) / (this.maxValue - this.minValue);
      return this.getColorForPercentage(pct, grad);
    };

    Gauge.prototype.renderStaticLabels = function (staticLabels, w, h, radius) {
      var font, fontsize, j, len, match, re, ref, rest, rotationAngle, value;
      this.ctx.save();
      this.ctx.translate(w, h);
      font = staticLabels.font || "10px Times";
      re = /\d+\.?\d?/;
      match = font.match(re)[0];
      rest = font.slice(match.length);
      fontsize = parseFloat(match) * this.displayScale;
      this.ctx.font = fontsize + rest;
      this.ctx.fillStyle = staticLabels.color || "#000000";
      this.ctx.textBaseline = "bottom";
      this.ctx.textAlign = "center";
      ref = staticLabels.labels;

      for (j = 0, len = ref.length; j < len; j++) {
        value = ref[j];

        if (value.label !== void 0) {
          if ((!this.options.limitMin || value >= this.minValue) && (!this.options.limitMax || value <= this.maxValue)) {
            font = value.font || staticLabels.font;
            match = font.match(re)[0];
            rest = font.slice(match.length);
            fontsize = parseFloat(match) * this.displayScale;
            this.ctx.font = fontsize + rest;
            rotationAngle = this.getAngle(value.label) - 3 * Math.PI / 2;
            this.ctx.rotate(rotationAngle);
            this.ctx.fillText(formatNumber(value.label, staticLabels.fractionDigits), 0, -radius - this.lineWidth / 2);
            this.ctx.rotate(-rotationAngle);
          }
        } else {
          if ((!this.options.limitMin || value >= this.minValue) && (!this.options.limitMax || value <= this.maxValue)) {
            rotationAngle = this.getAngle(value) - 3 * Math.PI / 2;
            this.ctx.rotate(rotationAngle);
            this.ctx.fillText(formatNumber(value, staticLabels.fractionDigits), 0, -radius - this.lineWidth / 2);
            this.ctx.rotate(-rotationAngle);
          }
        }
      }

      return this.ctx.restore();
    };

    Gauge.prototype.renderTicks = function (ticksOptions, w, h, radius) {
      var currentDivision, currentSubDivision, divColor, divLength, divWidth, divisionCount, j, lineWidth, range, rangeDivisions, ref, results, scaleMutate, st, subColor, subDivisions, subLength, subWidth, subdivisionCount, t, tmpRadius;

      if (ticksOptions !== {}) {
        divisionCount = ticksOptions.divisions || 0;
        subdivisionCount = ticksOptions.subDivisions || 0;
        divColor = ticksOptions.divColor || "#fff";
        subColor = ticksOptions.subColor || "#fff";
        divLength = ticksOptions.divLength || 0.7;
        subLength = ticksOptions.subLength || 0.2;
        range = parseFloat(this.maxValue) - parseFloat(this.minValue);
        rangeDivisions = parseFloat(range) / parseFloat(ticksOptions.divisions);
        subDivisions = parseFloat(rangeDivisions) / parseFloat(ticksOptions.subDivisions);
        currentDivision = parseFloat(this.minValue);
        currentSubDivision = 0.0 + subDivisions;
        lineWidth = range / 400;
        divWidth = lineWidth * (ticksOptions.divWidth || 1);
        subWidth = lineWidth * (ticksOptions.subWidth || 1);
        results = [];

        for (t = j = 0, ref = divisionCount + 1; j < ref; t = j += 1) {
          this.ctx.lineWidth = this.lineWidth * divLength;
          scaleMutate = this.lineWidth / 2 * (1 - divLength);
          tmpRadius = this.radius * this.options.radiusScale + scaleMutate;
          this.ctx.strokeStyle = divColor;
          this.ctx.beginPath();
          this.ctx.arc(0, 0, tmpRadius, this.getAngle(currentDivision - divWidth), this.getAngle(currentDivision + divWidth), false);
          this.ctx.stroke();
          currentSubDivision = currentDivision + subDivisions;
          currentDivision += rangeDivisions;

          if (t !== ticksOptions.divisions && subdivisionCount > 0) {
            results.push(function () {
              var l, ref1, results1;
              results1 = [];

              for (st = l = 0, ref1 = subdivisionCount - 1; l < ref1; st = l += 1) {
                this.ctx.lineWidth = this.lineWidth * subLength;
                scaleMutate = this.lineWidth / 2 * (1 - subLength);
                tmpRadius = this.radius * this.options.radiusScale + scaleMutate;
                this.ctx.strokeStyle = subColor;
                this.ctx.beginPath();
                this.ctx.arc(0, 0, tmpRadius, this.getAngle(currentSubDivision - subWidth), this.getAngle(currentSubDivision + subWidth), false);
                this.ctx.stroke();
                results1.push(currentSubDivision += subDivisions);
              }

              return results1;
            }.call(this));
          } else {
            results.push(void 0);
          }
        }

        return results;
      }
    };

    Gauge.prototype.render = function () {
      var displayedAngle, fillStyle, gauge, h, j, l, len, len1, max, min, radius, ref, ref1, scaleMutate, tmpRadius, w, zone;
      w = this.canvas.width / 2;
      h = this.canvas.height * this.paddingTop + this.availableHeight - (this.radius + this.lineWidth / 2) * this.extraPadding;
      displayedAngle = this.getAngle(this.displayedValue);

      if (this.textField) {
        this.textField.render(this);
      }

      this.ctx.lineCap = "butt";
      radius = this.radius * this.options.radiusScale;

      if (this.options.staticLabels) {
        this.renderStaticLabels(this.options.staticLabels, w, h, radius);
      }

      if (this.options.staticZones) {
        this.ctx.save();
        this.ctx.translate(w, h);
        this.ctx.lineWidth = this.lineWidth;
        ref = this.options.staticZones;

        for (j = 0, len = ref.length; j < len; j++) {
          zone = ref[j];
          min = zone.min;

          if (this.options.limitMin && min < this.minValue) {
            min = this.minValue;
          }

          max = zone.max;

          if (this.options.limitMax && max > this.maxValue) {
            max = this.maxValue;
          }

          tmpRadius = this.radius * this.options.radiusScale;

          if (zone.height) {
            this.ctx.lineWidth = this.lineWidth * zone.height;
            scaleMutate = this.lineWidth / 2 * (zone.offset || 1 - zone.height);
            tmpRadius = this.radius * this.options.radiusScale + scaleMutate;
          }

          this.ctx.strokeStyle = zone.strokeStyle;
          this.ctx.beginPath();
          this.ctx.arc(0, 0, tmpRadius, this.getAngle(min), this.getAngle(max), false);
          this.ctx.stroke();
        }
      } else {
        if (this.options.customFillStyle !== void 0) {
          fillStyle = this.options.customFillStyle(this);
        } else if (this.percentColors !== null) {
          fillStyle = this.getColorForValue(this.displayedValue, this.options.generateGradient);
        } else if (this.options.colorStop !== void 0) {
          if (this.options.gradientType === 0) {
            fillStyle = this.ctx.createRadialGradient(w, h, 9, w, h, 70);
          } else {
            fillStyle = this.ctx.createLinearGradient(0, 0, w, 0);
          }

          fillStyle.addColorStop(0, this.options.colorStart);
          fillStyle.addColorStop(1, this.options.colorStop);
        } else {
          fillStyle = this.options.colorStart;
        }

        this.ctx.strokeStyle = fillStyle;
        this.ctx.beginPath();
        this.ctx.arc(w, h, radius, (1 + this.options.angle) * Math.PI, displayedAngle, false);
        this.ctx.lineWidth = this.lineWidth;
        this.ctx.stroke();
        this.ctx.strokeStyle = this.options.strokeColor;
        this.ctx.beginPath();
        this.ctx.arc(w, h, radius, displayedAngle, (2 - this.options.angle) * Math.PI, false);
        this.ctx.stroke();
        this.ctx.save();
        this.ctx.translate(w, h);
      }

      if (this.options.renderTicks) {
        this.renderTicks(this.options.renderTicks, w, h, radius);
      }

      this.ctx.restore();
      this.ctx.translate(w, h);
      ref1 = this.gp;

      for (l = 0, len1 = ref1.length; l < len1; l++) {
        gauge = ref1[l];
        gauge.update(true);
      }

      return this.ctx.translate(-w, -h);
    };

    return Gauge;
  }(BaseGauge);

  BaseDonut = function (superClass) {
    extend(BaseDonut, superClass);
    BaseDonut.prototype.lineWidth = 15;
    BaseDonut.prototype.displayedValue = 0;
    BaseDonut.prototype.value = 33;
    BaseDonut.prototype.maxValue = 80;
    BaseDonut.prototype.minValue = 0;
    BaseDonut.prototype.options = {
      lineWidth: 0.1,
      colorStart: "#6f6ea0",
      colorStop: "#c0c0db",
      strokeColor: "#eeeeee",
      shadowColor: "#d5d5d5",
      angle: 0.35,
      radiusScale: 1.0
    };

    function BaseDonut(canvas) {
      this.canvas = canvas;

      BaseDonut.__super__.constructor.call(this);

      if (typeof G_vmlCanvasManager !== "undefined") {
        this.canvas = window.G_vmlCanvasManager.initElement(this.canvas);
      }

      this.ctx = this.canvas.getContext("2d");
      this.setOptions();
      this.render();
    }

    BaseDonut.prototype.getAngle = function (value) {
      return (1 - this.options.angle) * Math.PI + (value - this.minValue) / (this.maxValue - this.minValue) * (2 + this.options.angle - (1 - this.options.angle)) * Math.PI;
    };

    BaseDonut.prototype.setOptions = function (options) {
      if (options == null) {
        options = null;
      }

      BaseDonut.__super__.setOptions.call(this, options);

      this.lineWidth = this.canvas.height * this.options.lineWidth;
      this.radius = this.options.radiusScale * (this.canvas.height / 2 - this.lineWidth / 2);
      return this;
    };

    BaseDonut.prototype.set = function (value) {
      this.value = this.parseValue(value);

      if (this.value > this.maxValue) {
        if (this.options.limitMax) {
          this.value = this.maxValue;
        } else {
          this.maxValue = this.value;
        }
      } else if (this.value < this.minValue) {
        if (this.options.limitMin) {
          this.value = this.minValue;
        } else {
          this.minValue = this.value;
        }
      }

      AnimationUpdater.add(this);
      AnimationUpdater.run(this.forceUpdate);
      return this.forceUpdate = false;
    };

    BaseDonut.prototype.render = function () {
      var displayedAngle, grdFill, h, start, stop, w;
      displayedAngle = this.getAngle(this.displayedValue);
      w = this.canvas.width / 2;
      h = this.canvas.height / 2;

      if (this.textField) {
        this.textField.render(this);
      }

      grdFill = this.ctx.createRadialGradient(w, h, 39, w, h, 70);
      grdFill.addColorStop(0, this.options.colorStart);
      grdFill.addColorStop(1, this.options.colorStop);
      start = this.radius - this.lineWidth / 2;
      stop = this.radius + this.lineWidth / 2;
      this.ctx.strokeStyle = this.options.strokeColor;
      this.ctx.beginPath();
      this.ctx.arc(w, h, this.radius, (1 - this.options.angle) * Math.PI, (2 + this.options.angle) * Math.PI, false);
      this.ctx.lineWidth = this.lineWidth;
      this.ctx.lineCap = "round";
      this.ctx.stroke();
      this.ctx.strokeStyle = grdFill;
      this.ctx.beginPath();
      this.ctx.arc(w, h, this.radius, (1 - this.options.angle) * Math.PI, displayedAngle, false);
      return this.ctx.stroke();
    };

    return BaseDonut;
  }(BaseGauge);

  Donut = function (superClass) {
    extend(Donut, superClass);

    function Donut() {
      return Donut.__super__.constructor.apply(this, arguments);
    }

    Donut.prototype.strokeGradient = function (w, h, start, stop) {
      var grd;
      grd = this.ctx.createRadialGradient(w, h, start, w, h, stop);
      grd.addColorStop(0, this.options.shadowColor);
      grd.addColorStop(0.12, this.options._orgStrokeColor);
      grd.addColorStop(0.88, this.options._orgStrokeColor);
      grd.addColorStop(1, this.options.shadowColor);
      return grd;
    };

    Donut.prototype.setOptions = function (options) {
      var h, start, stop, w;

      if (options == null) {
        options = null;
      }

      Donut.__super__.setOptions.call(this, options);

      w = this.canvas.width / 2;
      h = this.canvas.height / 2;
      start = this.radius - this.lineWidth / 2;
      stop = this.radius + this.lineWidth / 2;
      this.options._orgStrokeColor = this.options.strokeColor;
      this.options.strokeColor = this.strokeGradient(w, h, start, stop);
      return this;
    };

    return Donut;
  }(BaseDonut);

  window.AnimationUpdater = {
    elements: [],
    animId: null,
    addAll: function addAll(list) {
      var elem, j, len, results;
      results = [];

      for (j = 0, len = list.length; j < len; j++) {
        elem = list[j];
        results.push(AnimationUpdater.elements.push(elem));
      }

      return results;
    },
    add: function add(object) {
      if (indexOf.call(AnimationUpdater.elements, object) < 0) {
        return AnimationUpdater.elements.push(object);
      }
    },
    run: function run(force) {
      var elem, finished, isCallback, j, k, l, len, ref, toRemove;

      if (force == null) {
        force = false;
      }

      isCallback = isFinite(parseFloat(force));

      if (isCallback || force === true) {
        finished = true;
        toRemove = [];
        ref = AnimationUpdater.elements;

        for (k = j = 0, len = ref.length; j < len; k = ++j) {
          elem = ref[k];

          if (elem.update(force === true)) {
            finished = false;
          } else {
            toRemove.push(k);
          }
        }

        for (l = toRemove.length - 1; l >= 0; l += -1) {
          k = toRemove[l];
          AnimationUpdater.elements.splice(k, 1);
        }

        return AnimationUpdater.animId = finished ? null : requestAnimationFrame(AnimationUpdater.run);
      } else if (force === false) {
        if (AnimationUpdater.animId === !null) {
          cancelAnimationFrame(AnimationUpdater.animId);
        }

        return AnimationUpdater.animId = requestAnimationFrame(AnimationUpdater.run);
      }
    }
  };

  if (typeof window.define === "function" && window.define.amd != null) {
    define(function () {
      return {
        Gauge: Gauge,
        Donut: Donut,
        BaseDonut: BaseDonut,
        TextRenderer: TextRenderer
      };
    });
  } else if (typeof module !== "undefined" && module.exports != null) {
    module.exports = {
      Gauge: Gauge,
      Donut: Donut,
      BaseDonut: BaseDonut,
      TextRenderer: TextRenderer
    };
  } else {
    window.Gauge = Gauge;
    window.Donut = Donut;
    window.BaseDonut = BaseDonut;
    window.TextRenderer = TextRenderer;
  }
}).call(this);

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
};
/* Chartist.js 0.11.0
 * Copyright Â© 2017 Gion Kunz
 * Free to use under either the WTFPL license or the MIT license.
 * https://raw.githubusercontent.com/gionkunz/chartist-js/master/LICENSE-WTFPL
 * https://raw.githubusercontent.com/gionkunz/chartist-js/master/LICENSE-MIT
 */


!function (a, b) {
  "function" == typeof define && define.amd ? define("Chartist", [], function () {
    return a.Chartist = b();
  }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = b() : a.Chartist = b();
}(this, function () {
  var a = {
    version: "0.11.0"
  };
  return function (a, b, c) {
    "use strict";

    c.namespaces = {
      svg: "http://www.w3.org/2000/svg",
      xmlns: "http://www.w3.org/2000/xmlns/",
      xhtml: "http://www.w3.org/1999/xhtml",
      xlink: "http://www.w3.org/1999/xlink",
      ct: "http://gionkunz.github.com/chartist-js/ct"
    }, c.noop = function (a) {
      return a;
    }, c.alphaNumerate = function (a) {
      return String.fromCharCode(97 + a % 26);
    }, c.extend = function (a) {
      var b, d, e;

      for (a = a || {}, b = 1; b < arguments.length; b++) {
        d = arguments[b];

        for (var f in d) {
          e = d[f], "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) || null === e || e instanceof Array ? a[f] = e : a[f] = c.extend(a[f], e);
        }
      }

      return a;
    }, c.replaceAll = function (a, b, c) {
      return a.replace(new RegExp(b, "g"), c);
    }, c.ensureUnit = function (a, b) {
      return "number" == typeof a && (a += b), a;
    }, c.quantity = function (a) {
      if ("string" == typeof a) {
        var b = /^(\d+)\s*(.*)$/g.exec(a);
        return {
          value: +b[1],
          unit: b[2] || void 0
        };
      }

      return {
        value: a
      };
    }, c.querySelector = function (a) {
      return a instanceof Node ? a : b.querySelector(a);
    }, c.times = function (a) {
      return Array.apply(null, new Array(a));
    }, c.sum = function (a, b) {
      return a + (b ? b : 0);
    }, c.mapMultiply = function (a) {
      return function (b) {
        return b * a;
      };
    }, c.mapAdd = function (a) {
      return function (b) {
        return b + a;
      };
    }, c.serialMap = function (a, b) {
      var d = [],
          e = Math.max.apply(null, a.map(function (a) {
        return a.length;
      }));
      return c.times(e).forEach(function (c, e) {
        var f = a.map(function (a) {
          return a[e];
        });
        d[e] = b.apply(null, f);
      }), d;
    }, c.roundWithPrecision = function (a, b) {
      var d = Math.pow(10, b || c.precision);
      return Math.round(a * d) / d;
    }, c.precision = 8, c.escapingMap = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#039;"
    }, c.serialize = function (a) {
      return null === a || void 0 === a ? a : ("number" == typeof a ? a = "" + a : "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) && (a = JSON.stringify({
        data: a
      })), Object.keys(c.escapingMap).reduce(function (a, b) {
        return c.replaceAll(a, b, c.escapingMap[b]);
      }, a));
    }, c.deserialize = function (a) {
      if ("string" != typeof a) return a;
      a = Object.keys(c.escapingMap).reduce(function (a, b) {
        return c.replaceAll(a, c.escapingMap[b], b);
      }, a);

      try {
        a = JSON.parse(a), a = void 0 !== a.data ? a.data : a;
      } catch (b) {}

      return a;
    }, c.createSvg = function (a, b, d, e) {
      var f;
      return b = b || "100%", d = d || "100%", Array.prototype.slice.call(a.querySelectorAll("svg")).filter(function (a) {
        return a.getAttributeNS(c.namespaces.xmlns, "ct");
      }).forEach(function (b) {
        a.removeChild(b);
      }), f = new c.Svg("svg").attr({
        width: b,
        height: d
      }).addClass(e), f._node.style.width = b, f._node.style.height = d, a.appendChild(f._node), f;
    }, c.normalizeData = function (a, b, d) {
      var e,
          f = {
        raw: a,
        normalized: {}
      };
      return f.normalized.series = c.getDataArray({
        series: a.series || []
      }, b, d), e = f.normalized.series.every(function (a) {
        return a instanceof Array;
      }) ? Math.max.apply(null, f.normalized.series.map(function (a) {
        return a.length;
      })) : f.normalized.series.length, f.normalized.labels = (a.labels || []).slice(), Array.prototype.push.apply(f.normalized.labels, c.times(Math.max(0, e - f.normalized.labels.length)).map(function () {
        return "";
      })), b && c.reverseData(f.normalized), f;
    }, c.safeHasProperty = function (a, b) {
      return null !== a && "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) && a.hasOwnProperty(b);
    }, c.isDataHoleValue = function (a) {
      return null === a || void 0 === a || "number" == typeof a && isNaN(a);
    }, c.reverseData = function (a) {
      a.labels.reverse(), a.series.reverse();

      for (var b = 0; b < a.series.length; b++) {
        "object" == _typeof(a.series[b]) && void 0 !== a.series[b].data ? a.series[b].data.reverse() : a.series[b] instanceof Array && a.series[b].reverse();
      }
    }, c.getDataArray = function (a, b, d) {
      function e(a) {
        if (c.safeHasProperty(a, "value")) return e(a.value);
        if (c.safeHasProperty(a, "data")) return e(a.data);
        if (a instanceof Array) return a.map(e);

        if (!c.isDataHoleValue(a)) {
          if (d) {
            var b = {};
            return "string" == typeof d ? b[d] = c.getNumberOrUndefined(a) : b.y = c.getNumberOrUndefined(a), b.x = a.hasOwnProperty("x") ? c.getNumberOrUndefined(a.x) : b.x, b.y = a.hasOwnProperty("y") ? c.getNumberOrUndefined(a.y) : b.y, b;
          }

          return c.getNumberOrUndefined(a);
        }
      }

      return a.series.map(e);
    }, c.normalizePadding = function (a, b) {
      return b = b || 0, "number" == typeof a ? {
        top: a,
        right: a,
        bottom: a,
        left: a
      } : {
        top: "number" == typeof a.top ? a.top : b,
        right: "number" == typeof a.right ? a.right : b,
        bottom: "number" == typeof a.bottom ? a.bottom : b,
        left: "number" == typeof a.left ? a.left : b
      };
    }, c.getMetaData = function (a, b) {
      var c = a.data ? a.data[b] : a[b];
      return c ? c.meta : void 0;
    }, c.orderOfMagnitude = function (a) {
      return Math.floor(Math.log(Math.abs(a)) / Math.LN10);
    }, c.projectLength = function (a, b, c) {
      return b / c.range * a;
    }, c.getAvailableHeight = function (a, b) {
      return Math.max((c.quantity(b.height).value || a.height()) - (b.chartPadding.top + b.chartPadding.bottom) - b.axisX.offset, 0);
    }, c.getHighLow = function (a, b, d) {
      function e(a) {
        if (void 0 !== a) if (a instanceof Array) for (var b = 0; b < a.length; b++) {
          e(a[b]);
        } else {
          var c = d ? +a[d] : +a;
          g && c > f.high && (f.high = c), h && c < f.low && (f.low = c);
        }
      }

      b = c.extend({}, b, d ? b["axis" + d.toUpperCase()] : {});
      var f = {
        high: void 0 === b.high ? -Number.MAX_VALUE : +b.high,
        low: void 0 === b.low ? Number.MAX_VALUE : +b.low
      },
          g = void 0 === b.high,
          h = void 0 === b.low;
      return (g || h) && e(a), (b.referenceValue || 0 === b.referenceValue) && (f.high = Math.max(b.referenceValue, f.high), f.low = Math.min(b.referenceValue, f.low)), f.high <= f.low && (0 === f.low ? f.high = 1 : f.low < 0 ? f.high = 0 : f.high > 0 ? f.low = 0 : (f.high = 1, f.low = 0)), f;
    }, c.isNumeric = function (a) {
      return null !== a && isFinite(a);
    }, c.isFalseyButZero = function (a) {
      return !a && 0 !== a;
    }, c.getNumberOrUndefined = function (a) {
      return c.isNumeric(a) ? +a : void 0;
    }, c.isMultiValue = function (a) {
      return "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) && ("x" in a || "y" in a);
    }, c.getMultiValue = function (a, b) {
      return c.isMultiValue(a) ? c.getNumberOrUndefined(a[b || "y"]) : c.getNumberOrUndefined(a);
    }, c.rho = function (a) {
      function b(a, c) {
        return a % c === 0 ? c : b(c, a % c);
      }

      function c(a) {
        return a * a + 1;
      }

      if (1 === a) return a;
      var d,
          e = 2,
          f = 2;
      if (a % 2 === 0) return 2;

      do {
        e = c(e) % a, f = c(c(f)) % a, d = b(Math.abs(e - f), a);
      } while (1 === d);

      return d;
    }, c.getBounds = function (a, b, d, e) {
      function f(a, b) {
        return a === (a += b) && (a *= 1 + (b > 0 ? o : -o)), a;
      }

      var g,
          h,
          i,
          j = 0,
          k = {
        high: b.high,
        low: b.low
      };
      k.valueRange = k.high - k.low, k.oom = c.orderOfMagnitude(k.valueRange), k.step = Math.pow(10, k.oom), k.min = Math.floor(k.low / k.step) * k.step, k.max = Math.ceil(k.high / k.step) * k.step, k.range = k.max - k.min, k.numberOfSteps = Math.round(k.range / k.step);
      var l = c.projectLength(a, k.step, k),
          m = l < d,
          n = e ? c.rho(k.range) : 0;
      if (e && c.projectLength(a, 1, k) >= d) k.step = 1;else if (e && n < k.step && c.projectLength(a, n, k) >= d) k.step = n;else for (;;) {
        if (m && c.projectLength(a, k.step, k) <= d) k.step *= 2;else {
          if (m || !(c.projectLength(a, k.step / 2, k) >= d)) break;

          if (k.step /= 2, e && k.step % 1 !== 0) {
            k.step *= 2;
            break;
          }
        }
        if (j++ > 1e3) throw new Error("Exceeded maximum number of iterations while optimizing scale step!");
      }
      var o = 2.221e-16;

      for (k.step = Math.max(k.step, o), h = k.min, i = k.max; h + k.step <= k.low;) {
        h = f(h, k.step);
      }

      for (; i - k.step >= k.high;) {
        i = f(i, -k.step);
      }

      k.min = h, k.max = i, k.range = k.max - k.min;
      var p = [];

      for (g = k.min; g <= k.max; g = f(g, k.step)) {
        var q = c.roundWithPrecision(g);
        q !== p[p.length - 1] && p.push(q);
      }

      return k.values = p, k;
    }, c.polarToCartesian = function (a, b, c, d) {
      var e = (d - 90) * Math.PI / 180;
      return {
        x: a + c * Math.cos(e),
        y: b + c * Math.sin(e)
      };
    }, c.createChartRect = function (a, b, d) {
      var e = !(!b.axisX && !b.axisY),
          f = e ? b.axisY.offset : 0,
          g = e ? b.axisX.offset : 0,
          h = a.width() || c.quantity(b.width).value || 0,
          i = a.height() || c.quantity(b.height).value || 0,
          j = c.normalizePadding(b.chartPadding, d);
      h = Math.max(h, f + j.left + j.right), i = Math.max(i, g + j.top + j.bottom);
      var k = {
        padding: j,
        width: function width() {
          return this.x2 - this.x1;
        },
        height: function height() {
          return this.y1 - this.y2;
        }
      };
      return e ? ("start" === b.axisX.position ? (k.y2 = j.top + g, k.y1 = Math.max(i - j.bottom, k.y2 + 1)) : (k.y2 = j.top, k.y1 = Math.max(i - j.bottom - g, k.y2 + 1)), "start" === b.axisY.position ? (k.x1 = j.left + f, k.x2 = Math.max(h - j.right, k.x1 + 1)) : (k.x1 = j.left, k.x2 = Math.max(h - j.right - f, k.x1 + 1))) : (k.x1 = j.left, k.x2 = Math.max(h - j.right, k.x1 + 1), k.y2 = j.top, k.y1 = Math.max(i - j.bottom, k.y2 + 1)), k;
    }, c.createGrid = function (a, b, d, e, f, g, h, i) {
      var j = {};
      j[d.units.pos + "1"] = a, j[d.units.pos + "2"] = a, j[d.counterUnits.pos + "1"] = e, j[d.counterUnits.pos + "2"] = e + f;
      var k = g.elem("line", j, h.join(" "));
      i.emit("draw", c.extend({
        type: "grid",
        axis: d,
        index: b,
        group: g,
        element: k
      }, j));
    }, c.createGridBackground = function (a, b, c, d) {
      var e = a.elem("rect", {
        x: b.x1,
        y: b.y2,
        width: b.width(),
        height: b.height()
      }, c, !0);
      d.emit("draw", {
        type: "gridBackground",
        group: a,
        element: e
      });
    }, c.createLabel = function (a, d, e, f, g, h, i, j, k, l, m) {
      var n,
          o = {};

      if (o[g.units.pos] = a + i[g.units.pos], o[g.counterUnits.pos] = i[g.counterUnits.pos], o[g.units.len] = d, o[g.counterUnits.len] = Math.max(0, h - 10), l) {
        var p = b.createElement("span");
        p.className = k.join(" "), p.setAttribute("xmlns", c.namespaces.xhtml), p.innerText = f[e], p.style[g.units.len] = Math.round(o[g.units.len]) + "px", p.style[g.counterUnits.len] = Math.round(o[g.counterUnits.len]) + "px", n = j.foreignObject(p, c.extend({
          style: "overflow: visible;"
        }, o));
      } else n = j.elem("text", o, k.join(" ")).text(f[e]);

      m.emit("draw", c.extend({
        type: "label",
        axis: g,
        index: e,
        group: j,
        element: n,
        text: f[e]
      }, o));
    }, c.getSeriesOption = function (a, b, c) {
      if (a.name && b.series && b.series[a.name]) {
        var d = b.series[a.name];
        return d.hasOwnProperty(c) ? d[c] : b[c];
      }

      return b[c];
    }, c.optionsProvider = function (b, d, e) {
      function f(b) {
        var f = h;
        if (h = c.extend({}, j), d) for (i = 0; i < d.length; i++) {
          var g = a.matchMedia(d[i][0]);
          g.matches && (h = c.extend(h, d[i][1]));
        }
        e && b && e.emit("optionsChanged", {
          previousOptions: f,
          currentOptions: h
        });
      }

      function g() {
        k.forEach(function (a) {
          a.removeListener(f);
        });
      }

      var h,
          i,
          j = c.extend({}, b),
          k = [];
      if (!a.matchMedia) throw "window.matchMedia not found! Make sure you're using a polyfill.";
      if (d) for (i = 0; i < d.length; i++) {
        var l = a.matchMedia(d[i][0]);
        l.addListener(f), k.push(l);
      }
      return f(), {
        removeMediaQueryListeners: g,
        getCurrentOptions: function getCurrentOptions() {
          return c.extend({}, h);
        }
      };
    }, c.splitIntoSegments = function (a, b, d) {
      var e = {
        increasingX: !1,
        fillHoles: !1
      };
      d = c.extend({}, e, d);

      for (var f = [], g = !0, h = 0; h < a.length; h += 2) {
        void 0 === c.getMultiValue(b[h / 2].value) ? d.fillHoles || (g = !0) : (d.increasingX && h >= 2 && a[h] <= a[h - 2] && (g = !0), g && (f.push({
          pathCoordinates: [],
          valueData: []
        }), g = !1), f[f.length - 1].pathCoordinates.push(a[h], a[h + 1]), f[f.length - 1].valueData.push(b[h / 2]));
      }

      return f;
    };
  }(window, document, a), function (a, b, c) {
    "use strict";

    c.Interpolation = {}, c.Interpolation.none = function (a) {
      var b = {
        fillHoles: !1
      };
      return a = c.extend({}, b, a), function (b, d) {
        for (var e = new c.Svg.Path(), f = !0, g = 0; g < b.length; g += 2) {
          var h = b[g],
              i = b[g + 1],
              j = d[g / 2];
          void 0 !== c.getMultiValue(j.value) ? (f ? e.move(h, i, !1, j) : e.line(h, i, !1, j), f = !1) : a.fillHoles || (f = !0);
        }

        return e;
      };
    }, c.Interpolation.simple = function (a) {
      var b = {
        divisor: 2,
        fillHoles: !1
      };
      a = c.extend({}, b, a);
      var d = 1 / Math.max(1, a.divisor);
      return function (b, e) {
        for (var f, g, h, i = new c.Svg.Path(), j = 0; j < b.length; j += 2) {
          var k = b[j],
              l = b[j + 1],
              m = (k - f) * d,
              n = e[j / 2];
          void 0 !== n.value ? (void 0 === h ? i.move(k, l, !1, n) : i.curve(f + m, g, k - m, l, k, l, !1, n), f = k, g = l, h = n) : a.fillHoles || (f = k = h = void 0);
        }

        return i;
      };
    }, c.Interpolation.cardinal = function (a) {
      var b = {
        tension: 1,
        fillHoles: !1
      };
      a = c.extend({}, b, a);
      var d = Math.min(1, Math.max(0, a.tension)),
          e = 1 - d;
      return function f(b, g) {
        var h = c.splitIntoSegments(b, g, {
          fillHoles: a.fillHoles
        });

        if (h.length) {
          if (h.length > 1) {
            var i = [];
            return h.forEach(function (a) {
              i.push(f(a.pathCoordinates, a.valueData));
            }), c.Svg.Path.join(i);
          }

          if (b = h[0].pathCoordinates, g = h[0].valueData, b.length <= 4) return c.Interpolation.none()(b, g);

          for (var j, k = new c.Svg.Path().move(b[0], b[1], !1, g[0]), l = 0, m = b.length; m - 2 * !j > l; l += 2) {
            var n = [{
              x: +b[l - 2],
              y: +b[l - 1]
            }, {
              x: +b[l],
              y: +b[l + 1]
            }, {
              x: +b[l + 2],
              y: +b[l + 3]
            }, {
              x: +b[l + 4],
              y: +b[l + 5]
            }];
            j ? l ? m - 4 === l ? n[3] = {
              x: +b[0],
              y: +b[1]
            } : m - 2 === l && (n[2] = {
              x: +b[0],
              y: +b[1]
            }, n[3] = {
              x: +b[2],
              y: +b[3]
            }) : n[0] = {
              x: +b[m - 2],
              y: +b[m - 1]
            } : m - 4 === l ? n[3] = n[2] : l || (n[0] = {
              x: +b[l],
              y: +b[l + 1]
            }), k.curve(d * (-n[0].x + 6 * n[1].x + n[2].x) / 6 + e * n[2].x, d * (-n[0].y + 6 * n[1].y + n[2].y) / 6 + e * n[2].y, d * (n[1].x + 6 * n[2].x - n[3].x) / 6 + e * n[2].x, d * (n[1].y + 6 * n[2].y - n[3].y) / 6 + e * n[2].y, n[2].x, n[2].y, !1, g[(l + 2) / 2]);
          }

          return k;
        }

        return c.Interpolation.none()([]);
      };
    }, c.Interpolation.monotoneCubic = function (a) {
      var b = {
        fillHoles: !1
      };
      return a = c.extend({}, b, a), function d(b, e) {
        var f = c.splitIntoSegments(b, e, {
          fillHoles: a.fillHoles,
          increasingX: !0
        });

        if (f.length) {
          if (f.length > 1) {
            var g = [];
            return f.forEach(function (a) {
              g.push(d(a.pathCoordinates, a.valueData));
            }), c.Svg.Path.join(g);
          }

          if (b = f[0].pathCoordinates, e = f[0].valueData, b.length <= 4) return c.Interpolation.none()(b, e);
          var h,
              i,
              j = [],
              k = [],
              l = b.length / 2,
              m = [],
              n = [],
              o = [],
              p = [];

          for (h = 0; h < l; h++) {
            j[h] = b[2 * h], k[h] = b[2 * h + 1];
          }

          for (h = 0; h < l - 1; h++) {
            o[h] = k[h + 1] - k[h], p[h] = j[h + 1] - j[h], n[h] = o[h] / p[h];
          }

          for (m[0] = n[0], m[l - 1] = n[l - 2], h = 1; h < l - 1; h++) {
            0 === n[h] || 0 === n[h - 1] || n[h - 1] > 0 != n[h] > 0 ? m[h] = 0 : (m[h] = 3 * (p[h - 1] + p[h]) / ((2 * p[h] + p[h - 1]) / n[h - 1] + (p[h] + 2 * p[h - 1]) / n[h]), isFinite(m[h]) || (m[h] = 0));
          }

          for (i = new c.Svg.Path().move(j[0], k[0], !1, e[0]), h = 0; h < l - 1; h++) {
            i.curve(j[h] + p[h] / 3, k[h] + m[h] * p[h] / 3, j[h + 1] - p[h] / 3, k[h + 1] - m[h + 1] * p[h] / 3, j[h + 1], k[h + 1], !1, e[h + 1]);
          }

          return i;
        }

        return c.Interpolation.none()([]);
      };
    }, c.Interpolation.step = function (a) {
      var b = {
        postpone: !0,
        fillHoles: !1
      };
      return a = c.extend({}, b, a), function (b, d) {
        for (var e, f, g, h = new c.Svg.Path(), i = 0; i < b.length; i += 2) {
          var j = b[i],
              k = b[i + 1],
              l = d[i / 2];
          void 0 !== l.value ? (void 0 === g ? h.move(j, k, !1, l) : (a.postpone ? h.line(j, f, !1, g) : h.line(e, k, !1, l), h.line(j, k, !1, l)), e = j, f = k, g = l) : a.fillHoles || (e = f = g = void 0);
        }

        return h;
      };
    };
  }(window, document, a), function (a, b, c) {
    "use strict";

    c.EventEmitter = function () {
      function a(a, b) {
        d[a] = d[a] || [], d[a].push(b);
      }

      function b(a, b) {
        d[a] && (b ? (d[a].splice(d[a].indexOf(b), 1), 0 === d[a].length && delete d[a]) : delete d[a]);
      }

      function c(a, b) {
        d[a] && d[a].forEach(function (a) {
          a(b);
        }), d["*"] && d["*"].forEach(function (c) {
          c(a, b);
        });
      }

      var d = [];
      return {
        addEventHandler: a,
        removeEventHandler: b,
        emit: c
      };
    };
  }(window, document, a), function (a, b, c) {
    "use strict";

    function d(a) {
      var b = [];
      if (a.length) for (var c = 0; c < a.length; c++) {
        b.push(a[c]);
      }
      return b;
    }

    function e(a, b) {
      var d = b || this.prototype || c.Class,
          e = Object.create(d);
      c.Class.cloneDefinitions(e, a);

      var f = function f() {
        var a,
            b = e.constructor || function () {};

        return a = this === c ? Object.create(e) : this, b.apply(a, Array.prototype.slice.call(arguments, 0)), a;
      };

      return f.prototype = e, f["super"] = d, f.extend = this.extend, f;
    }

    function f() {
      var a = d(arguments),
          b = a[0];
      return a.splice(1, a.length - 1).forEach(function (a) {
        Object.getOwnPropertyNames(a).forEach(function (c) {
          delete b[c], Object.defineProperty(b, c, Object.getOwnPropertyDescriptor(a, c));
        });
      }), b;
    }

    c.Class = {
      extend: e,
      cloneDefinitions: f
    };
  }(window, document, a), function (a, b, c) {
    "use strict";

    function d(a, b, d) {
      return a && (this.data = a || {}, this.data.labels = this.data.labels || [], this.data.series = this.data.series || [], this.eventEmitter.emit("data", {
        type: "update",
        data: this.data
      })), b && (this.options = c.extend({}, d ? this.options : this.defaultOptions, b), this.initializeTimeoutId || (this.optionsProvider.removeMediaQueryListeners(), this.optionsProvider = c.optionsProvider(this.options, this.responsiveOptions, this.eventEmitter))), this.initializeTimeoutId || this.createChart(this.optionsProvider.getCurrentOptions()), this;
    }

    function e() {
      return this.initializeTimeoutId ? a.clearTimeout(this.initializeTimeoutId) : (a.removeEventListener("resize", this.resizeListener), this.optionsProvider.removeMediaQueryListeners()), this;
    }

    function f(a, b) {
      return this.eventEmitter.addEventHandler(a, b), this;
    }

    function g(a, b) {
      return this.eventEmitter.removeEventHandler(a, b), this;
    }

    function h() {
      a.addEventListener("resize", this.resizeListener), this.optionsProvider = c.optionsProvider(this.options, this.responsiveOptions, this.eventEmitter), this.eventEmitter.addEventHandler("optionsChanged", function () {
        this.update();
      }.bind(this)), this.options.plugins && this.options.plugins.forEach(function (a) {
        a instanceof Array ? a[0](this, a[1]) : a(this);
      }.bind(this)), this.eventEmitter.emit("data", {
        type: "initial",
        data: this.data
      }), this.createChart(this.optionsProvider.getCurrentOptions()), this.initializeTimeoutId = void 0;
    }

    function i(a, b, d, e, f) {
      this.container = c.querySelector(a), this.data = b || {}, this.data.labels = this.data.labels || [], this.data.series = this.data.series || [], this.defaultOptions = d, this.options = e, this.responsiveOptions = f, this.eventEmitter = c.EventEmitter(), this.supportsForeignObject = c.Svg.isSupported("Extensibility"), this.supportsAnimations = c.Svg.isSupported("AnimationEventsAttribute"), this.resizeListener = function () {
        this.update();
      }.bind(this), this.container && (this.container.__chartist__ && this.container.__chartist__.detach(), this.container.__chartist__ = this), this.initializeTimeoutId = setTimeout(h.bind(this), 0);
    }

    c.Base = c.Class.extend({
      constructor: i,
      optionsProvider: void 0,
      container: void 0,
      svg: void 0,
      eventEmitter: void 0,
      createChart: function createChart() {
        throw new Error("Base chart type can't be instantiated!");
      },
      update: d,
      detach: e,
      on: f,
      off: g,
      version: c.version,
      supportsForeignObject: !1
    });
  }(window, document, a), function (a, b, c) {
    "use strict";

    function d(a, d, e, f, g) {
      a instanceof Element ? this._node = a : (this._node = b.createElementNS(c.namespaces.svg, a), "svg" === a && this.attr({
        "xmlns:ct": c.namespaces.ct
      })), d && this.attr(d), e && this.addClass(e), f && (g && f._node.firstChild ? f._node.insertBefore(this._node, f._node.firstChild) : f._node.appendChild(this._node));
    }

    function e(a, b) {
      return "string" == typeof a ? b ? this._node.getAttributeNS(b, a) : this._node.getAttribute(a) : (Object.keys(a).forEach(function (b) {
        if (void 0 !== a[b]) if (b.indexOf(":") !== -1) {
          var d = b.split(":");

          this._node.setAttributeNS(c.namespaces[d[0]], b, a[b]);
        } else this._node.setAttribute(b, a[b]);
      }.bind(this)), this);
    }

    function f(a, b, d, e) {
      return new c.Svg(a, b, d, this, e);
    }

    function g() {
      return this._node.parentNode instanceof SVGElement ? new c.Svg(this._node.parentNode) : null;
    }

    function h() {
      for (var a = this._node; "svg" !== a.nodeName;) {
        a = a.parentNode;
      }

      return new c.Svg(a);
    }

    function i(a) {
      var b = this._node.querySelector(a);

      return b ? new c.Svg(b) : null;
    }

    function j(a) {
      var b = this._node.querySelectorAll(a);

      return b.length ? new c.Svg.List(b) : null;
    }

    function k() {
      return this._node;
    }

    function l(a, d, e, f) {
      if ("string" == typeof a) {
        var g = b.createElement("div");
        g.innerHTML = a, a = g.firstChild;
      }

      a.setAttribute("xmlns", c.namespaces.xmlns);
      var h = this.elem("foreignObject", d, e, f);
      return h._node.appendChild(a), h;
    }

    function m(a) {
      return this._node.appendChild(b.createTextNode(a)), this;
    }

    function n() {
      for (; this._node.firstChild;) {
        this._node.removeChild(this._node.firstChild);
      }

      return this;
    }

    function o() {
      return this._node.parentNode.removeChild(this._node), this.parent();
    }

    function p(a) {
      return this._node.parentNode.replaceChild(a._node, this._node), a;
    }

    function q(a, b) {
      return b && this._node.firstChild ? this._node.insertBefore(a._node, this._node.firstChild) : this._node.appendChild(a._node), this;
    }

    function r() {
      return this._node.getAttribute("class") ? this._node.getAttribute("class").trim().split(/\s+/) : [];
    }

    function s(a) {
      return this._node.setAttribute("class", this.classes(this._node).concat(a.trim().split(/\s+/)).filter(function (a, b, c) {
        return c.indexOf(a) === b;
      }).join(" ")), this;
    }

    function t(a) {
      var b = a.trim().split(/\s+/);
      return this._node.setAttribute("class", this.classes(this._node).filter(function (a) {
        return b.indexOf(a) === -1;
      }).join(" ")), this;
    }

    function u() {
      return this._node.setAttribute("class", ""), this;
    }

    function v() {
      return this._node.getBoundingClientRect().height;
    }

    function w() {
      return this._node.getBoundingClientRect().width;
    }

    function x(a, b, d) {
      return void 0 === b && (b = !0), Object.keys(a).forEach(function (e) {
        function f(a, b) {
          var f,
              g,
              h,
              i = {};
          a.easing && (h = a.easing instanceof Array ? a.easing : c.Svg.Easing[a.easing], delete a.easing), a.begin = c.ensureUnit(a.begin, "ms"), a.dur = c.ensureUnit(a.dur, "ms"), h && (a.calcMode = "spline", a.keySplines = h.join(" "), a.keyTimes = "0;1"), b && (a.fill = "freeze", i[e] = a.from, this.attr(i), g = c.quantity(a.begin || 0).value, a.begin = "indefinite"), f = this.elem("animate", c.extend({
            attributeName: e
          }, a)), b && setTimeout(function () {
            try {
              f._node.beginElement();
            } catch (b) {
              i[e] = a.to, this.attr(i), f.remove();
            }
          }.bind(this), g), d && f._node.addEventListener("beginEvent", function () {
            d.emit("animationBegin", {
              element: this,
              animate: f._node,
              params: a
            });
          }.bind(this)), f._node.addEventListener("endEvent", function () {
            d && d.emit("animationEnd", {
              element: this,
              animate: f._node,
              params: a
            }), b && (i[e] = a.to, this.attr(i), f.remove());
          }.bind(this));
        }

        a[e] instanceof Array ? a[e].forEach(function (a) {
          f.bind(this)(a, !1);
        }.bind(this)) : f.bind(this)(a[e], b);
      }.bind(this)), this;
    }

    function y(a) {
      var b = this;
      this.svgElements = [];

      for (var d = 0; d < a.length; d++) {
        this.svgElements.push(new c.Svg(a[d]));
      }

      Object.keys(c.Svg.prototype).filter(function (a) {
        return ["constructor", "parent", "querySelector", "querySelectorAll", "replace", "append", "classes", "height", "width"].indexOf(a) === -1;
      }).forEach(function (a) {
        b[a] = function () {
          var d = Array.prototype.slice.call(arguments, 0);
          return b.svgElements.forEach(function (b) {
            c.Svg.prototype[a].apply(b, d);
          }), b;
        };
      });
    }

    c.Svg = c.Class.extend({
      constructor: d,
      attr: e,
      elem: f,
      parent: g,
      root: h,
      querySelector: i,
      querySelectorAll: j,
      getNode: k,
      foreignObject: l,
      text: m,
      empty: n,
      remove: o,
      replace: p,
      append: q,
      classes: r,
      addClass: s,
      removeClass: t,
      removeAllClasses: u,
      height: v,
      width: w,
      animate: x
    }), c.Svg.isSupported = function (a) {
      return b.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#" + a, "1.1");
    };
    var z = {
      easeInSine: [0.47, 0, 0.745, 0.715],
      easeOutSine: [0.39, 0.575, 0.565, 1],
      easeInOutSine: [0.445, 0.05, 0.55, 0.95],
      easeInQuad: [0.55, 0.085, 0.68, 0.53],
      easeOutQuad: [0.25, 0.46, 0.45, 0.94],
      easeInOutQuad: [0.455, 0.03, 0.515, 0.955],
      easeInCubic: [0.55, 0.055, 0.675, 0.19],
      easeOutCubic: [0.215, 0.61, 0.355, 1],
      easeInOutCubic: [0.645, 0.045, 0.355, 1],
      easeInQuart: [0.895, 0.03, 0.685, 0.22],
      easeOutQuart: [0.165, 0.84, 0.44, 1],
      easeInOutQuart: [0.77, 0, 0.175, 1],
      easeInQuint: [0.755, 0.05, 0.855, 0.06],
      easeOutQuint: [0.23, 1, 0.32, 1],
      easeInOutQuint: [0.86, 0, 0.07, 1],
      easeInExpo: [0.95, 0.05, 0.795, 0.035],
      easeOutExpo: [0.19, 1, 0.22, 1],
      easeInOutExpo: [1, 0, 0, 1],
      easeInCirc: [0.6, 0.04, 0.98, 0.335],
      easeOutCirc: [0.075, 0.82, 0.165, 1],
      easeInOutCirc: [0.785, 0.135, 0.15, 0.86],
      easeInBack: [0.6, -0.28, 0.735, 0.045],
      easeOutBack: [0.175, 0.885, 0.32, 1.275],
      easeInOutBack: [0.68, -0.55, 0.265, 1.55]
    };
    c.Svg.Easing = z, c.Svg.List = c.Class.extend({
      constructor: y
    });
  }(window, document, a), function (a, b, c) {
    "use strict";

    function d(a, b, d, e, f, g) {
      var h = c.extend({
        command: f ? a.toLowerCase() : a.toUpperCase()
      }, b, g ? {
        data: g
      } : {});
      d.splice(e, 0, h);
    }

    function e(a, b) {
      a.forEach(function (c, d) {
        u[c.command.toLowerCase()].forEach(function (e, f) {
          b(c, e, d, f, a);
        });
      });
    }

    function f(a, b) {
      this.pathElements = [], this.pos = 0, this.close = a, this.options = c.extend({}, v, b);
    }

    function g(a) {
      return void 0 !== a ? (this.pos = Math.max(0, Math.min(this.pathElements.length, a)), this) : this.pos;
    }

    function h(a) {
      return this.pathElements.splice(this.pos, a), this;
    }

    function i(a, b, c, e) {
      return d("M", {
        x: +a,
        y: +b
      }, this.pathElements, this.pos++, c, e), this;
    }

    function j(a, b, c, e) {
      return d("L", {
        x: +a,
        y: +b
      }, this.pathElements, this.pos++, c, e), this;
    }

    function k(a, b, c, e, f, g, h, i) {
      return d("C", {
        x1: +a,
        y1: +b,
        x2: +c,
        y2: +e,
        x: +f,
        y: +g
      }, this.pathElements, this.pos++, h, i), this;
    }

    function l(a, b, c, e, f, g, h, i, j) {
      return d("A", {
        rx: +a,
        ry: +b,
        xAr: +c,
        lAf: +e,
        sf: +f,
        x: +g,
        y: +h
      }, this.pathElements, this.pos++, i, j), this;
    }

    function m(a) {
      var b = a.replace(/([A-Za-z])([0-9])/g, "$1 $2").replace(/([0-9])([A-Za-z])/g, "$1 $2").split(/[\s,]+/).reduce(function (a, b) {
        return b.match(/[A-Za-z]/) && a.push([]), a[a.length - 1].push(b), a;
      }, []);
      "Z" === b[b.length - 1][0].toUpperCase() && b.pop();
      var d = b.map(function (a) {
        var b = a.shift(),
            d = u[b.toLowerCase()];
        return c.extend({
          command: b
        }, d.reduce(function (b, c, d) {
          return b[c] = +a[d], b;
        }, {}));
      }),
          e = [this.pos, 0];
      return Array.prototype.push.apply(e, d), Array.prototype.splice.apply(this.pathElements, e), this.pos += d.length, this;
    }

    function n() {
      var a = Math.pow(10, this.options.accuracy);
      return this.pathElements.reduce(function (b, c) {
        var d = u[c.command.toLowerCase()].map(function (b) {
          return this.options.accuracy ? Math.round(c[b] * a) / a : c[b];
        }.bind(this));
        return b + c.command + d.join(",");
      }.bind(this), "") + (this.close ? "Z" : "");
    }

    function o(a, b) {
      return e(this.pathElements, function (c, d) {
        c[d] *= "x" === d[0] ? a : b;
      }), this;
    }

    function p(a, b) {
      return e(this.pathElements, function (c, d) {
        c[d] += "x" === d[0] ? a : b;
      }), this;
    }

    function q(a) {
      return e(this.pathElements, function (b, c, d, e, f) {
        var g = a(b, c, d, e, f);
        (g || 0 === g) && (b[c] = g);
      }), this;
    }

    function r(a) {
      var b = new c.Svg.Path(a || this.close);
      return b.pos = this.pos, b.pathElements = this.pathElements.slice().map(function (a) {
        return c.extend({}, a);
      }), b.options = c.extend({}, this.options), b;
    }

    function s(a) {
      var b = [new c.Svg.Path()];
      return this.pathElements.forEach(function (d) {
        d.command === a.toUpperCase() && 0 !== b[b.length - 1].pathElements.length && b.push(new c.Svg.Path()), b[b.length - 1].pathElements.push(d);
      }), b;
    }

    function t(a, b, d) {
      for (var e = new c.Svg.Path(b, d), f = 0; f < a.length; f++) {
        for (var g = a[f], h = 0; h < g.pathElements.length; h++) {
          e.pathElements.push(g.pathElements[h]);
        }
      }

      return e;
    }

    var u = {
      m: ["x", "y"],
      l: ["x", "y"],
      c: ["x1", "y1", "x2", "y2", "x", "y"],
      a: ["rx", "ry", "xAr", "lAf", "sf", "x", "y"]
    },
        v = {
      accuracy: 3
    };
    c.Svg.Path = c.Class.extend({
      constructor: f,
      position: g,
      remove: h,
      move: i,
      line: j,
      curve: k,
      arc: l,
      scale: o,
      translate: p,
      transform: q,
      parse: m,
      stringify: n,
      clone: r,
      splitByCommand: s
    }), c.Svg.Path.elementDescriptions = u, c.Svg.Path.join = t;
  }(window, document, a), function (a, b, c) {
    "use strict";

    function d(a, b, c, d) {
      this.units = a, this.counterUnits = a === f.x ? f.y : f.x, this.chartRect = b, this.axisLength = b[a.rectEnd] - b[a.rectStart], this.gridOffset = b[a.rectOffset], this.ticks = c, this.options = d;
    }

    function e(a, b, d, e, f) {
      var g = e["axis" + this.units.pos.toUpperCase()],
          h = this.ticks.map(this.projectValue.bind(this)),
          i = this.ticks.map(g.labelInterpolationFnc);
      h.forEach(function (j, k) {
        var l,
            m = {
          x: 0,
          y: 0
        };
        l = h[k + 1] ? h[k + 1] - j : Math.max(this.axisLength - j, 30), c.isFalseyButZero(i[k]) && "" !== i[k] || ("x" === this.units.pos ? (j = this.chartRect.x1 + j, m.x = e.axisX.labelOffset.x, "start" === e.axisX.position ? m.y = this.chartRect.padding.top + e.axisX.labelOffset.y + (d ? 5 : 20) : m.y = this.chartRect.y1 + e.axisX.labelOffset.y + (d ? 5 : 20)) : (j = this.chartRect.y1 - j, m.y = e.axisY.labelOffset.y - (d ? l : 0), "start" === e.axisY.position ? m.x = d ? this.chartRect.padding.left + e.axisY.labelOffset.x : this.chartRect.x1 - 10 : m.x = this.chartRect.x2 + e.axisY.labelOffset.x + 10), g.showGrid && c.createGrid(j, k, this, this.gridOffset, this.chartRect[this.counterUnits.len](), a, [e.classNames.grid, e.classNames[this.units.dir]], f), g.showLabel && c.createLabel(j, l, k, i, this, g.offset, m, b, [e.classNames.label, e.classNames[this.units.dir], "start" === g.position ? e.classNames[g.position] : e.classNames.end], d, f));
      }.bind(this));
    }

    var f = {
      x: {
        pos: "x",
        len: "width",
        dir: "horizontal",
        rectStart: "x1",
        rectEnd: "x2",
        rectOffset: "y2"
      },
      y: {
        pos: "y",
        len: "height",
        dir: "vertical",
        rectStart: "y2",
        rectEnd: "y1",
        rectOffset: "x1"
      }
    };
    c.Axis = c.Class.extend({
      constructor: d,
      createGridAndLabels: e,
      projectValue: function projectValue(a, b, c) {
        throw new Error("Base axis can't be instantiated!");
      }
    }), c.Axis.units = f;
  }(window, document, a), function (a, b, c) {
    "use strict";

    function d(a, b, d, e) {
      var f = e.highLow || c.getHighLow(b, e, a.pos);
      this.bounds = c.getBounds(d[a.rectEnd] - d[a.rectStart], f, e.scaleMinSpace || 20, e.onlyInteger), this.range = {
        min: this.bounds.min,
        max: this.bounds.max
      }, c.AutoScaleAxis["super"].constructor.call(this, a, d, this.bounds.values, e);
    }

    function e(a) {
      return this.axisLength * (+c.getMultiValue(a, this.units.pos) - this.bounds.min) / this.bounds.range;
    }

    c.AutoScaleAxis = c.Axis.extend({
      constructor: d,
      projectValue: e
    });
  }(window, document, a), function (a, b, c) {
    "use strict";

    function d(a, b, d, e) {
      var f = e.highLow || c.getHighLow(b, e, a.pos);
      this.divisor = e.divisor || 1, this.ticks = e.ticks || c.times(this.divisor).map(function (a, b) {
        return f.low + (f.high - f.low) / this.divisor * b;
      }.bind(this)), this.ticks.sort(function (a, b) {
        return a - b;
      }), this.range = {
        min: f.low,
        max: f.high
      }, c.FixedScaleAxis["super"].constructor.call(this, a, d, this.ticks, e), this.stepLength = this.axisLength / this.divisor;
    }

    function e(a) {
      return this.axisLength * (+c.getMultiValue(a, this.units.pos) - this.range.min) / (this.range.max - this.range.min);
    }

    c.FixedScaleAxis = c.Axis.extend({
      constructor: d,
      projectValue: e
    });
  }(window, document, a), function (a, b, c) {
    "use strict";

    function d(a, b, d, e) {
      c.StepAxis["super"].constructor.call(this, a, d, e.ticks, e);
      var f = Math.max(1, e.ticks.length - (e.stretch ? 1 : 0));
      this.stepLength = this.axisLength / f;
    }

    function e(a, b) {
      return this.stepLength * b;
    }

    c.StepAxis = c.Axis.extend({
      constructor: d,
      projectValue: e
    });
  }(window, document, a), function (a, b, c) {
    "use strict";

    function d(a) {
      var b = c.normalizeData(this.data, a.reverseData, !0);
      this.svg = c.createSvg(this.container, a.width, a.height, a.classNames.chart);
      var d,
          e,
          g = this.svg.elem("g").addClass(a.classNames.gridGroup),
          h = this.svg.elem("g"),
          i = this.svg.elem("g").addClass(a.classNames.labelGroup),
          j = c.createChartRect(this.svg, a, f.padding);
      d = void 0 === a.axisX.type ? new c.StepAxis(c.Axis.units.x, b.normalized.series, j, c.extend({}, a.axisX, {
        ticks: b.normalized.labels,
        stretch: a.fullWidth
      })) : a.axisX.type.call(c, c.Axis.units.x, b.normalized.series, j, a.axisX), e = void 0 === a.axisY.type ? new c.AutoScaleAxis(c.Axis.units.y, b.normalized.series, j, c.extend({}, a.axisY, {
        high: c.isNumeric(a.high) ? a.high : a.axisY.high,
        low: c.isNumeric(a.low) ? a.low : a.axisY.low
      })) : a.axisY.type.call(c, c.Axis.units.y, b.normalized.series, j, a.axisY), d.createGridAndLabels(g, i, this.supportsForeignObject, a, this.eventEmitter), e.createGridAndLabels(g, i, this.supportsForeignObject, a, this.eventEmitter), a.showGridBackground && c.createGridBackground(g, j, a.classNames.gridBackground, this.eventEmitter), b.raw.series.forEach(function (f, g) {
        var i = h.elem("g");
        i.attr({
          "ct:series-name": f.name,
          "ct:meta": c.serialize(f.meta)
        }), i.addClass([a.classNames.series, f.className || a.classNames.series + "-" + c.alphaNumerate(g)].join(" "));
        var k = [],
            l = [];
        b.normalized.series[g].forEach(function (a, h) {
          var i = {
            x: j.x1 + d.projectValue(a, h, b.normalized.series[g]),
            y: j.y1 - e.projectValue(a, h, b.normalized.series[g])
          };
          k.push(i.x, i.y), l.push({
            value: a,
            valueIndex: h,
            meta: c.getMetaData(f, h)
          });
        }.bind(this));
        var m = {
          lineSmooth: c.getSeriesOption(f, a, "lineSmooth"),
          showPoint: c.getSeriesOption(f, a, "showPoint"),
          showLine: c.getSeriesOption(f, a, "showLine"),
          showArea: c.getSeriesOption(f, a, "showArea"),
          areaBase: c.getSeriesOption(f, a, "areaBase")
        },
            n = "function" == typeof m.lineSmooth ? m.lineSmooth : m.lineSmooth ? c.Interpolation.monotoneCubic() : c.Interpolation.none(),
            o = n(k, l);

        if (m.showPoint && o.pathElements.forEach(function (b) {
          var h = i.elem("line", {
            x1: b.x,
            y1: b.y,
            x2: b.x + 0.01,
            y2: b.y
          }, a.classNames.point).attr({
            "ct:value": [b.data.value.x, b.data.value.y].filter(c.isNumeric).join(","),
            "ct:meta": c.serialize(b.data.meta)
          });
          this.eventEmitter.emit("draw", {
            type: "point",
            value: b.data.value,
            index: b.data.valueIndex,
            meta: b.data.meta,
            series: f,
            seriesIndex: g,
            axisX: d,
            axisY: e,
            group: i,
            element: h,
            x: b.x,
            y: b.y
          });
        }.bind(this)), m.showLine) {
          var p = i.elem("path", {
            d: o.stringify()
          }, a.classNames.line, !0);
          this.eventEmitter.emit("draw", {
            type: "line",
            values: b.normalized.series[g],
            path: o.clone(),
            chartRect: j,
            index: g,
            series: f,
            seriesIndex: g,
            seriesMeta: f.meta,
            axisX: d,
            axisY: e,
            group: i,
            element: p
          });
        }

        if (m.showArea && e.range) {
          var q = Math.max(Math.min(m.areaBase, e.range.max), e.range.min),
              r = j.y1 - e.projectValue(q);
          o.splitByCommand("M").filter(function (a) {
            return a.pathElements.length > 1;
          }).map(function (a) {
            var b = a.pathElements[0],
                c = a.pathElements[a.pathElements.length - 1];
            return a.clone(!0).position(0).remove(1).move(b.x, r).line(b.x, b.y).position(a.pathElements.length + 1).line(c.x, r);
          }).forEach(function (c) {
            var h = i.elem("path", {
              d: c.stringify()
            }, a.classNames.area, !0);
            this.eventEmitter.emit("draw", {
              type: "area",
              values: b.normalized.series[g],
              path: c.clone(),
              series: f,
              seriesIndex: g,
              axisX: d,
              axisY: e,
              chartRect: j,
              index: g,
              group: i,
              element: h
            });
          }.bind(this));
        }
      }.bind(this)), this.eventEmitter.emit("created", {
        bounds: e.bounds,
        chartRect: j,
        axisX: d,
        axisY: e,
        svg: this.svg,
        options: a
      });
    }

    function e(a, b, d, e) {
      c.Line["super"].constructor.call(this, a, b, f, c.extend({}, f, d), e);
    }

    var f = {
      axisX: {
        offset: 30,
        position: "end",
        labelOffset: {
          x: 0,
          y: 0
        },
        showLabel: !0,
        showGrid: !0,
        labelInterpolationFnc: c.noop,
        type: void 0
      },
      axisY: {
        offset: 40,
        position: "start",
        labelOffset: {
          x: 0,
          y: 0
        },
        showLabel: !0,
        showGrid: !0,
        labelInterpolationFnc: c.noop,
        type: void 0,
        scaleMinSpace: 20,
        onlyInteger: !1
      },
      width: void 0,
      height: void 0,
      showLine: !0,
      showPoint: !0,
      showArea: !1,
      areaBase: 0,
      lineSmooth: !0,
      showGridBackground: !1,
      low: void 0,
      high: void 0,
      chartPadding: {
        top: 15,
        right: 15,
        bottom: 5,
        left: 10
      },
      fullWidth: !1,
      reverseData: !1,
      classNames: {
        chart: "ct-chart-line",
        label: "ct-label",
        labelGroup: "ct-labels",
        series: "ct-series",
        line: "ct-line",
        point: "ct-point",
        area: "ct-area",
        grid: "ct-grid",
        gridGroup: "ct-grids",
        gridBackground: "ct-grid-background",
        vertical: "ct-vertical",
        horizontal: "ct-horizontal",
        start: "ct-start",
        end: "ct-end"
      }
    };
    c.Line = c.Base.extend({
      constructor: e,
      createChart: d
    });
  }(window, document, a), function (a, b, c) {
    "use strict";

    function d(a) {
      var b, d;
      a.distributeSeries ? (b = c.normalizeData(this.data, a.reverseData, a.horizontalBars ? "x" : "y"), b.normalized.series = b.normalized.series.map(function (a) {
        return [a];
      })) : b = c.normalizeData(this.data, a.reverseData, a.horizontalBars ? "x" : "y"), this.svg = c.createSvg(this.container, a.width, a.height, a.classNames.chart + (a.horizontalBars ? " " + a.classNames.horizontalBars : ""));
      var e = this.svg.elem("g").addClass(a.classNames.gridGroup),
          g = this.svg.elem("g"),
          h = this.svg.elem("g").addClass(a.classNames.labelGroup);

      if (a.stackBars && 0 !== b.normalized.series.length) {
        var i = c.serialMap(b.normalized.series, function () {
          return Array.prototype.slice.call(arguments).map(function (a) {
            return a;
          }).reduce(function (a, b) {
            return {
              x: a.x + (b && b.x) || 0,
              y: a.y + (b && b.y) || 0
            };
          }, {
            x: 0,
            y: 0
          });
        });
        d = c.getHighLow([i], a, a.horizontalBars ? "x" : "y");
      } else d = c.getHighLow(b.normalized.series, a, a.horizontalBars ? "x" : "y");

      d.high = +a.high || (0 === a.high ? 0 : d.high), d.low = +a.low || (0 === a.low ? 0 : d.low);
      var j,
          k,
          l,
          m,
          n,
          o = c.createChartRect(this.svg, a, f.padding);
      k = a.distributeSeries && a.stackBars ? b.normalized.labels.slice(0, 1) : b.normalized.labels, a.horizontalBars ? (j = m = void 0 === a.axisX.type ? new c.AutoScaleAxis(c.Axis.units.x, b.normalized.series, o, c.extend({}, a.axisX, {
        highLow: d,
        referenceValue: 0
      })) : a.axisX.type.call(c, c.Axis.units.x, b.normalized.series, o, c.extend({}, a.axisX, {
        highLow: d,
        referenceValue: 0
      })), l = n = void 0 === a.axisY.type ? new c.StepAxis(c.Axis.units.y, b.normalized.series, o, {
        ticks: k
      }) : a.axisY.type.call(c, c.Axis.units.y, b.normalized.series, o, a.axisY)) : (l = m = void 0 === a.axisX.type ? new c.StepAxis(c.Axis.units.x, b.normalized.series, o, {
        ticks: k
      }) : a.axisX.type.call(c, c.Axis.units.x, b.normalized.series, o, a.axisX), j = n = void 0 === a.axisY.type ? new c.AutoScaleAxis(c.Axis.units.y, b.normalized.series, o, c.extend({}, a.axisY, {
        highLow: d,
        referenceValue: 0
      })) : a.axisY.type.call(c, c.Axis.units.y, b.normalized.series, o, c.extend({}, a.axisY, {
        highLow: d,
        referenceValue: 0
      })));
      var p = a.horizontalBars ? o.x1 + j.projectValue(0) : o.y1 - j.projectValue(0),
          q = [];
      l.createGridAndLabels(e, h, this.supportsForeignObject, a, this.eventEmitter), j.createGridAndLabels(e, h, this.supportsForeignObject, a, this.eventEmitter), a.showGridBackground && c.createGridBackground(e, o, a.classNames.gridBackground, this.eventEmitter), b.raw.series.forEach(function (d, e) {
        var f,
            h,
            i = e - (b.raw.series.length - 1) / 2;
        f = a.distributeSeries && !a.stackBars ? l.axisLength / b.normalized.series.length / 2 : a.distributeSeries && a.stackBars ? l.axisLength / 2 : l.axisLength / b.normalized.series[e].length / 2, h = g.elem("g"), h.attr({
          "ct:series-name": d.name,
          "ct:meta": c.serialize(d.meta)
        }), h.addClass([a.classNames.series, d.className || a.classNames.series + "-" + c.alphaNumerate(e)].join(" ")), b.normalized.series[e].forEach(function (g, k) {
          var r, s, t, u;

          if (u = a.distributeSeries && !a.stackBars ? e : a.distributeSeries && a.stackBars ? 0 : k, r = a.horizontalBars ? {
            x: o.x1 + j.projectValue(g && g.x ? g.x : 0, k, b.normalized.series[e]),
            y: o.y1 - l.projectValue(g && g.y ? g.y : 0, u, b.normalized.series[e])
          } : {
            x: o.x1 + l.projectValue(g && g.x ? g.x : 0, u, b.normalized.series[e]),
            y: o.y1 - j.projectValue(g && g.y ? g.y : 0, k, b.normalized.series[e])
          }, l instanceof c.StepAxis && (l.options.stretch || (r[l.units.pos] += f * (a.horizontalBars ? -1 : 1)), r[l.units.pos] += a.stackBars || a.distributeSeries ? 0 : i * a.seriesBarDistance * (a.horizontalBars ? -1 : 1)), t = q[k] || p, q[k] = t - (p - r[l.counterUnits.pos]), void 0 !== g) {
            var v = {};
            v[l.units.pos + "1"] = r[l.units.pos], v[l.units.pos + "2"] = r[l.units.pos], !a.stackBars || "accumulate" !== a.stackMode && a.stackMode ? (v[l.counterUnits.pos + "1"] = p, v[l.counterUnits.pos + "2"] = r[l.counterUnits.pos]) : (v[l.counterUnits.pos + "1"] = t, v[l.counterUnits.pos + "2"] = q[k]), v.x1 = Math.min(Math.max(v.x1, o.x1), o.x2), v.x2 = Math.min(Math.max(v.x2, o.x1), o.x2), v.y1 = Math.min(Math.max(v.y1, o.y2), o.y1), v.y2 = Math.min(Math.max(v.y2, o.y2), o.y1);
            var w = c.getMetaData(d, k);
            s = h.elem("line", v, a.classNames.bar).attr({
              "ct:value": [g.x, g.y].filter(c.isNumeric).join(","),
              "ct:meta": c.serialize(w)
            }), this.eventEmitter.emit("draw", c.extend({
              type: "bar",
              value: g,
              index: k,
              meta: w,
              series: d,
              seriesIndex: e,
              axisX: m,
              axisY: n,
              chartRect: o,
              group: h,
              element: s
            }, v));
          }
        }.bind(this));
      }.bind(this)), this.eventEmitter.emit("created", {
        bounds: j.bounds,
        chartRect: o,
        axisX: m,
        axisY: n,
        svg: this.svg,
        options: a
      });
    }

    function e(a, b, d, e) {
      c.Bar["super"].constructor.call(this, a, b, f, c.extend({}, f, d), e);
    }

    var f = {
      axisX: {
        offset: 30,
        position: "end",
        labelOffset: {
          x: 0,
          y: 0
        },
        showLabel: !0,
        showGrid: !0,
        labelInterpolationFnc: c.noop,
        scaleMinSpace: 30,
        onlyInteger: !1
      },
      axisY: {
        offset: 40,
        position: "start",
        labelOffset: {
          x: 0,
          y: 0
        },
        showLabel: !0,
        showGrid: !0,
        labelInterpolationFnc: c.noop,
        scaleMinSpace: 20,
        onlyInteger: !1
      },
      width: void 0,
      height: void 0,
      high: void 0,
      low: void 0,
      referenceValue: 0,
      chartPadding: {
        top: 15,
        right: 15,
        bottom: 5,
        left: 10
      },
      seriesBarDistance: 15,
      stackBars: !1,
      stackMode: "accumulate",
      horizontalBars: !1,
      distributeSeries: !1,
      reverseData: !1,
      showGridBackground: !1,
      classNames: {
        chart: "ct-chart-bar",
        horizontalBars: "ct-horizontal-bars",
        label: "ct-label",
        labelGroup: "ct-labels",
        series: "ct-series",
        bar: "ct-bar",
        grid: "ct-grid",
        gridGroup: "ct-grids",
        gridBackground: "ct-grid-background",
        vertical: "ct-vertical",
        horizontal: "ct-horizontal",
        start: "ct-start",
        end: "ct-end"
      }
    };
    c.Bar = c.Base.extend({
      constructor: e,
      createChart: d
    });
  }(window, document, a), function (a, b, c) {
    "use strict";

    function d(a, b, c) {
      var d = b.x > a.x;
      return d && "explode" === c || !d && "implode" === c ? "start" : d && "implode" === c || !d && "explode" === c ? "end" : "middle";
    }

    function e(a) {
      var b,
          e,
          f,
          h,
          i,
          j = c.normalizeData(this.data),
          k = [],
          l = a.startAngle;
      this.svg = c.createSvg(this.container, a.width, a.height, a.donut ? a.classNames.chartDonut : a.classNames.chartPie), e = c.createChartRect(this.svg, a, g.padding), f = Math.min(e.width() / 2, e.height() / 2), i = a.total || j.normalized.series.reduce(function (a, b) {
        return a + b;
      }, 0);
      var m = c.quantity(a.donutWidth);
      "%" === m.unit && (m.value *= f / 100), f -= a.donut && !a.donutSolid ? m.value / 2 : 0, h = "outside" === a.labelPosition || a.donut && !a.donutSolid ? f : "center" === a.labelPosition ? 0 : a.donutSolid ? f - m.value / 2 : f / 2, h += a.labelOffset;
      var n = {
        x: e.x1 + e.width() / 2,
        y: e.y2 + e.height() / 2
      },
          o = 1 === j.raw.series.filter(function (a) {
        return a.hasOwnProperty("value") ? 0 !== a.value : 0 !== a;
      }).length;
      j.raw.series.forEach(function (a, b) {
        k[b] = this.svg.elem("g", null, null);
      }.bind(this)), a.showLabel && (b = this.svg.elem("g", null, null)), j.raw.series.forEach(function (e, g) {
        if (0 !== j.normalized.series[g] || !a.ignoreEmptyValues) {
          k[g].attr({
            "ct:series-name": e.name
          }), k[g].addClass([a.classNames.series, e.className || a.classNames.series + "-" + c.alphaNumerate(g)].join(" "));
          var p = i > 0 ? l + j.normalized.series[g] / i * 360 : 0,
              q = Math.max(0, l - (0 === g || o ? 0 : 0.2));
          p - q >= 359.99 && (p = q + 359.99);
          var r,
              s,
              t,
              u = c.polarToCartesian(n.x, n.y, f, q),
              v = c.polarToCartesian(n.x, n.y, f, p),
              w = new c.Svg.Path(!a.donut || a.donutSolid).move(v.x, v.y).arc(f, f, 0, p - l > 180, 0, u.x, u.y);
          a.donut ? a.donutSolid && (t = f - m.value, r = c.polarToCartesian(n.x, n.y, t, l - (0 === g || o ? 0 : 0.2)), s = c.polarToCartesian(n.x, n.y, t, p), w.line(r.x, r.y), w.arc(t, t, 0, p - l > 180, 1, s.x, s.y)) : w.line(n.x, n.y);
          var x = a.classNames.slicePie;
          a.donut && (x = a.classNames.sliceDonut, a.donutSolid && (x = a.classNames.sliceDonutSolid));
          var y = k[g].elem("path", {
            d: w.stringify()
          }, x);

          if (y.attr({
            "ct:value": j.normalized.series[g],
            "ct:meta": c.serialize(e.meta)
          }), a.donut && !a.donutSolid && (y._node.style.strokeWidth = m.value + "px"), this.eventEmitter.emit("draw", {
            type: "slice",
            value: j.normalized.series[g],
            totalDataSum: i,
            index: g,
            meta: e.meta,
            series: e,
            group: k[g],
            element: y,
            path: w.clone(),
            center: n,
            radius: f,
            startAngle: l,
            endAngle: p
          }), a.showLabel) {
            var z;
            z = 1 === j.raw.series.length ? {
              x: n.x,
              y: n.y
            } : c.polarToCartesian(n.x, n.y, h, l + (p - l) / 2);
            var A;
            A = j.normalized.labels && !c.isFalseyButZero(j.normalized.labels[g]) ? j.normalized.labels[g] : j.normalized.series[g];
            var B = a.labelInterpolationFnc(A, g);

            if (B || 0 === B) {
              var C = b.elem("text", {
                dx: z.x,
                dy: z.y,
                "text-anchor": d(n, z, a.labelDirection)
              }, a.classNames.label).text("" + B);
              this.eventEmitter.emit("draw", {
                type: "label",
                index: g,
                group: b,
                element: C,
                text: "" + B,
                x: z.x,
                y: z.y
              });
            }
          }

          l = p;
        }
      }.bind(this)), this.eventEmitter.emit("created", {
        chartRect: e,
        svg: this.svg,
        options: a
      });
    }

    function f(a, b, d, e) {
      c.Pie["super"].constructor.call(this, a, b, g, c.extend({}, g, d), e);
    }

    var g = {
      width: void 0,
      height: void 0,
      chartPadding: 5,
      classNames: {
        chartPie: "ct-chart-pie",
        chartDonut: "ct-chart-donut",
        series: "ct-series",
        slicePie: "ct-slice-pie",
        sliceDonut: "ct-slice-donut",
        sliceDonutSolid: "ct-slice-donut-solid",
        label: "ct-label"
      },
      startAngle: 0,
      total: void 0,
      donut: !1,
      donutSolid: !1,
      donutWidth: 60,
      showLabel: !0,
      labelOffset: 0,
      labelPosition: "inside",
      labelInterpolationFnc: c.noop,
      labelDirection: "neutral",
      reverseData: !1,
      ignoreEmptyValues: !1
    };
    c.Pie = c.Base.extend({
      constructor: f,
      createChart: e,
      determineAnchorPosition: d
    });
  }(window, document, a), a;
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
};
/* chartist-plugin-tooltip 0.0.18
 * Copyright Â© 2017 Markus Padourek
 * Free to use under the WTFPL license.
 * http://www.wtfpl.net/
 */


!function (a, b) {
  "function" == typeof define && define.amd ? define(["chartist"], function (c) {
    return a.returnExportsGlobal = b(c);
  }) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? module.exports = b(require("chartist")) : a["Chartist.plugins.tooltip"] = b(Chartist);
}(this, function (a) {
  return function (a, b, c) {
    "use strict";

    function d(a) {
      f(a, "tooltip-show") || (a.className = a.className + " tooltip-show");
    }

    function e(a) {
      var b = new RegExp("tooltip-show\\s*", "gi");
      a.className = a.className.replace(b, "").trim();
    }

    function f(a, b) {
      return (" " + a.getAttribute("class") + " ").indexOf(" " + b + " ") > -1;
    }

    function g(a, b) {
      do {
        a = a.nextSibling;
      } while (a && !f(a, b));

      return a;
    }

    function h(a) {
      return a.innerText || a.textContent;
    }

    var i = {
      currency: void 0,
      currencyFormatCallback: void 0,
      tooltipOffset: {
        x: 0,
        y: -20
      },
      anchorToPoint: !1,
      appendToBody: !1,
      "class": void 0,
      pointClass: "ct-point"
    };
    c.plugins = c.plugins || {}, c.plugins.tooltip = function (j) {
      return j = c.extend({}, i, j), function (i) {
        function k(a, b, c) {
          n.addEventListener(a, function (a) {
            b && !f(a.target, b) || c(a);
          });
        }

        function l(b) {
          p = p || o.offsetHeight, q = q || o.offsetWidth;
          var c,
              d,
              e = -q / 2 + j.tooltipOffset.x,
              f = -p + j.tooltipOffset.y;
          if (j.appendToBody) o.style.top = b.pageY + f + "px", o.style.left = b.pageX + e + "px";else {
            var g = n.getBoundingClientRect(),
                h = b.pageX - g.left - a.pageXOffset,
                i = b.pageY - g.top - a.pageYOffset;
            !0 === j.anchorToPoint && b.target.x2 && b.target.y2 && (c = parseInt(b.target.x2.baseVal.value), d = parseInt(b.target.y2.baseVal.value)), o.style.top = (d || i) + f + "px", o.style.left = (c || h) + e + "px";
          }
        }

        var m = j.pointClass;
        i.constructor.name == c.Bar.prototype.constructor.name ? m = "ct-bar" : i.constructor.name == c.Pie.prototype.constructor.name && (m = i.options.donut ? "ct-slice-donut" : "ct-slice-pie");
        var n = i.container,
            o = n.querySelector(".chartist-tooltip");
        o || (o = b.createElement("div"), o.className = j["class"] ? "chartist-tooltip " + j["class"] : "chartist-tooltip", j.appendToBody ? b.body.appendChild(o) : n.appendChild(o));
        var p = o.offsetHeight,
            q = o.offsetWidth;
        e(o), k("mouseover", m, function (a) {
          var e = a.target,
              f = "",
              k = i instanceof c.Pie ? e : e.parentNode,
              m = k ? e.parentNode.getAttribute("ct:meta") || e.parentNode.getAttribute("ct:series-name") : "",
              n = e.getAttribute("ct:meta") || m || "",
              r = !!n,
              s = e.getAttribute("ct:value");
          if (j.transformTooltipTextFnc && "function" == typeof j.transformTooltipTextFnc && (s = j.transformTooltipTextFnc(s)), j.tooltipFnc && "function" == typeof j.tooltipFnc) f = j.tooltipFnc(n, s);else {
            if (j.metaIsHTML) {
              var t = b.createElement("textarea");
              t.innerHTML = n, n = t.value;
            }

            if (n = '<span class="chartist-tooltip-meta">' + n + "</span>", r) f += n + "<br>";else if (i instanceof c.Pie) {
              var u = g(e, "ct-label");
              u && (f += h(u) + "<br>");
            }
            s && (j.currency && (s = void 0 != j.currencyFormatCallback ? j.currencyFormatCallback(s, j) : j.currency + s.replace(/(\d)(?=(\d{3})+(?:\.\d+)?$)/g, "$1,")), s = '<span class="chartist-tooltip-value">' + s + "</span>", f += s);
          }
          f && (o.innerHTML = f, l(a), d(o), p = o.offsetHeight, q = o.offsetWidth);
        }), k("mouseout", m, function () {
          e(o);
        }), k("mousemove", null, function (a) {
          !1 === j.anchorToPoint && l(a);
        });
      };
    };
  }(window, document, a), a.plugins.tooltip;
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
};

!function (e, t) {
  "function" == typeof define && define.amd ? define(["chartist"], function (s) {
    return e.returnExportsGlobal = t(s);
  }) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? module.exports = t(require("chartist")) : e["Chartist.plugins.legend"] = t(e.Chartist);
}(this, function (e) {
  "use strict";

  var t = {
    className: "",
    classNames: !1,
    removeAll: !1,
    legendNames: !1,
    clickable: !0,
    onClick: null,
    position: "top"
  };
  return e.plugins = e.plugins || {}, e.plugins.legend = function (s) {
    function a(e, t) {
      return e - t;
    }

    if (s && s.position) {
      if (!("top" === s.position || "bottom" === s.position || s.position instanceof HTMLElement)) throw Error("The position you entered is not a valid position");

      if (s.position instanceof HTMLElement) {
        var i = s.position;
        delete s.position;
      }
    }

    return s = e.extend({}, t, s), i && (s.position = i), function (t) {
      var i = t.container.querySelector(".ct-legend");

      if (i && i.parentNode.removeChild(i), s.clickable) {
        var n = t.data.series.map(function (s, a) {
          return "object" != (typeof s === "undefined" ? "undefined" : _typeof(s)) && (s = {
            value: s
          }), s.className = s.className || t.options.classNames.series + "-" + e.alphaNumerate(a), s;
        });
        t.data.series = n;
      }

      var o = document.createElement("ul"),
          l = t instanceof e.Pie;
      o.className = "ct-legend", t instanceof e.Pie && o.classList.add("ct-legend-inside"), "string" == typeof s.className && s.className.length > 0 && o.classList.add(s.className), t.options.width && (o.style.cssText = "width: " + t.options.width + "px;margin: 0 auto;");
      var r = [],
          c = t.data.series.slice(0),
          d = t.data.series,
          p = l && t.data.labels && t.data.labels.length;

      if (p) {
        var u = t.data.labels.slice(0);
        d = t.data.labels;
      }

      d = s.legendNames || d;
      var f = Array.isArray(s.classNames) && s.classNames.length === d.length;
      d.forEach(function (e, t) {
        var a = document.createElement("li");
        a.className = "ct-series-" + t, f && (a.className += " " + s.classNames[t]), a.setAttribute("data-legend", t), a.textContent = e.name || e, o.appendChild(a);
      }), t.on("created", function (e) {
        if (s.position instanceof HTMLElement) s.position.insertBefore(o, null);else switch (s.position) {
          case "top":
            t.container.insertBefore(o, t.container.childNodes[0]);
            break;

          case "bottom":
            t.container.insertBefore(o, null);
        }
      }), s.clickable && o.addEventListener("click", function (e) {
        var i = e.target;

        if (i.parentNode === o && i.hasAttribute("data-legend")) {
          e.preventDefault();
          var n = parseInt(i.getAttribute("data-legend")),
              l = r.indexOf(n);
          l > -1 ? (r.splice(l, 1), i.classList.remove("inactive")) : s.removeAll ? (r.push(n), i.classList.add("inactive")) : t.data.series.length > 1 ? (r.push(n), i.classList.add("inactive")) : (r = [], Array.prototype.slice.call(o.childNodes).forEach(function (e) {
            e.classList.remove("inactive");
          }));
          var d = c.slice(0);
          if (p) var f = u.slice(0);
          r.sort(a).reverse(), r.forEach(function (e) {
            d.splice(e, 1), p && f.splice(e, 1);
          }), s.onClick && s.onClick(t, e), t.data.series = d, p && (t.data.labels = f), t.update();
        }
      });
    };
  }, e.plugins.legend;
});
/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/canvas-confetti@1.4.0/dist/confetti.browser.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */

!function (t, e) {
  !function t(e, n, a, i) {
    var o = !!(e.Worker && e.Blob && e.Promise && e.OffscreenCanvas && e.OffscreenCanvasRenderingContext2D && e.HTMLCanvasElement && e.HTMLCanvasElement.prototype.transferControlToOffscreen && e.URL && e.URL.createObjectURL);

    function r() {}

    function l(t) {
      var a = n.exports.Promise,
          i = void 0 !== a ? a : e.Promise;
      return "function" == typeof i ? new i(t) : (t(r, r), null);
    }

    var c,
        s,
        u,
        d,
        f,
        h,
        g,
        m,
        b = (u = Math.floor(1e3 / 60), d = {}, f = 0, "function" == typeof requestAnimationFrame && "function" == typeof cancelAnimationFrame ? (c = function c(t) {
      var e = Math.random();
      return d[e] = requestAnimationFrame(function n(a) {
        f === a || f + u - 1 < a ? (f = a, delete d[e], t()) : d[e] = requestAnimationFrame(n);
      }), e;
    }, s = function s(t) {
      d[t] && cancelAnimationFrame(d[t]);
    }) : (c = function c(t) {
      return setTimeout(t, u);
    }, s = function s(t) {
      return clearTimeout(t);
    }), {
      frame: c,
      cancel: s
    }),
        v = (m = {}, function () {
      if (h) return h;

      if (!a && o) {
        var e = ["var CONFETTI, SIZE = {}, module = {};", "(" + t.toString() + ")(this, module, true, SIZE);", "onmessage = function(msg) {", "  if (msg.data.options) {", "    CONFETTI(msg.data.options).then(function () {", "      if (msg.data.callback) {", "        postMessage({ callback: msg.data.callback });", "      }", "    });", "  } else if (msg.data.reset) {", "    CONFETTI.reset();", "  } else if (msg.data.resize) {", "    SIZE.width = msg.data.resize.width;", "    SIZE.height = msg.data.resize.height;", "  } else if (msg.data.canvas) {", "    SIZE.width = msg.data.canvas.width;", "    SIZE.height = msg.data.canvas.height;", "    CONFETTI = module.exports.create(msg.data.canvas);", "  }", "}"].join("\n");

        try {
          h = new Worker(URL.createObjectURL(new Blob([e])));
        } catch (t) {
          return void 0 !== (typeof console === "undefined" ? "undefined" : _typeof2(console)) && "function" == typeof console.warn && console.warn("🎊 Could not load worker", t), null;
        }

        !function (t) {
          function e(e, n) {
            t.postMessage({
              options: e || {},
              callback: n
            });
          }

          t.init = function (e) {
            var n = e.transferControlToOffscreen();
            t.postMessage({
              canvas: n
            }, [n]);
          }, t.fire = function (n, a, i) {
            if (g) return e(n, null), g;
            var o = Math.random().toString(36).slice(2);
            return g = l(function (a) {
              function r(e) {
                e.data.callback === o && (delete m[o], t.removeEventListener("message", r), g = null, i(), a());
              }

              t.addEventListener("message", r), e(n, o), m[o] = r.bind(null, {
                data: {
                  callback: o
                }
              });
            });
          }, t.reset = function () {
            for (var e in t.postMessage({
              reset: !0
            }), m) {
              m[e](), delete m[e];
            }
          };
        }(h);
      }

      return h;
    }),
        y = {
      particleCount: 50,
      angle: 90,
      spread: 45,
      startVelocity: 45,
      decay: .9,
      gravity: 1,
      drift: 0,
      ticks: 200,
      x: .5,
      y: .5,
      shapes: ["square", "circle"],
      zIndex: 100,
      colors: ["#26ccff", "#a25afd", "#ff5e7e", "#88ff5a", "#fcff42", "#ffa62d", "#ff36ff"],
      disableForReducedMotion: !1,
      scalar: 1
    };

    function p(t, e, n) {
      return function (t, e) {
        return e ? e(t) : t;
      }(t && null != t[e] ? t[e] : y[e], n);
    }

    function M(t) {
      return t < 0 ? 0 : Math.floor(t);
    }

    function w(t) {
      return parseInt(t, 16);
    }

    function x(t) {
      return t.map(C);
    }

    function C(t) {
      var e = String(t).replace(/[^0-9a-f]/gi, "");
      return e.length < 6 && (e = e[0] + e[0] + e[1] + e[1] + e[2] + e[2]), {
        r: w(e.substring(0, 2)),
        g: w(e.substring(2, 4)),
        b: w(e.substring(4, 6))
      };
    }

    function k(t) {
      t.width = document.documentElement.clientWidth, t.height = document.documentElement.clientHeight;
    }

    function I(t) {
      var e = t.getBoundingClientRect();
      t.width = e.width, t.height = e.height;
    }

    function T(t, e, n, o, r) {
      var c,
          s,
          u = e.slice(),
          d = t.getContext("2d"),
          f = l(function (e) {
        function l() {
          c = s = null, d.clearRect(0, 0, o.width, o.height), r(), e();
        }

        c = b.frame(function e() {
          !a || o.width === i.width && o.height === i.height || (o.width = t.width = i.width, o.height = t.height = i.height), o.width || o.height || (n(t), o.width = t.width, o.height = t.height), d.clearRect(0, 0, o.width, o.height), (u = u.filter(function (t) {
            return function (t, e) {
              e.x += Math.cos(e.angle2D) * e.velocity + e.drift, e.y += Math.sin(e.angle2D) * e.velocity + e.gravity, e.wobble += .1, e.velocity *= e.decay, e.tiltAngle += .1, e.tiltSin = Math.sin(e.tiltAngle), e.tiltCos = Math.cos(e.tiltAngle), e.random = Math.random() + 5, e.wobbleX = e.x + 10 * e.scalar * Math.cos(e.wobble), e.wobbleY = e.y + 10 * e.scalar * Math.sin(e.wobble);
              var n = e.tick++ / e.totalTicks,
                  a = e.x + e.random * e.tiltCos,
                  i = e.y + e.random * e.tiltSin,
                  o = e.wobbleX + e.random * e.tiltCos,
                  r = e.wobbleY + e.random * e.tiltSin;
              return t.fillStyle = "rgba(" + e.color.r + ", " + e.color.g + ", " + e.color.b + ", " + (1 - n) + ")", t.beginPath(), "circle" === e.shape ? t.ellipse ? t.ellipse(e.x, e.y, Math.abs(o - a) * e.ovalScalar, Math.abs(r - i) * e.ovalScalar, Math.PI / 10 * e.wobble, 0, 2 * Math.PI) : function (t, e, n, a, i, o, r, l, c) {
                t.save(), t.translate(e, n), t.rotate(o), t.scale(a, i), t.arc(0, 0, 1, r, l, c), t.restore();
              }(t, e.x, e.y, Math.abs(o - a) * e.ovalScalar, Math.abs(r - i) * e.ovalScalar, Math.PI / 10 * e.wobble, 0, 2 * Math.PI) : (t.moveTo(Math.floor(e.x), Math.floor(e.y)), t.lineTo(Math.floor(e.wobbleX), Math.floor(i)), t.lineTo(Math.floor(o), Math.floor(r)), t.lineTo(Math.floor(a), Math.floor(e.wobbleY))), t.closePath(), t.fill(), e.tick < e.totalTicks;
            }(d, t);
          })).length ? c = b.frame(e) : l();
        }), s = l;
      });
      return {
        addFettis: function addFettis(t) {
          return u = u.concat(t), f;
        },
        canvas: t,
        promise: f,
        reset: function reset() {
          c && b.cancel(c), s && s();
        }
      };
    }

    function E(t, n) {
      var a,
          i = !t,
          r = !!p(n || {}, "resize"),
          c = p(n, "disableForReducedMotion", Boolean),
          s = o && !!p(n || {}, "useWorker") ? v() : null,
          u = i ? k : I,
          d = !(!t || !s) && !!t.__confetti_initialized,
          f = "function" == typeof matchMedia && matchMedia("(prefers-reduced-motion)").matches;

      function h(e, n, i) {
        for (var o, r, l, c, s, d = p(e, "particleCount", M), f = p(e, "angle", Number), h = p(e, "spread", Number), g = p(e, "startVelocity", Number), m = p(e, "decay", Number), b = p(e, "gravity", Number), v = p(e, "drift", Number), y = p(e, "colors", x), w = p(e, "ticks", Number), C = p(e, "shapes"), k = p(e, "scalar"), I = function (t) {
          var e = p(t, "origin", Object);
          return e.x = p(e, "x", Number), e.y = p(e, "y", Number), e;
        }(e), E = d, S = [], F = t.width * I.x, N = t.height * I.y; E--;) {
          S.push((o = {
            x: F,
            y: N,
            angle: f,
            spread: h,
            startVelocity: g,
            color: y[E % y.length],
            shape: C[(c = 0, s = C.length, Math.floor(Math.random() * (s - c)) + c)],
            ticks: w,
            decay: m,
            gravity: b,
            drift: v,
            scalar: k
          }, r = void 0, l = void 0, r = o.angle * (Math.PI / 180), l = o.spread * (Math.PI / 180), {
            x: o.x,
            y: o.y,
            wobble: 10 * Math.random(),
            velocity: .5 * o.startVelocity + Math.random() * o.startVelocity,
            angle2D: -r + (.5 * l - Math.random() * l),
            tiltAngle: Math.random() * Math.PI,
            color: o.color,
            shape: o.shape,
            tick: 0,
            totalTicks: o.ticks,
            decay: o.decay,
            drift: o.drift,
            random: Math.random() + 5,
            tiltSin: 0,
            tiltCos: 0,
            wobbleX: 0,
            wobbleY: 0,
            gravity: 3 * o.gravity,
            ovalScalar: .6,
            scalar: o.scalar
          }));
        }

        return a ? a.addFettis(S) : (a = T(t, S, u, n, i)).promise;
      }

      function g(n) {
        var o = c || p(n, "disableForReducedMotion", Boolean),
            g = p(n, "zIndex", Number);
        if (o && f) return l(function (t) {
          t();
        });
        i && a ? t = a.canvas : i && !t && (t = function (t) {
          var e = document.createElement("canvas");
          return e.style.position = "fixed", e.style.top = "0px", e.style.left = "0px", e.style.pointerEvents = "none", e.style.zIndex = t, e;
        }(g), document.body.appendChild(t)), r && !d && u(t);
        var m = {
          width: t.width,
          height: t.height
        };

        function b() {
          if (s) {
            var e = {
              getBoundingClientRect: function getBoundingClientRect() {
                if (!i) return t.getBoundingClientRect();
              }
            };
            return u(e), void s.postMessage({
              resize: {
                width: e.width,
                height: e.height
              }
            });
          }

          m.width = m.height = null;
        }

        function v() {
          a = null, r && e.removeEventListener("resize", b), i && t && (document.body.removeChild(t), t = null, d = !1);
        }

        return s && !d && s.init(t), d = !0, s && (t.__confetti_initialized = !0), r && e.addEventListener("resize", b, !1), s ? s.fire(n, m, v) : h(n, m, v);
      }

      return g.reset = function () {
        s && s.reset(), a && a.reset();
      }, g;
    }

    n.exports = E(null, {
      useWorker: !0,
      resize: !0
    }), n.exports.create = E;
  }(function () {
    return void 0 !== t ? t : "undefined" != typeof self ? self : this || {};
  }(), e, !1), t.confetti = e.exports;
}(window, {});
$(document).ready(function () {
  var levelInfo = {
    1: {
      name: "Aventureiro",
      description: "Pronto para começar?",
      icon: "/build/global/adminremark/assets/images/nivel-1.png",
      storytelling: "Nossa jornada está apenas começando. Você já pode começar a olhar o céu noturno e se imaginar navegando na imensidão do desconhecido, é hora de mirar as estrelas e se preparar para a maior aventura de sua vida empreendedora.",
      billedStart: "0",
      messageStart: "0K",
      billedStop: "100000",
      messageStop: "100K"
    },
    2: {
      name: "Viajante Espacial",
      description: "Nível 2",
      icon: "/build/global/adminremark/assets/images/nivel-2.png",
      storytelling: "Nosso foguete está saindo da Terra, este momento de fortes emoções foi experimentado por poucos! Quem diria, de tanto olhar para o céu estrelado, hoje você está navegando por ele, rumo à nossa primeira parada: a lua!",
      billedStart: "100000",
      messageStart: "100K",
      billedStop: "1000000",
      messageStop: "1M"
    },
    3: {
      name: "Conquistador",
      description: "Nível 3",
      icon: "/build/global/adminremark/assets/images/nivel-3.png",
      storytelling: "Nível 3? Você está avançando bem, daqui da lua você já consegue enxergar que a Terra é pequena demais para você. Aproveite a vista, faça pequenos reparos porque ainda temos bastante aventura pela frente e a próxima parada é Marte!",
      billedStart: "1000000",
      messageStart: "1M",
      billedStop: "10000000",
      messageStop: "10M"
    },
    4: {
      name: "Colonizador",
      description: "Nível 4",
      icon: "/build/global/adminremark/assets/images/nivel-4.png",
      storytelling: "Elon Musk ficaria orgulhoso, pisar em Marte é para poucos, seja na vida real ou até mesmo no nosso game. 10 milhões de faturamento te coloca na mais alta patente, com os mais destemidos empreendedores da galáxia!",
      billedStart: "10000000",
      messageStart: "10M",
      billedStop: "50000000",
      messageStop: "50M"
    },
    5: {
      name: "Capitão Galáctico",
      description: "Nível 5",
      icon: "/build/global/adminremark/assets/images/nivel-5.png",
      storytelling: "Existe vida fora da Terra e agora você é capaz de provar. Apesar de estarmos bem longe, nossa viagem deve continuar, mas se fosse para ficar... os nativos ficariam orgulhosos com sua história, de onde você veio e para onde está indo!",
      billedStart: "50000000",
      messageStart: "50M",
      billedStop: "100000000",
      messageStop: "100M"
    },
    6: {
      name: "Sirius Major",
      description: "Nível 6",
      icon: "/build/global/adminremark/assets/images/nivel-6.png",
      storytelling: "Parabéns! Você atingiu os confins do universo e a expressiva marca de 100M de faturamento, um verdadeiro explorador do espaço e dos negócios. Você acaba de chegar na Canis Major e conhecer de perto a Sirius, a estrela mais brilhante!",
      billedStart: "100000000",
      messageStart: "100M",
      billedStop: "500000000",
      messageStop: "500M"
    }
  };

  function nextPerformance(data) {
    loadingOnAccountsHealthRemove('.sirius-performance > .card');
    $(".sirius-performance .card-indicators > .active").on("click", function () {
      $('.sirius-performance > .card').html('');
      var card = $(this).data('slide-to');

      switch (card) {
        case 1:
          updatePerformanceCard1(data);
          break;

        case 2:
          updatePerformanceCard2(data);
          break;

        case 3:
          updatePerformanceCard3(data);
          break;

        default:
      }
    });
  }

  window.updatePerformance = function () {
    loadingOnAccountsHealth('.sirius-performance > .card', '150px');
    $.ajax({
      method: "GET",
      url: "/api/dashboard/get-performance",
      dataType: "json",
      headers: {
        Authorization: $('meta[name="access-token"]').attr("content"),
        Accept: "application/json"
      },
      data: {
        company: $('.company-navbar').val()
      },
      error: function error(response) {
        loadingOnAccountsHealthRemove('.sirius-performance > .card');
        errorAjaxResponse(response);
      },
      success: function success(data) {
        //loadingOnAccountsHealthRemove('.sirius-performance > .card');
        updatePerformanceCard1(data);

        if (data.money_cashback !== "0,00") {
          updateCashback(data.money_cashback);
        } else {
          $(".sirius-cashback > .card").addClass("d-none");
        }
      }
    });
  };

  function updatePerformanceCard1(data) {
    var currentLevel = levelInfo[data.level];
    var item = "\n                <div class=\"card-header mt-10 pb-0 d-flex justify-content-between align-items-center bg-white\">\n                    <div class=\"font-size-14 gray-600 mr-auto\">\n                        <span class=\"ml-0\">Seu desempenho</span>\n                    </div>\n                    <ol class=\"card-indicators mb-0 d-flex justify-content-end align-items-center align-self-center\">\n                        <li class=\"active\" data-slide-to=\"1\"></li>\n                        <li class=\"\" data-slide-to=\"2\"></li>\n                        <li class=\"\" data-slide-to=\"3\"></li>\n                        <i class=\"o-angle-down-1 control-prev active\" data-slide-to=\"3\"></i>\n                        <i class=\"o-angle-down-1 control-next active\" data-slide-to=\"2\"></i>\n                    </ol>\n                </div>\n                <div class=\"card-body pb-5 pt-0 mt-15 d-flex flex-column justify-content-start \">\n\n                    <div class=\"level-icon-container\">\n                      <img src=\"".concat(currentLevel.icon, "\" alt=\"").concat(currentLevel.name, "\">\n                      <div>\n                        <strong>").concat(currentLevel.name, "</strong>\n                        <p>\n                          ").concat(currentLevel.description, "\n                        </p>\n                      </div>\n                    </div>\n                    <div id=\"achievements\">\n                    </div>\n\n                    <div id=\"tasks\">\n                        <div class=\"d-flex flex-column justify-content-start align-items-start\">\n                        </div>\n                    </div>\n                    <div id=\"progress\" class=\"mt-15 d-flex flex-column flex-nowrap justify-content-start align-items-start align-self-stretch\">\n                        <div class=\"d-flex flex-row flex-nowrap justify-content-between align-items-start align-self-stretch\">\n                            <span id=\"progress-message-1\"></span>\n                            <span id=\"progress-message-2\"></span>\n                        </div>\n                        <div id=\"progress-bar\"\n                             class=\"mt-10 d-flex flex-row flex-nowrap justify-content-between align-items-start align-self-stretch\"\n                             data-toggle=\"tooltip\"\n                        >\n                                <div></div>\n                                <span></span>\n                        </div>\n                    </div>\n                </div>\n\n        ");
    $(".sirius-performance > .card").append(item);
    UpdateAchievements(data.achievements);
    updateTasks(data.level, data.tasks);
    updateProgressBar(data.billed, currentLevel);
    nextPerformance(data);
    $(function () {
      $('[data-toggle="tooltip"]').tooltip();
    });
  }

  function UpdateAchievements(achievements) {
    if (!isEmpty(achievements)) {
      $.each(achievements, function (index, value) {
        var item = "\n                                <div class=\"col-3 col-sm-2 col-md-2 col-lg-2 col-xl-2 pr-0 pl-0 ".concat(value.active ? "" : "not-active", "\"\n                                    data-toggle=\"tooltip\" title=\"").concat(value.name, "\" >\n                                    <img src=\"").concat(value.icon, "\">\n                                </div>\n                            ");
        $("#achievements").append(item);
      });
    }
  }

  function updateTasks(level, tasks) {
    var elementTask = $("#tasks");
    elementTask.first("div").html("");

    if (!isEmpty(tasks)) {
      $.each(tasks, function (index, value) {
        var item = "<div class=\"d-flex justify-content-start align-items-center align-self-start task\">\n                                 <span class=\"task-icon ".concat(value.status === 1 ? "o-checkmark-1 task-icon-checked" : "", " d-flex justify-content-around align-items-center\"></span>\n                                 <p class=\"m-0 ").concat(value.status === 1 ? "task-description-checked" : "", " \">").concat(value.name, "</p>\n                            </div>");
        elementTask.first("div").append(item);
      });
      elementTask.css({
        "margin-top": "20px"
      }).show();

      if (tasks.length > 3) {
        elementTask.css({
          "margin-top": "0"
        }).asScrollable();
        $("#achievements").css({
          "margin-bottom": "20px"
        });
      }
    } else {
      elementTask.hide();
    }
  }

  function updateProgressBar(billed, currentLevel) {
    $("#progress-message-1").text("".concat(currentLevel.messageStart));
    $("#progress-bar").attr("data-original-title", "Total faturado ".concat((billed / 100).toLocaleString("pt-br", {
      style: "currency",
      currency: "BRL"
    })));
    $("#progress-message-2").text("".concat(currentLevel.messageStop));
    var percentage = billed / currentLevel.billedStop;
    percentage = percentage > 100 ? 99 : percentage;
    percentage = percentage > 10 ? percentage : parseFloat(percentage).toFixed(1);
    $("#progress-bar > div").css({
      width: "".concat(percentage > 1 ? percentage : 1, "%")
    });

    if (percentage > 13) {
      $("#progress-bar > span").text("".concat(Math.trunc(percentage), "%"));
      $("#progress-bar > span").css({
        left: "".concat(parseFloat(percentage) - 13, "%"),
        color: "#FFFFFF"
      });
    } else {
      $("#progress-bar > span").text("".concat(percentage > 1 ? Math.trunc(percentage) : parseFloat(percentage).toFixed(1), "%"));
      $("#progress-bar > span").css({
        left: "".concat(parseFloat(percentage) + 3, "%"),
        color: "#2E85EC"
      });
    }
  }

  function updateCashback(money) {
    $(".sirius-cashback > .card").append("\n        <div class=\"card-header d-flex justify-content-between align-items-center bg-white mt-10 pb-0 \">\n            <div class=\"font-size-14 gray-600 mr-auto\">\n                <span class=\"ml-0\">Cashback total recebido</span>\n            </div>\n            <ol\n                class=\"card-indicators mb-0 d-flex justify-content-end align-items-center align-self-center\">\n            </ol>\n        </div>\n        <div\n                class=\"card-body pt-0 mt-15 mb-5 d-flex flex-column justify-content-start align-items-start \">\n            <div\n                    class=\"pt-5 pb-5 flex-column flex-nowrap justify-content-start align-items-start align-self-stretch\">\n                <div id=\"cashback-container\"\n                        class=\"d-flex flex-row justify-content-start align-items-center align-self-start\">\n                    <span class=\"cashback-container-icon\">R$</span>\n                    <span id=\"cashback-container-money\">".concat(money, "</span>\n                    <span class=\"o-reload-1 cashback-container-icon\"></span>\n                </div>\n            </div>\n        </div>"));
    $(".sirius-cashback > .card").removeClass("d-none");
  }

  function updatePerformanceCard2(data) {
    var currentLevel = levelInfo[data.level];
    var item = "\n                <div class=\"card-header mt-10 pb-0 d-flex justify-content-between align-items-center bg-white\">\n                    <div class=\"mr-auto\">\n                        <span class=\"ml-0 title-performance\">Seu desempenho</span>\n                    </div>\n                    <ol class=\"card-indicators mb-0 d-flex justify-content-end align-items-center align-self-center\">\n                        <li class=\"\" data-slide-to=\"1\"></li>\n                        <li class=\"active\" data-slide-to=\"2\"></li>\n                        <li class=\"\" data-slide-to=\"3\"></li>\n                        <i class=\"o-angle-down-1 control-prev active\" data-slide-to=\"1\"></i>\n                        <i class=\"o-angle-down-1 control-next active\" data-slide-to=\"3\"></i>\n                    </ol>\n                </div>\n                <div class=\"card-body pb-5 pt-0 mt-15 d-flex flex-column justify-content-start\">\n                    <div id=\"card-level-description\" >\n                        <div class=\"p-15 d-flex flex-column flex-nowrap justify-content-start align-items-stretch align-self-stretch \">\n                            <div class=\"d-flex flex-row flex-wrap justify-content-between align-items-center\">\n                                <div class=\"col-12 col-sm-auto col-md-auto col-lg-auto col-xl-auto p-0 d-flex flex-row flex-nowrap justify-content-start align-items-center\">\n                                    <span id=\"level-full\" class=\"level mr-5\">".concat(currentLevel.name, "</span>\n                                    <span id=\"level-current\">ATUAL</span>\n                                </div>\n\n                                <div id=\"billed-message-container\" class=\"col-12 col-sm-auto col-md-auto col-lg-auto col-xl-auto p-0\">\n                                    <span id=\"billed-message\" class=\"ml-0\">R$").concat(currentLevel.messageStart, " - R$").concat(currentLevel.messageStop, "</span>\n                                </div>\n                            </div>\n                            <p id=\"level-message\" class=\"level-description mt-10\">").concat(currentLevel.storytelling, "</p>\n                        </div>\n                    </div>\n\n                    <div id=\"levels\">\n                    </div>\n                    <div class=\"benefits mt-10 d-flex flex-column flex-nowrap justify-content-start \">\n                        <span class=\"mb-10 title-performance\">Benef\xEDcios atuais</span>\n                        <div id=\"benefits-active-container\" class=\"benefits-empty\">\n                            <img src=\"/build/global/adminremark/assets/images/empty-benefits.png\" alt=\"N\xE3o h\xE1 benef\xEDcio\">\n                            <div>\n                                <strong class=\"benefits-name\">Voc\xEA ainda n\xE3o tem nenhum benef\xEDcio ativo em sua conta.</strong>\n<!--                                <p class=\"benefits-description\">-->\n<!--                                  Suba de n\xEDvel para mudar isso :)-->\n<!--                                </p>-->\n                              </div>\n                        </div>\n                    </div>\n                    <div id=\"benefits-next-container\" class=\"benefits mt-10 d-flex flex-column flex-nowrap justify-content-start \">\n                        <span class=\"mb-10 title-performance\">Seus pr\xF3ximos benef\xEDcios</span>\n                        <div id=\"benefits-container\">\n                            <div class=\"d-flex flex-column flex-nowrap justify-content-start \">\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n        ");
    $(".sirius-performance > .card").append(item);
    $.each(levelInfo, function (index, value) {
      if (data.level == index) {
        $("#level-current").show();
      }

      var item = " <div id=\"level-item-".concat(index, "\" class=\"col-2  level-item ").concat(data.level == index ? "active" : "", "\" data-level=\"").concat(index, "\" data-level-current=\"").concat(data.level, "\">\n                           <img src=\"").concat(value.icon, "\">\n                       </div>\n\n                    ");
      $("#levels").append(item);
    });
    $(".level-item").click(function () {
      var level = $(this).data("level");
      var currentLevel = levelInfo[level];
      $(this).data("level-current") === level ? $("#level-current").show() : $("#level-current").hide();
      $(".level-item").removeClass("active");
      $(this).addClass("active");
      $("#level-full").text("").text("".concat(currentLevel.name));
      $("#level-message").text("").text(currentLevel.storytelling);
      $("#billed-message").text("R$".concat(currentLevel.messageStart, " - R$").concat(currentLevel.messageStop));
    });
    updateBenefits(data.level, data.benefits);
    nextPerformance(data);
  }

  function updateBenefits(level, benefits) {
    var elementBenefitsActiveContainer = $("#benefits-active-container");
    $("#benefits-container").html("");

    if (!isEmpty(benefits.active)) {
      elementBenefitsActiveContainer.html("").removeClass("benefits-empty").append('<div class="d-flex flex-column flex-nowrap justify-content-start"></div>');
      $.each(benefits.active, function (index, value) {
        var item = "<div class=\" d-flex justify-content-start align-items-center align-self-start benefit\">\n                                 <span class=\"benefits-button ".concat(value.enabled ? "benefits-button-checked" : "benefits-button-blocked", " d-flex justify-content-around align-items-center\">").concat(value.enabled ? "Ativo" : "Inativo", "</span>\n                                 <p class=\"m-0\">").concat(value.name, "</p>\n                            </div>");
        elementBenefitsActiveContainer.append(item);
      });

      if (benefits.active.length > 2) {
        $("#benefits-active-container").asScrollable();
      }
    }

    if (!isEmpty(benefits.next)) {
      $("#benefits-next-container").addClass("d-flex");
      $.each(benefits.next, function (index, value) {
        var item = "<div class=\"d-flex justify-content-start align-items-center align-self-start\">\n                                 <span class=\"benefits-button d-flex justify-content-around align-items-center\">N\xCDVEL ".concat(value.level, "</span>\n                                 <p class=\"m-0\">").concat(value.name, "</p>\n                            </div>");
        $("#benefits-container").append(item);
      });

      if (benefits.next.length > 2) {
        $("#benefits-container").asScrollable();
      }
    } else {
      $("#benefits-next-container").removeClass("d-flex").hide();
    }
  }

  function updatePerformanceCard3(data) {
    var currentLevel = levelInfo[data.level];
    var item = "\n                <div class=\"card-header pb-5 mt-10 d-flex justify-content-between align-items-center bg-white\">\n                    <div class=\"mr-auto\">\n                        <span class=\"ml-0 title-performance\">Suas conquistas</span>\n                    </div>\n                    <ol class=\"card-indicators mb-0 d-flex justify-content-end align-items-center align-self-center\">\n                        <li class=\"\" data-slide-to=\"1\"></li>\n                        <li class=\"\" data-slide-to=\"2\"></li>\n                        <li class=\"active\" data-slide-to=\"3\"></li>\n                        <i class=\"o-angle-down-1 control-prev active\" data-slide-to=\"2\"></i>\n                        <i class=\"o-angle-down-1 control-next active\" data-slide-to=\"1\"></i>\n                    </ol>\n                </div>\n                <div class=\"list-linear-gradient-top\"></div>\n                <div id=\"card-achievements\" class=\"card-body pb-0 pt-0 \">\n                    <div class=\"d-flex flex-column justify-content-start align-items-start\">\n                    </div>\n                </div>\n                <div class=\"list-linear-gradient-bottom\"></div>\n        ";
    $(".sirius-performance > .card").append(item);
    updateAchievementsCard(data.achievements);
    nextPerformance(data);
  }

  function updateAchievementsCard(achievements) {
    if (!isEmpty(achievements)) {
      var element = $("#card-achievements > div");
      var item = "";

      var isActiveAchievements = function isActiveAchievements(achievements) {
        return achievements.active;
      };

      var achievementsActive = achievements.filter(isActiveAchievements);
      item += achievementsList(achievementsActive);

      if (achievementsActive.length) {
        item += "<div class=\"title-performance mt-20 mb-10 d-flex justify-content-start align-items-start align-self-start\">Voc\xEA ainda n\xE3o conquistou:</div>";
      }

      var isNotActiveAchievements = function isNotActiveAchievements(achievements) {
        return !achievements.active;
      };

      var achievementsNotActive = achievements.filter(isNotActiveAchievements);
      item += achievementsList(achievementsNotActive);
      element.append(item);
      $("#card-achievements").asScrollable();
    }
  }

  function achievementsList(achievements) {
    var achievementsLength = achievements.length;
    var item = "";
    $.each(achievements, function (index, value) {
      item += " <div class=\"achievements-list \">\n                            <div class=\"achievements-list-icon  pr-0 pl-0 ".concat(value.active ? "" : "not-active", " \">\n                                <img src=\"").concat(value.icon, "\" alt=\"").concat(value.name, "\">\n                            </div>\n                            <div class=\"ml-10 p-0 d-flex flex-column justify-content-center align-self-center\">\n                                <div class=\"achievements-list-name level mb-1\">").concat(value.name, "</div>\n                                <div class=\"achievements-list-description level-description\">").concat(value.description, "</div>\n                            </div>\n                        </div>");

      if (index < achievementsLength - 1) {
        item += "<div class=\"hr-horizontal mt-10 mb-10 d-flex justify-content-center align-items-center align-self-center\"></div>";
      }
    });
    return item;
  }
});
$('.company-navbar').change(function () {
  if (verifyIfCompanyIsDefault($(this).val())) return;
  $('.sirius-performance > .card').html('');
  $('.sirius-account > .card').html('');
  $('.sirius-cashback > .card').html('');
  $('#cashback-container #cashback-container-money').text("");
  loadOnAnyEllipsis('.text-money, .update-text, .text-circle', false, {
    styles: {
      container: {
        minHeight: '30px',
        width: '30px',
        height: 'auto',
        margin: 'auto'
      },
      loader: {
        width: '30px',
        height: '30px',
        borderWidth: '6px'
      }
    }
  });
  loadingOnAccountsHealth('.sirius-performance > .card', '150px');
  loadingOnAccountsHealth('.sirius-account > .card');
  $(".sirius-cashback > .card").addClass("d-none");
  loadingOnChart('#chart-loading');
  $('#scoreLineToMonth').html('');
  updateCompanyDefault().done(function (data1) {
    getCompaniesAndProjects().done(function (data2) {
      if (!isEmpty(data2.company_default_projects)) {
        if ($("#project-empty").css('display') != 'none') {
          $("#project-empty").hide();
          $("#project-not-empty").show();
          window.getDataDashboard();
        } else {
          window.updateValues();
          window.updateChart();
          window.updatePerformance();
          window.updateAccountHealth('80px');
        }
      } else {
        $("#project-empty").show();
        $("#project-not-empty").hide();
      }
    });
  });
});
$(document).ready(function () {
  var userAccepted = true;

  window.updateChart = function () {
    $('#scoreLineToMonth').html('');
    loadingOnChart('#chart-loading');
    $.ajax({
      method: "GET",
      url: "/api/dashboard/get-chart-data",
      dataType: "json",
      data: {
        company: $('.company-navbar').val()
      },
      headers: {
        Authorization: $('meta[name="access-token"]').attr("content"),
        Accept: "application/json"
      },
      error: function error(response) {
        loadingOnChartRemove("#chart-loading");
        loadingOnScreenRemove();
        errorAjaxResponse(response);
      },
      success: function success(response) {
        loadingOnChartRemove("#chart-loading");
        setTimeout(function () {
          getChart(response);
        }, 2000);
      }
    });
  };

  function getChart(chartData) {
    var haveData = 0;
    chartData.value_data.forEach(function (elem, index) {
      if (elem) haveData += parseInt(elem);
    });

    if (haveData > 0) {
      var scoreChart = function scoreChart(id, labelList, series1List) {
        var scoreChart = new Chartist.Line("#" + id, {
          labels: labelList,
          series: [series1List]
        }, {
          lineSmooth: Chartist.Interpolation.simple({
            divisor: 2
          }),
          showPoint: false,
          showLine: false,
          showArea: true,
          fullWidth: true,
          chartPadding: {
            right: 50,
            left: 20,
            top: 30,
            button: 20
          },
          axisX: {
            showGrid: false,
            labelInterpolationFnc: function labelInterpolationFnc(value) {
              return value;
            }
          },
          axisY: {
            labelInterpolationFnc: function labelInterpolationFnc(value) {
              var str = parseInt(value);

              if (str > 0) {
                str = str / 1e3 + "K";
              } else {
                str = "0.00";
              }

              return str;
            },
            scaleMinSpace: 40
          },
          low: 0,
          height: 260
        });
        scoreChart.on("created", function (data) {
          var defs = data.svg.querySelector("defs") || data.svg.elem("defs"),
              filter = (data.svg.width(), data.svg.height(), defs.elem("filter", {
            x: 0,
            y: "-10%",
            id: "shadow" + id
          }, "", !0));
          return filter.elem("feGaussianBlur", {
            "in": "SourceAlpha",
            stdDeviation: "800",
            result: "offsetBlur"
          }), filter.elem("feOffset", {
            dx: "0",
            dy: "800"
          }), filter.elem("feBlend", {
            "in": "SourceGraphic",
            mode: "multiply"
          }), defs;
        }).on("draw", function (data) {
          "line" === data.type ? data.element.attr({
            filter: "url(#shadow" + id + ")"
          }) : "point" === data.type && new Chartist.Svg(data.element._node.parentNode).elem("line", {
            x1: data.x,
            y1: data.y,
            x2: data.x + 0.01,
            y2: data.y,
            "class": "ct-point-content"
          }), "line" !== data.type && "area" != data.type || data.element.animate({
            d: {
              begin: 1e3 * data.index,
              dur: 1e3,
              from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),
              to: data.path.clone().stringify(),
              easing: Chartist.Svg.Easing.easeOutQuint
            }
          });
        });
        $("#not-empty-sale").show();
      },
          labelList = chartData.label_list,
          totalSalesData = {
        value: chartData.value_data
      };

      createChart = function createChart() {
        scoreChart("scoreLineToMonth", labelList, totalSalesData);
      };

      $("#empty-sale").fadeOut();
      createChart();
    } else {
      $("#empty-sale").fadeIn();
      $("#scoreLineToMonth").html("");
    }
  }

  window.getDataDashboard = function () {
    $.ajax({
      method: "GET",
      url: "/api/dashboard".concat(window.location.search),
      dataType: "json",
      headers: {
        Authorization: $('meta[name="access-token"]').attr("content"),
        Accept: "appliation/json"
      },
      error: function error(response) {
        loadingOnScreenRemove();
        errorAjaxResponse(response);
      },
      success: function success(data) {
        if (!isEmpty(data.companies)) {
          window.updateValues();
          window.updateChart();
          window.updatePerformance();
          window.updateAccountHealth();
          setTimeout(verifyPixOnboarding, 1600);
        } else {
          $(".content-error").show();
          $("#company-select, .page-content").hide();
          loadingOnScreenRemove();
        }
      }
    });
  };

  window.updateValues = function () {
    loadOnAnyEllipsis('.text-money, .update-text, .text-circle', false, {
      styles: {
        container: {
          minHeight: "30px",
          width: "30px",
          height: "auto",
          margin: "auto"
        },
        loader: {
          width: "30px",
          height: "30px",
          borderWidth: "6px"
        }
      }
    });
    loadingOnChart("#chart-loading");
    $(".circle strong").addClass("loaded");
    $.ajax({
      method: "POST",
      url: "/api/dashboard/getvalues",
      dataType: "json",
      headers: {
        Authorization: $('meta[name="access-token"]').attr("content"),
        Accept: "application/json"
      },
      data: {
        company: $('.company-navbar').val()
      },
      error: function error(response) {
        loadOnAnyEllipsis(".text-money, .update-text, .text-circle", true);
        loadingOnScreenRemove();
        errorAjaxResponse(response);
      },
      success: function success(data) {
        $(".moeda").html(data.currency);
        $("#pending_money").html(data.pending_balance);
        $("#available_money").html(data.available_balance);
        $("#total_money").html(data.total_balance);
        $("#today_money").html(data.today_balance);
        $("#total_sales_approved").text(data.total_sales_approved);
        $("#total_sales_chargeback").text(data.total_sales_chargeback);
        var $titleAvailableMoney = onlyNumbers(data.available_balance) > 0 ? "Disponível" : "Saldo Atual";
        $("#title_available_money").html($titleAvailableMoney);
        var title = "Valor incluindo o saldo retido de R$ " + data.blocked_balance_total;
        $("#info-total-balance").attr("title", title).tooltip({
          placement: "bottom"
        });
        loadOnAnyEllipsis('.text-money, .update-text, .text-circle', true);
      }
    });
  };

  function getProjects() {
    loadingOnScreen();
    $.ajax({
      method: "GET",
      url: '/api/projects?select=true&company=' + $('.company-navbar').val(),
      dataType: "json",
      headers: {
        Authorization: $('meta[name="access-token"]').attr("content"),
        Accept: "application/json"
      },
      error: function error(response) {
        loadingOnScreenRemove();
        errorAjaxResponse(response);
      },
      success: function success(response) {
        if (!isEmpty(response.data)) {
          $("#project-empty").hide();
          $("#project-not-empty").show();
          window.getDataDashboard();
        } else {
          $("#project-empty").show();
          $("#project-not-empty").hide();
        }

        loadingOnScreenRemove();
      }
    });
  }

  function showConfetti() {
    var startY = 605 / window.innerHeight;
    var count = 200;
    var defaults = {
      origin: {
        y: startY
      },
      startVelocity: 60,
      zIndex: 1700
    };

    var fire = function fire(particleRatio, opts) {
      confetti(_objectSpread(_objectSpread(_objectSpread({}, defaults), opts), {}, {
        particleCount: Math.floor(count * particleRatio)
      }));
    };

    fire(0.25, {
      spread: 26
    });
    fire(0.2, {
      spread: 60
    });
    fire(0.35, {
      spread: 100,
      decay: 0.91,
      scalar: 0.8,
      startVelocity: 20
    });
    fire(0.1, {
      spread: 120,
      decay: 0.92,
      scalar: 1.2,
      startVelocity: 40
    });
    fire(0.1, {
      spread: 120,
      startVelocity: 40
    });
  }

  function verifyAchievements() {
    $.ajax({
      method: "GET",
      url: "/api/dashboard/verify-achievements",
      dataType: "json",
      headers: {
        Authorization: $('meta[name="access-token"]').attr("content"),
        Accept: "application/json"
      },
      error: function error(response) {
        errorAjaxResponse(response);
      },
      success: function success(response) {
        if (!isEmpty(response.data)) {
          response.data.forEach(function (data, index) {
            var modal_is_level_type = "";
            var modal_is_achievement_type = "";

            if (data.type === 0) {
              modal_is_achievement_type = "\n                                    <div id=\"title-achievement\">Voc\xEA alcan\xE7ou uma nova <strong>conquista!</strong></div>\n                                    <div id=\"name-title\">".concat(data.name, "</div>\n                                    <div id=\"description-achievement\">").concat(data.description, "</div>\n                                    <div id=\"storytelling\">").concat(data.storytelling, "</div>\n                            ");
            }

            if (data.type === 1) {
              modal_is_level_type = "\n                                <div id=\"description\">Voc\xEA chegou ao <strong>".concat(data.description, "</strong></div>\n                                <div id=\"name\">").concat(data.name, "</div>\n                                <div id=\"storytelling\">").concat(data.storytelling, "</div>\n                            ");

              if (!isEmpty(data.benefits)) {
                modal_is_level_type += "\n                                    <div id=\"benefits\">\n                                        <div id=\"benefits-title\">Aqui est\xE1 sua recompensa:</div>\n                                        <div class=\"d-flex justify-content-center align-items-center\">\n                                            <span id=\"benefits-data\"><span class=\"material-icons\">done</span> ".concat(data.benefits, "</span>\n                                        </div>\n                                    </div>");
              }
            }

            var modal = "\n                            <div id=\"modal-achievement-data-".concat(index, "\" class=\"modal fade modal-fade-in-scale-up show\">\n                                <div id=\"achievement-details\" class=\"modal-dialog modal-simple achievement-details-style\">\n                                    <div class=\"modal-content\">\n                                        <div class=\"modal-header flex-wrap\">\n                                            <div class=\"w-p100\">\n                                                <img id=\"icon\" src=\"").concat(data.icon, "\" alt=\"Image\">\n                                            </div>\n                                        </div>\n                                        <div class=\"modal-body\">\n\n                                            ").concat(modal_is_achievement_type, "\n\n\n                                            ").concat(modal_is_level_type, "\n\n                                            <div id=\"reward-check-data-").concat(index, "\"\n                                                class=\"btn btn-primary\"\n                                                 data-dismiss=\"modal\"\n                                                 aria-label=\"close\"\n                                                 data-target=\"#modal-achievement\"\n                                                 data-achievement=\"").concat(data.achievement, "\">Ok, legal!</div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        ");
            $("#modal-achievement-container").append(modal);
            $("#modal-achievement-data-".concat(index)).on("shown.bs.modal", function () {
              // $('body').addClass('blurred');
              $("#modal-achievement-data-".concat(index)).unbind("click");
              showConfetti();
            });
            $("#modal-achievement-data-".concat(index)).on("hidden.bs.modal", function () {
              $("body").removeClass("blurred");
              setTimeout(function () {
                var totalAchievement = $("[id*=modal-achievement-data-]").length - 1;
                $("#modal-achievement-data-".concat(totalAchievement)).modal("show");
              }, 500);
            });
            $("#reward-check-data-".concat(index)).click(function () {
              var achievement = $("#reward-check-data-".concat(index)).data("achievement");
              $.ajax({
                method: "PUT",
                url: "/api/dashboard/update-achievements/" + achievement,
                dataType: "json",
                headers: {
                  Authorization: $('meta[name="access-token"]').attr("content"),
                  Accept: "application/json"
                },
                error: function error(response) {
                  errorAjaxResponse(response);
                  $("#modal-achievement-data-".concat(index)).modal("hide");
                },
                success: function success() {
                  $("#modal-achievement-data-".concat(index)).modal("hide");
                }
              });
              $("#modal-achievement-data-".concat(index)).modal("hide");
              setTimeout(function () {
                $("#modal-achievement-data-".concat(index)).remove();
              }, 500);
            });
          });
          var lastData = response.data.length;

          if (lastData > 0) {
            $("[id*=modal-achievement-data-]:last").modal("show");
          }
        }
      }
    });
  }

  function verifyOnboarding() {
    $.ajax({
      method: "GET",
      url: "/api/dashboard/verify-onboarding",
      dataType: "json",
      headers: {
        Authorization: $('meta[name="access-token"]').attr("content"),
        Accept: "application/json"
      },
      success: function success(response) {
        if (response.read === false) {
          loadingOnChart("#loader-onboarding");
          var modalOnboarding = $("#modal-content-onboarding");
          modalOnboarding.slick({
            slidesToShow: 1,
            mobileFirst: true,
            infinite: false,
            arrows: false,
            adaptiveHeight: true
          });
          $(window).on("resize", function () {
            loadingOnChart("#loader-onboarding");
            modalOnboarding.slick("refresh");
            setTimeout(function () {
              loadingOnChartRemove("#loader-onboarding");
            }, 1000);
          });
          $("#modal-onboarding").on("shown.bs.modal", function () {
            modalOnboarding.slick("refresh");
            $("#user-name").html(response.name);
            $("#modal-onboarding").unbind("click");
          }).modal("show");
          setTimeout(function () {
            loadingOnChartRemove("#loader-onboarding");
          }, 1000);
          $("#onboarding-next-presentation, #onboarding-next-gamification, #onboarding-next-account-health").click(function () {
            modalOnboarding.slick("slickNext");
          });
          $("#onboarding-finish").click(function () {
            $.ajax({
              method: "PUT",
              url: "/api/dashboard/update-onboarding/" + response.onboarding,
              dataType: "json",
              headers: {
                Authorization: $('meta[name="access-token"]').attr("content"),
                Accept: "application/json"
              },
              error: function error() {
                $("#modal-onboarding").modal("hide");
              },
              success: function success() {
                $("#modal-onboarding").modal("hide");
                verifyAchievements();
              }
            });
          });
        } else {
          verifyAchievements();
        }
      }
    });
  }

  function verifyPixOnboarding() {
    $.ajax({
      method: "GET",
      url: "/api/dashboard/verify-pix-onboarding",
      dataType: "json",
      headers: {
        Authorization: $('meta[name="access-token"]').attr("content"),
        Accept: "application/json"
      },
      success: function success(response) {
        if (response.read === false) {
          loadingOnChart("#loader-onboarding");
          var modalPixOnboarding = $("#modal-content-pix");
          modalPixOnboarding.slick({
            slidesToShow: 1,
            mobileFirst: true,
            infinite: false,
            arrows: false,
            adaptiveHeight: true
          });
          $(window).on("resize", function () {
            loadingOnChart("#loader-onboarding");
            modalPixOnboarding.slick("refresh");
            setTimeout(function () {
              loadingOnChartRemove("#loader-onboarding");
            }, 1000);
          });
          $("#modal-pix-onboarding").on("shown.bs.modal", function () {
            modalPixOnboarding.slick("refresh");
            $("#user-name").html(response.name);
            $("#modal-pix").unbind("click");
          }).modal("show");
          setTimeout(function () {
            loadingOnChartRemove("#loader-onboarding");
          }, 1000);
          $(".pix-onboarding-next").click(function () {
            modalPixOnboarding.slick("slickNext");
          });
          $(".pix-onboarding-previous").click(function () {
            modalPixOnboarding.slick("slickPrev");
          });
          $(".pix-onboarding-later").click(function () {
            $.ajax({
              method: "PUT",
              url: "/api/dashboard/update-pix-onboarding/" + response.onboarding,
              dataType: "json",
              headers: {
                Authorization: $('meta[name="access-token"]').attr("content"),
                Accept: "application/json"
              },
              error: function error() {
                $("#modal-pix-onboarding").modal("hide");
                verifyAchievements();
              },
              success: function success() {
                $("#modal-pix-onboarding").modal("hide");
                verifyAchievements();
              }
            });
          });
          $(".pix-onboarding-finish").click(function () {
            $.ajax({
              method: "PUT",
              url: "/api/dashboard/update-pix-onboarding/" + response.onboarding,
              dataType: "json",
              headers: {
                Authorization: $('meta[name="access-token"]').attr("content"),
                Accept: "application/json"
              },
              error: function error() {
                $("#modal-pix-onboarding").modal("hide");
              },
              success: function success() {
                $("#modal-pix-onboarding").modal("hide");

                if (response.accounts_url.indexOf("http") == -1) {
                  response.accounts_url = "//" + response.accounts_url;
                }

                window.location.href = response.accounts_url;
              }
            });
          });
        } else {
          verifyAchievements();
        }
      }
    });
  }

  $("#closeWelcome").click(function () {
    $("#cardWelcome").slideUp("600");
  });
  getCompaniesAndProjects().done(function (data) {
    getProjects();
  });
});
$(document).ready(function () {
  var th = null;
  var scoreInfo = {
    0: {
      textColor: "text-color-red",
      bgColor: "bg-color-red",
      description: '<span class="text-color-red">Alerta:</span> regularize sua situação para evitar bloqueios.'
    },
    1: {
      textColor: "text-color-red",
      bgColor: "bg-color-red",
      description: '<span class="text-color-red">Alerta:</span> regularize sua situação para evitar bloqueios.'
    },
    2: {
      textColor: "text-color-orange",
      bgColor: "bg-color-orange",
      description: '<span class="text-color-orange">Atenção:</span> a saúde da sua conta está muito baixa.'
    },
    3: {
      textColor: "text-color-orange",
      bgColor: "bg-color-orange",
      description: '<span class="text-color-orange">Atenção:</span> a saúde da sua conta está muito baixa.'
    },
    4: {
      textColor: "text-color-yellow",
      bgColor: "bg-color-yellow",
      description: 'Seu desempenho é <span class="text-color-yellow">regular</span>. Fique de olho!'
    },
    5: {
      textColor: "text-color-yellow",
      bgColor: "bg-color-yellow",
      description: 'Seu desempenho é <span class="text-color-yellow">regular</span>. Fique de olho!'
    },
    6: {
      textColor: "text-color-green",
      bgColor: "bg-color-green",
      description: 'Continue assim. Seu desempenho é <span class="text-color-green">bom</span>!'
    },
    7: {
      textColor: "text-color-green",
      bgColor: "bg-color-green",
      description: 'Continue assim. Seu desempenho é <span class="text-color-green">bom</span>!'
    },
    8: {
      textColor: "text-color-dark-green",
      bgColor: "bg-color-dark-green",
      description: 'A saúde da sua conta está <span class="text-color-dark-green">excelente</span>. Parabéns!'
    },
    9: {
      textColor: "text-color-dark-green",
      bgColor: "bg-color-dark-green",
      description: 'A saúde da sua conta está <span class="text-color-dark-green">excelente</span>. Parabéns!'
    },
    10: {
      textColor: "text-color-dark-green",
      bgColor: "bg-color-dark-green",
      description: 'A saúde da sua conta está <span class="text-color-dark-green">excelente</span>. Parabéns!'
    }
  };

  function indexColor(value) {
    if (value <= 1.5) {
      return "color: #1BCE68;";
    }

    return "color: #FF3006;";
  }

  function nextCard() {
    //setTimeout(function(){loadingOnAccountsHealthRemove('.sirius-account > .card  .sirius-loading '); }, 500);
    loadingOnAccountsHealthRemove(".sirius-account > .card  .sirius-loading ");
    $(".sirius-account .card-indicators > .active").on("click", function () {
      $(".sirius-account > .card").html("");
      loadingOnAccountsHealth(".sirius-account > .card");
      var card = $(this).data("slide-to");

      switch (card) {
        case 1:
          window.updateAccountHealth();
          break;

        case 2:
          updateChargeback();
          break;

        case 3:
          updateAttendance();
          break;

        case 4:
          updateTracking();
          break;

        default:
      }
    });
  }

  window.updateAccountHealth = function () {
    var margin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '150px';
    //loadingOnAccountsHealth('.sirius-account > .card',margin);
    $.ajax({
      method: "GET",
      url: "/api/dashboard/get-account-health",
      dataType: "json",
      data: {
        company: $('.company-navbar').val()
      },
      headers: {
        Authorization: $('meta[name="access-token"]').attr("content"),
        Accept: "application/json"
      },
      error: function error(response) {
        loadingOnAccountsHealthRemove(".sirius-account > .card  .sirius-loading ");
        errorAjaxResponse(response);
      },
      success: function success(data) {
        if (!data.account_score) {
          updateEmptyScore();
        } else {
          var item = "\n                            <div\n                                class=\"card-header d-flex justify-content-between align-items-center bg-white mt-10 pb-0 account-health\">\n                                <div class=\"font-size-14 gray-600 mr-auto\">\n                                    <span class=\"ml-0\">Sa\xFAde da Conta</span>\n                                </div>\n                                    <ol class=\"card-indicators mb-0 d-flex justify-content-end align-items-center align-self-center\">\n                                        <li class=\"active\" data-slide-to=\"1\"></li>\n                                        <li class=\"\" data-slide-to=\"2\"></li>\n                                        <li class=\"\" data-slide-to=\"3\"></li>\n                                        <li class=\"\" data-slide-to=\"4\"></li>\n                                        <i class=\"o-angle-down-1 control-prev active\" data-slide-to=\"4\"></i>\n                                        <i class=\"o-angle-down-1 control-next active\" data-slide-to=\"2\"></i>\n                                    </ol>\n                            </div>\n                            <div class=\"card-body pt-0 d-flex flex-column justify-content-start align-items-start account-health\">\n                                <div id=\"\" class=\"d-flex flex-row justify-content-start align-items-start align-self-start\" >\n                                    <canvas id=\"account-health-chart-gauge\" class=\"mr-15\"></canvas>\n                                    <div class=\"mt-15 d-flex flex-column justify-content-center align-self-center\">\n                                        <span id=\"account-health-note\"><span class=\"".concat(scoreInfo[Math.floor(data.account_score)].textColor, "\">").concat(data.account_score >= 1 ? data.account_score : 0, "</span>/10</span>\n                                        <p id=\"account-health-description\" class=\"account-health-description\">").concat(scoreInfo[Math.floor(data.account_score)].description, "</p>\n                                    </div>\n                                </div>\n                                <div class=\"hr-horizontal mt-5 d-flex justify-content-center align-items-center align-self-center\"></div>\n                                <div id=\"card-notes\" class=\"mt-10 d-flex flex-row flex-nowrap justify-content-around align-items-stretch align-self-stretch\" >\n                                    <div class=\"d-flex flex-column flex-nowrap justify-content-center align-items-stretch align-self-stretch\">\n                                        <div id=\"account-health-note-chargebacks\" class=\"d-flex flex-row flex-nowrap justify-content-center align-items-center align-self-center\">\n                                            <span class=\"mr-10 ").concat(scoreInfo[Math.floor(data.chargeback_score)].bgColor, " account-health-note-circle\"></span>\n                                            <span class=\"account-health-note\">").concat(data.chargeback_score ? data.chargeback_score : 0, "</span>\n                                        </div>\n                                        <span class=\"account-health-note-description\">Chargebacks</span>\n                                    </div>\n                                    <div class=\"hr-vertical d-flex justify-content-center align-items-center align-self-center\"></div>\n                                    <div class=\"d-flex flex-column flex-nowrap justify-content-center align-items-stretch align-self-stretch\">\n                                        <div id=\"account-health-note-attendance\" class=\"d-flex flex-row flex-nowrap justify-content-center align-items-center align-self-center\">\n                                            <span class=\"mr-10 ").concat(scoreInfo[Math.floor(data.attendance_score)].bgColor, " account-health-note-circle\"></span>\n                                            <span class=\"account-health-note\">").concat(data.attendance_score ? data.attendance_score : 0, "</span>\n                                        </div>\n                                        <span class=\"account-health-note-description\">Atendimento</span>\n                                    </div>\n                                    <div class=\"hr-vertical d-flex justify-content-center align-items-center align-self-center\"></div>\n                                    <div class=\"d-flex flex-column flex-nowrap justify-content-center align-items-stretch align-self-stretch\">\n                                        <div id=\"account-health-note-tracking\" class=\"d-flex flex-row flex-nowrap justify-content-center align-items-center align-self-center\">\n                                            <span class=\"mr-10 ").concat(scoreInfo[Math.floor(data.tracking_score)].bgColor, " account-health-note-circle\"></span>\n                                            <span class=\"account-health-note\">").concat(data.tracking_score ? data.tracking_score : 0, "</span>\n                                        </div>\n                                        <span class=\"account-health-note-description\">Cod. Rastreio</span>\n                                    </div>\n                                </div>\n                                <div class=\"sirius-account-loading\"></div>\n                            </div>\n                    ");
          $(".sirius-account > .card").append(item);
          setTimeout(function () {
            updateGauge(data.account_score);
          }, 3000);
          nextCard();
        }

        $(".page.dashboard .sirius-account .sirius-account-health").css({
          height: " 225px"
        });
      }
    });
  };

  function updateEmptyScore() {
    setTimeout(function () {
      loadingOnAccountsHealthRemove(".sirius-account > .card  .sirius-loading");
    }, 500);
    var item = "\n                            <div\n                                class=\"card-header d-flex justify-content-between align-items-center bg-white mt-10 pb-0 account-health\">\n                            </div>\n                            <div class=\"card-body pt-0 d-flex flex-column justify-content-start align-items-start empty-score\">\n                                <div class=\"d-flex flex-column flex-nowrap justify-content-center align-items-center align-self-center\">\n                                    <span class=\"bg-color-blue \"></span>\n                                    <h4>EM BREVE</h4>\n                                    <p>Fa\xE7a +100 vendas para ativar este recurso.</p>\n                                </div>\n                                <div class=\"d-flex flex-row flex-nowrap justify-content-around align-items-stretch align-self-stretch\" >\n                                    <div class=\"d-flex flex-column justify-content-between align-items-center align-self-center\">\n                                        <div class=\"d-flex flex-row flex-nowrap justify-content-center align-items-center align-self-center\">\n                                            <span class=\"bg-color-gray empty-cilce\"></span>\n                                            <span></span>\n                                        </div>\n                                        <span class=\"account-health-note-description\">Contesta\xE7\xF5es</span>\n                                    </div>\n                                    <div class=\"hr-vertical d-flex justify-content-center align-items-center align-self-center\"></div>\n                                    <div class=\"d-flex flex-column justify-content-between align-items-center align-self-center\">\n                                        <div class=\"d-flex flex-row flex-nowrap justify-content-center align-items-center align-self-center\">\n                                            <span class=\"bg-color-gray empty-cilce\"></span>\n                                            <span></span>\n                                        </div>\n                                        <span class=\"account-health-note-description\">Atendimento</span>\n                                    </div>\n                                    <div class=\"hr-vertical d-flex justify-content-center align-items-center align-self-center\"></div>\n                                    <div class=\"d-flex flex-column justify-content-between align-items-center align-self-center\">\n                                        <div class=\"d-flex flex-row flex-nowrap justify-content-center align-items-center align-self-center\">\n                                            <span class=\"bg-color-gray empty-cilce\"></span>\n                                            <span></span>\n                                        </div>\n                                        <span class=\"account-health-note-description\">Cod. Rastreio</span>\n                                    </div>\n                                </div>\n                                <div class=\"sirius-account-loading\"></div>\n                            </div>\n                    ";
    $(".sirius-account > .card").append(item);
  }

  function updateGauge(account_score) {
    var opts = {
      angle: 0,
      // A extensão do arco do medidor
      lineWidth: 0.3,
      // A espessura da linha
      radiusScale: 0.8,
      // Raio relativo
      pointer: {
        length: 0.47,
        // Em relação ao raio de medição
        strokeWidth: 0.035,
        // A espessura
        color: "#000000" // Cor de preenchimento

      },
      limitMax: true,
      // Se for falso, o valor máximo aumenta automaticamente se o valor> maxValue
      limitMin: true,
      // If true, the min value of the gauge will be fixed
      colorStart: "#6FADCF",
      // Colors
      colorStop: "#FE330A",
      // just experiment with them
      strokeColor: "#8FC0DA",
      // to see which ones work best for you
      generateGradient: true,
      highDpiSupport: false,
      // Suporte de alta resolução
      // renderTicks é opcional
      renderTicks: {
        divisions: 0,
        divWidth: 0.1,
        divLength: 0,
        divColor: "#333333",
        subDivisions: 0,
        subLength: 0,
        subWidth: 10,
        subColor: "#666666"
      },
      staticZones: [{
        strokeStyle: "#FF3006",
        min: 0,
        max: 2,
        height: 1.3
      }, {
        strokeStyle: "#FFAF00",
        min: 2,
        max: 4,
        height: 1.3
      }, {
        strokeStyle: "#F2CC11",
        min: 4,
        max: 6,
        height: 1.3
      }, {
        strokeStyle: "#1BCE68",
        min: 6,
        max: 8,
        height: 1.3
      }, {
        strokeStyle: "#04A74A",
        min: 8,
        max: 10,
        height: 1.3
      }]
    };
    var target = document.getElementById("account-health-chart-gauge"); // your canvas element

    var gauge = new Gauge(target).setOptions(opts); // create sexy gauge!

    gauge.maxValue = 10; // set max gauge value

    gauge.setMinValue(0); // Prefer setter over gauge.minValue = 0

    gauge.animationSpeed = 64; // set animation speed (32 is default value)

    gauge.set(account_score); // set actual value
  }

  function updateChargeback() {
    //loadingOnAccountsHealth('.sirius-account > .card');
    $.ajax({
      method: "GET",
      url: "/api/dashboard/get-account-chargeback",
      dataType: "json",
      data: {
        company: $('.company-navbar').val()
      },
      headers: {
        Authorization: $('meta[name="access-token"]').attr("content"),
        Accept: "application/json"
      },
      error: function error(response) {
        loadingOnAccountsHealthRemove(".sirius-account > .card  .sirius-loading ");
        errorAjaxResponse(response);
      },
      success: function success(data) {
        var item = "\n                        <div\n                            class=\"card-header d-flex justify-content-between align-items-center bg-white mt-10 pb-0 account-chargeback\">\n                            <div class=\"font-size-14 gray-600 mr-auto\">\n                                <span class=\"ml-0\">Contesta\xE7\xF5es</span>\n                            </div>\n                                <ol class=\"card-indicators mb-0 d-flex justify-content-end align-items-center align-self-center\">\n                                    <li class=\"\" data-slide-to=\"1\"></li>\n                                    <li class=\"active\" data-slide-to=\"2\"></li>\n                                    <li class=\"\"  data-slide-to=\"3\"></li>\n                                    <li class=\"\"  data-slide-to=\"4\"></li>\n                                    <i class=\"o-angle-down-1 control-prev active\" data-slide-to=\"1\"></i>\n                                    <i class=\"o-angle-down-1 control-next active\" data-slide-to=\"3\"></i>\n                                </ol>\n                        </div>\n                        <div class=\"card-body pt-0 mt-20 d-flex flex-column justify-content-start align-items-start account-chargeback\">\n\n                            <div class=\"d-flex flex-row flex-nowrap justify-content-between\" style=\"width: 100%;\">\n                                <div class=\"col-4 p-0 d-flex flex-row justify-content-start align-items-center align-self-start\" >\n                                    <span class=\"mr-10 ".concat(scoreInfo[Math.floor(data.chargeback_score)].bgColor, " account-health-note-circle\"></span>\n                                    <span class=\"account-tax ").concat(scoreInfo[Math.floor(data.chargeback_score)].textColor, "\">").concat(data.chargeback_score, "</span>\n                                </div>\n                                <div class=\"col-6 p-0 d-flex flex-row justify-content-end align-items-center\" >\n                                    <span class=\"font-size-12 gray-600\">Como analisamos</span>\n\n                                    <div class=\"custom-tooltip\" >\n                                        <div id=\"chargeback-custom-tooltip-icon\" data-target=\"chargeback-custom-tooltip-container\" style=\"margin-left: 3px;\">\n                                            <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                <path d=\"M8 0C12.4183 0 16 3.58172 16 8C16 12.4183 12.4183 16 8 16C3.58172 16 0 12.4183 0 8C0 3.58172 3.58172 0 8 0ZM8 1C4.13401 1 1 4.13401 1 8C1 11.866 4.13401 15 8 15C11.866 15 15 11.866 15 8C15 4.13401 11.866 1 8 1ZM8 11.5C8.41421 11.5 8.75 11.8358 8.75 12.25C8.75 12.6642 8.41421 13 8 13C7.58579 13 7.25 12.6642 7.25 12.25C7.25 11.8358 7.58579 11.5 8 11.5ZM8 3.5C9.38071 3.5 10.5 4.61929 10.5 6C10.5 6.72959 10.1848 7.40774 9.6513 7.8771L9.49667 8.00243L9.27817 8.16553L9.19065 8.23718C9.1348 8.28509 9.08354 8.33373 9.03456 8.38592C8.69627 8.74641 8.5 9.24223 8.5 10C8.5 10.2761 8.27614 10.5 8 10.5C7.72386 10.5 7.5 10.2761 7.5 10C7.5 8.98796 7.79312 8.24747 8.30535 7.70162C8.41649 7.5832 8.53202 7.47988 8.66094 7.37874L8.90761 7.19439L9.02561 7.09468C9.325 6.81435 9.5 6.42206 9.5 6C9.5 5.17157 8.82843 4.5 8 4.5C7.17157 4.5 6.5 5.17157 6.5 6C6.5 6.27614 6.27614 6.5 6 6.5C5.72386 6.5 5.5 6.27614 5.5 6C5.5 4.61929 6.61929 3.5 8 3.5Z\" fill=\"#78838E\"/>\n                                            </svg>\n                                        </div>\n\n                                        <div id=\"chargeback-custom-tooltip-container\" class=\"custom-tooltip-container mx-2\" style=\"display: none; margin-top: -430px;\">\n                                            <div class=\"custom-tooltip-content\" style=\"margin-right: 220px\">\n                                                <p>\n                                                O chargeback acontece quando uma cobran\xE7a \xE9 contestada pelo titular do cart\xE3o de cr\xE9dito.\n                                                </p>\n\n                                                <p>\n                                                Analisamos uma janela de 150 dias (5 meses), excluindo os \xFAltimos 20 dias* de vendas, para calcular o \xEDndice e atribuir uma nota que vai de 0 a 10.\n                                                </p>\n\n                                                <p>\n                                                O \xEDndice exigido pelas regras internacionais das bandeiras \xE9 de n\xE3o exceder 1,5%.\n                                                Dentre 1,5% e 3% \xE9 considerado alto, podendo sofrer multas por cada chargeback.\n                                                Acima de 3%, al\xE9m das multas, a sua conta poder\xE1 ser bloqueada definitivamente.\n                                                </p>\n\n                                                <p>\n                                                *A exclus\xE3o dos \xFAltimos 20 dias \xE9 para tornar o c\xE1lculo mais preciso, uma vez que os chargebacks geralmente aparecem ap\xF3s este per\xEDodo.\n                                                </p>\n\n                                                <div class=\"border border-1 rounded\" style=\"padding: 5px 20px;\">\n                                                    <div class=\"d-flex flex-row flex-nowrap justify-content-between\">\n                                                        <span class=\"font-size-12 gray-600 font-weight-bold\">\xDAltimos 150 dias</span>\n                                                        <span class=\"font-size-12 gray-600 font-weight-bold\">20 dias</span>\n                                                    </div>\n                                                    <img class=\"col-12 p-0\" src=\"/build/global/img/timeline-chargeback.svg\" style=\"max-width: 100%;height: 15px;\">\n                                                </div>\n\n                                            </div>\n                                            <div class=\"custom-tooltip-arrow\"></div>\n                                        </div>\n                                    </div>\n\n                                </div>\n                            </div>\n\n                            <div class=\"mt-10 d-flex flex-row flex-nowrap justify-content-between\" style=\"width: 100%;\">\n                                <div class=\"col-4 p-0 d-flex flex-column flex-nowrap justify-content-start align-items-start align-self-start\" >\n                                    <span class=\"account-health-note\">").concat(data.total_sales_approved, "</span>\n                                    <span class=\"account-health-note-description\">Vendas no cart\xE3o</span>\n                                </div>\n                                <div class=\"col-3 p-0 d-flex flex-column flex-nowrap justify-content-start align-items-start align-self-start\" >\n                                    <span class=\"account-health-note\">").concat(data.total_sales_chargeback, "\n                                        <!-- <span class=\"account-tax ").concat(scoreInfo[Math.floor(data.chargeback_score)].textColor, " \">").concat(parseFloat(data.chargeback_rate).toFixed(2), "%</span> -->\n                                    </span>\n                                    <span class=\"account-health-note-description\">Contesta\xE7\xF5es</span>\n                                </div>\n                                <div class=\"col-2 p-0 d-flex flex-column flex-nowrap justify-content-start align-items-start align-self-start\" >\n                                    <span class=\"account-health-note\" style=\"font-size: 20px; ").concat(indexColor(data.chargeback_rate), "\">").concat(parseFloat(data.chargeback_rate).toFixed(1), "%</span>\n                                    <span class=\"account-health-note-description\">\xCDndice</span>\n                                </div>\n                            </div>\n\n                            <div class=\"hr-horizontal mt-25 d-flex justify-content-start align-items-start align-self-start\"></div>\n                            <div class=\"d-flex flex-row flex-nowrap justify-content-start align-items-center align-self-start\" style=\"height: 100%;\" >\n                                <a href=\"./contestations\" class=\"tips-chargeback\">Acesse o painel de Contesta\xE7\xF5es <i class=\"o-arrow-right-1 ml-10 align-items-center\"></i></a>\n                            </div>\n                            <div class=\"sirius-account-loading\"></div>\n                        </div>\n                ");
        $(".sirius-account > .card").append(item);
        $("#chargeback-custom-tooltip-icon").on({
          mouseenter: function mouseenter() {
            $("#chargeback-custom-tooltip-container").fadeIn();
          },
          mouseleave: function mouseleave() {
            $("#chargeback-custom-tooltip-container").fadeOut();
          }
        });
        nextCard();
      }
    });
  }

  function updateAttendance() {
    loadingOnAccountsHealth(".sirius-account > .card");
    $.ajax({
      method: "GET",
      url: "/api/dashboard/get-account-attendance",
      dataType: "json",
      data: {
        company: $('.company-navbar').val()
      },
      headers: {
        Authorization: $('meta[name="access-token"]').attr("content"),
        Accept: "application/json"
      },
      error: function error(response) {
        loadingOnAccountsHealthRemove(".sirius-account > .card  .sirius-loading ");
        errorAjaxResponse(response);
      },
      success: function success(data) {
        var item = "\n                        <div\n                            class=\"card-header d-flex justify-content-between align-items-center bg-white mt-10 pb-0 account-attendance\">\n                            <div class=\"font-size-14 gray-600 mr-auto\">\n                                <span class=\"ml-0\">Atendimento</span>\n                            </div>\n                                <ol class=\"card-indicators mb-0 d-flex justify-content-end align-items-center align-self-center\">\n                                    <li class=\"\" data-slide-to=\"1\"></li>\n                                    <li class=\"\" data-slide-to=\"2\"></li>\n                                    <li class=\"active\" data-slide-to=\"3\"></li>\n                                    <li class=\"\"  data-slide-to=\"4\"></li>\n                                    <i class=\"o-angle-down-1 control-prev active\" data-slide-to=\"2\"></i>\n                                    <i class=\"o-angle-down-1 control-next active\" data-slide-to=\"4\"></i>\n                                </ol>\n                        </div>\n                        <div class=\"card-body pt-0 mt-20 d-flex flex-column justify-content-start align-items-start account-attendance\">\n                            <div class=\"d-flex flex-row flex-nowrap\" style=\"width: 100%;\">\n                                <div class=\"col-6 p-0 d-flex flex-row justify-content-start align-items-center align-self-start\" >\n                                    <span class=\"mr-10 ".concat(scoreInfo[Math.floor(data.attendance_score)].bgColor, " account-health-note-circle\"></span>\n                                    <span class=\"account-tax ").concat(scoreInfo[Math.floor(data.attendance_score)].textColor, "\">").concat(data.attendance_score, "</span>\n                                </div>\n                                <div class=\"col-6 pr-0 pl-0 d-flex flex-row flex-nowrap justify-content-start align-items-center align-self-center font-size-12 gray-600\">\n                                    <span class=\"o-clock-1 mr-5\" data-toggle=\"tooltip\" data-original-title=\"Tempo m\xE9dio de resposta\" style=\"font-size: 18px;line-height: 18px;-webkit-text-stroke: 1.45px rgba(0, 0, 0, 0.1);\"></span> ").concat(data.attendance_average_response_time || 0, " hora").concat(data.attendance_average_response_time === 1 ? "" : "s", "\n                                </div>\n                            </div>\n                            <div class=\"mt-10 p-0 d-flex flex-row flex-wrap\" style=\"height: 100%; width: 100%;\">\n                                <div class=\"col-6 pr-0 pl-0 d-flex flex-column flex-nowrap justify-content-start align-items-start align-self-start\">\n                                    <span class=\"account-health-note\">").concat(data.open || 0, "</span>\n                                    <span class=\"account-health-note-description\">Abertos</span>\n                                </div>\n                                <div class=\"col-6 pr-0 pl-0 d-flex flex-column flex-nowrap justify-content-start align-items-start align-self-start\">\n                                    <span class=\"account-health-note\">").concat(data.closed || 0, "</span>\n                                    <span class=\"account-health-note-description\">Resolvidos</span>\n                                </div>\n                                <div class=\"col-6 pr-0 pl-0 d-flex flex-column flex-nowrap justify-content-start align-items-start align-self-start\">\n                                    <span class=\"account-health-note\">").concat(data.mediation || 0, "</span>\n                                    <span class=\"account-health-note-description\">Media\xE7\xE3o</span>\n                                </div>\n                                <div class=\"col-6 pr-0 pl-0 d-flex flex-column flex-nowrap justify-content-start align-items-start align-self-start\">\n                                    <span class=\"account-health-note\">").concat(data.total, "</span>\n                                    <span class=\"account-health-note-description\">Total</span>\n                                </div>\n                            </div>\n                            <div class=\"sirius-account-loading\"></div>\n                        </div>\n                ");
        $(".sirius-account > .card").append(item);
        nextCard();
        $(function () {
          $('[data-toggle="tooltip"]').tooltip();
        });
      }
    });
  }

  function updateTracking() {
    loadingOnAccountsHealth(".sirius-account > .card");
    $.ajax({
      method: "GET",
      url: "/api/dashboard/get-account-tracking",
      dataType: "json",
      data: {
        company: $('.company-navbar').val() //Storage.getItem('company_default'),

      },
      headers: {
        Authorization: $('meta[name="access-token"]').attr("content"),
        Accept: "application/json"
      },
      error: function error(response) {
        loadingOnAccountsHealthRemove(".sirius-account > .card  .sirius-loading ");
        errorAjaxResponse(response);
      },
      success: function success(data) {
        var item = "\n                        <div\n                            class=\"card-header d-flex justify-content-between align-items-center bg-white mt-10 pb-0 account-tracking\">\n                            <div class=\"font-size-14 gray-600 mr-auto\">\n                                <span class=\"ml-0\">C\xF3digos de Rastreio</span>\n                            </div>\n                                <ol class=\"card-indicators mb-0 d-flex justify-content-end align-items-center align-self-center\">\n                                    <li class=\"\" data-slide-to=\"1\"></li>\n                                    <li class=\"\" data-slide-to=\"2\"></li>\n                                    <li class=\"\" data-slide-to=\"3\"></li>\n                                    <li class=\"active\"  data-slide-to=\"4\"></li>\n                                    <i class=\"o-angle-down-1 control-prev active\" data-slide-to=\"3\"></i>\n                                    <i class=\"o-angle-down-1 control-next active\" data-slide-to=\"1\"></i>\n                                </ol>\n                        </div>\n                        <div class=\"card-body pt-0 mt-20 d-flex flex-column justify-content-start align-items-start account-tracking\">\n                            <div id=\"\" class=\"d-flex flex-row justify-content-start align-items-center align-self-start\">\n                                <span class=\"mr-10 ".concat(scoreInfo[Math.floor(data.tracking_score)].bgColor, " account-health-note-circle\"></span>\n                                <span class=\"account-tax ").concat(scoreInfo[Math.floor(data.tracking_score)].textColor, "\">").concat(data.tracking_score, "</span>\n                            </div>\n                            <div class=\"mt-10 p-0 d-flex flex-row flex-wrap\" style=\"height: 100%; width: 100%;\">\n                                <div class=\"col-6 pr-0 pl-0 d-flex flex-column flex-nowrap justify-content-start align-items-start align-self-start\">\n                                    <span class=\"account-health-note\">").concat(data.average_post_time, " dia").concat(data.average_post_time === 1 ? "" : "s", "</span>\n                                    <span class=\"account-health-note-description-tracking\">Tempo m\xE9dio de postagem</span>\n                                </div>\n                                <div class=\"col-6 pr-0 pl-0 d-flex flex-column flex-nowrap justify-content-start align-items-start align-self-start\">\n                                    <span class=\"account-health-note\">").concat(data.problem, " <small class=\"account-health-note-description font-size-14\">(").concat(data.problem_percentage, "%)</small></span>\n                                    <span class=\"account-health-note-description-tracking\">C\xF3digos com problema</span>\n                                </div>\n                                <div class=\"col-6 pr-0 pl-0 d-flex flex-column flex-nowrap justify-content-start align-items-start align-self-start\">\n                                    <span class=\"account-health-note\">").concat(data.unknown, " <small class=\"account-health-note-description font-size-14\">(").concat(data.problem_percentage, "%)</small></span>\n                                    <span class=\"account-health-note-description-tracking\">C\xF3digos n\xE3o informados</span>\n                                </div>\n                                <div class=\"col-6 pr-0 pl-0 d-flex flex-column flex-nowrap justify-content-start align-items-start align-self-start\">\n                                    <span class=\"account-health-note\">").concat(data.tracking_today, "</span>\n                                    <span class=\"account-health-note-description-tracking\">C\xF3digos informados hoje</span>\n                                </div>\n                            </div>\n                            <div class=\"sirius-account-loading\"></div>\n                        </div>\n                ");
        $(".sirius-account > .card").append(item);
        nextCard();
      }
    });
  }
});
$(document).ready(function () {
  var user_id = $("#user_hash").val();
  var user_name = $("#user_name").val();
  var user_email = $("#user_email").val();
  window.announcekit = window.announcekit || {
    queue: [],
    on: function on(n, x) {
      window.announcekit.queue.push([n, x]);
    },
    push: function push(x) {
      window.announcekit.queue.push(x);
    }
  };
  window.announcekit.push({
    widget: "https://updates.cloudfox.net/widgets/v2/Qkw3C",
    name: "Qkw3C",
    user: {
      id: user_id,
      name: user_name,
      email: user_email
    }
  });
  $(".announcekit-widget-mobile").on("click", function () {
    announcekit.widget$Qkw3C.open();
  });
});
