function _typeof2(obj) { "@babel/helpers - typeof"; return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof2(obj); }

(function (global) {
  var babelHelpers = global.babelHelpers = {};
  babelHelpers["typeof"] = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return _typeof2(obj);
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
  };

  babelHelpers.jsx = function () {
    var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol["for"] && Symbol["for"]("react.element") || 0xeac7;
    return function createRawReactElement(type, props, key, children) {
      var defaultProps = type && type.defaultProps;
      var childrenLength = arguments.length - 3;

      if (!props && childrenLength !== 0) {
        props = {};
      }

      if (props && defaultProps) {
        for (var propName in defaultProps) {
          if (props[propName] === void 0) {
            props[propName] = defaultProps[propName];
          }
        }
      } else if (!props) {
        props = defaultProps || {};
      }

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 3];
        }

        props.children = childArray;
      }

      return {
        $$typeof: REACT_ELEMENT_TYPE,
        type: type,
        key: key === undefined ? null : '' + key,
        ref: null,
        props: props,
        _owner: null
      };
    };
  }();

  babelHelpers.asyncIterator = function (iterable) {
    if (typeof Symbol === "function") {
      if (Symbol.asyncIterator) {
        var method = iterable[Symbol.asyncIterator];
        if (method != null) return method.call(iterable);
      }

      if (Symbol.iterator) {
        return iterable[Symbol.iterator]();
      }
    }

    throw new TypeError("Object is not async iterable");
  };

  babelHelpers.asyncGenerator = function () {
    function AwaitValue(value) {
      this.value = value;
    }

    function AsyncGenerator(gen) {
      var front, back;

      function send(key, arg) {
        return new Promise(function (resolve, reject) {
          var request = {
            key: key,
            arg: arg,
            resolve: resolve,
            reject: reject,
            next: null
          };

          if (back) {
            back = back.next = request;
          } else {
            front = back = request;
            resume(key, arg);
          }
        });
      }

      function resume(key, arg) {
        try {
          var result = gen[key](arg);
          var value = result.value;

          if (value instanceof AwaitValue) {
            Promise.resolve(value.value).then(function (arg) {
              resume("next", arg);
            }, function (arg) {
              resume("throw", arg);
            });
          } else {
            settle(result.done ? "return" : "normal", result.value);
          }
        } catch (err) {
          settle("throw", err);
        }
      }

      function settle(type, value) {
        switch (type) {
          case "return":
            front.resolve({
              value: value,
              done: true
            });
            break;

          case "throw":
            front.reject(value);
            break;

          default:
            front.resolve({
              value: value,
              done: false
            });
            break;
        }

        front = front.next;

        if (front) {
          resume(front.key, front.arg);
        } else {
          back = null;
        }
      }

      this._invoke = send;

      if (typeof gen["return"] !== "function") {
        this["return"] = undefined;
      }
    }

    if (typeof Symbol === "function" && Symbol.asyncIterator) {
      AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
        return this;
      };
    }

    AsyncGenerator.prototype.next = function (arg) {
      return this._invoke("next", arg);
    };

    AsyncGenerator.prototype["throw"] = function (arg) {
      return this._invoke("throw", arg);
    };

    AsyncGenerator.prototype["return"] = function (arg) {
      return this._invoke("return", arg);
    };

    return {
      wrap: function wrap(fn) {
        return function () {
          return new AsyncGenerator(fn.apply(this, arguments));
        };
      },
      "await": function _await(value) {
        return new AwaitValue(value);
      }
    };
  }();

  babelHelpers.asyncGeneratorDelegate = function (inner, awaitWrap) {
    var iter = {},
        waiting = false;

    function pump(key, value) {
      waiting = true;
      value = new Promise(function (resolve) {
        resolve(inner[key](value));
      });
      return {
        done: false,
        value: awaitWrap(value)
      };
    }

    ;

    if (typeof Symbol === "function" && Symbol.iterator) {
      iter[Symbol.iterator] = function () {
        return this;
      };
    }

    iter.next = function (value) {
      if (waiting) {
        waiting = false;
        return value;
      }

      return pump("next", value);
    };

    if (typeof inner["throw"] === "function") {
      iter["throw"] = function (value) {
        if (waiting) {
          waiting = false;
          throw value;
        }

        return pump("throw", value);
      };
    }

    if (typeof inner["return"] === "function") {
      iter["return"] = function (value) {
        return pump("return", value);
      };
    }

    return iter;
  };

  babelHelpers.asyncToGenerator = function (fn) {
    return function () {
      var gen = fn.apply(this, arguments);
      return new Promise(function (resolve, reject) {
        function step(key, arg) {
          try {
            var info = gen[key](arg);
            var value = info.value;
          } catch (error) {
            reject(error);
            return;
          }

          if (info.done) {
            resolve(value);
          } else {
            return Promise.resolve(value).then(function (value) {
              step("next", value);
            }, function (err) {
              step("throw", err);
            });
          }
        }

        return step("next");
      });
    };
  };

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers.defineEnumerableProperties = function (obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ("value" in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    return obj;
  };

  babelHelpers.defaults = function (obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = Object.getOwnPropertyDescriptor(defaults, key);

      if (value && value.configurable && obj[key] === undefined) {
        Object.defineProperty(obj, key, value);
      }
    }

    return obj;
  };

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers["extends"] = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  babelHelpers.get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  babelHelpers.inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + _typeof2(superClass));
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  babelHelpers["instanceof"] = function (left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
      return right[Symbol.hasInstance](left);
    } else {
      return left instanceof right;
    }
  };

  babelHelpers.interopRequireDefault = function (obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  };

  babelHelpers.interopRequireWildcard = function (obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj["default"] = obj;
      return newObj;
    }
  };

  babelHelpers.newArrowCheck = function (innerThis, boundThis) {
    if (innerThis !== boundThis) {
      throw new TypeError("Cannot instantiate an arrow function");
    }
  };

  babelHelpers.objectDestructuringEmpty = function (obj) {
    if (obj == null) throw new TypeError("Cannot destructure undefined");
  };

  babelHelpers.objectWithoutProperties = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  babelHelpers.possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (_typeof2(call) === "object" || typeof call === "function") ? call : self;
  };

  babelHelpers.selfGlobal = typeof global === "undefined" ? self : global;

  babelHelpers.set = function set(object, property, value, receiver) {
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent !== null) {
        set(parent, property, value, receiver);
      }
    } else if ("value" in desc && desc.writable) {
      desc.value = value;
    } else {
      var setter = desc.set;

      if (setter !== undefined) {
        setter.call(receiver, value);
      }
    }

    return value;
  };

  babelHelpers.slicedToArray = function () {
    function sliceIterator(arr, i) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"]) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();

  babelHelpers.slicedToArrayLoose = function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      var _arr = [];

      for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {
        _arr.push(_step.value);

        if (i && _arr.length === i) break;
      }

      return _arr;
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };

  babelHelpers.taggedTemplateLiteral = function (strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  };

  babelHelpers.taggedTemplateLiteralLoose = function (strings, raw) {
    strings.raw = raw;
    return strings;
  };

  babelHelpers.temporalRef = function (val, name, undef) {
    if (val === undef) {
      throw new ReferenceError(name + " is not defined - temporal dead zone");
    } else {
      return val;
    }
  };

  babelHelpers.temporalUndefined = {};

  babelHelpers.toArray = function (arr) {
    return Array.isArray(arr) ? arr : Array.from(arr);
  };

  babelHelpers.toConsumableArray = function (arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  };
})(typeof global === "undefined" ? self : global);
/*
 Copyright (C) Federico Zivolo 2018
 Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).
 */


(function (e, t) {
  'object' == (typeof exports === "undefined" ? "undefined" : _typeof2(exports)) && 'undefined' != typeof module ? module.exports = t() : 'function' == typeof define && define.amd ? define(t) : e.Popper = t();
})(this, function () {
  'use strict';

  function e(e) {
    return e && '[object Function]' === {}.toString.call(e);
  }

  function t(e, t) {
    if (1 !== e.nodeType) return [];
    var o = getComputedStyle(e, null);
    return t ? o[t] : o;
  }

  function o(e) {
    return 'HTML' === e.nodeName ? e : e.parentNode || e.host;
  }

  function n(e) {
    if (!e) return document.body;

    switch (e.nodeName) {
      case 'HTML':
      case 'BODY':
        return e.ownerDocument.body;

      case '#document':
        return e.body;
    }

    var i = t(e),
        r = i.overflow,
        p = i.overflowX,
        s = i.overflowY;
    return /(auto|scroll|overlay)/.test(r + s + p) ? e : n(o(e));
  }

  function r(e) {
    return 11 === e ? re : 10 === e ? pe : re || pe;
  }

  function p(e) {
    if (!e) return document.documentElement;

    for (var o = r(10) ? document.body : null, n = e.offsetParent; n === o && e.nextElementSibling;) {
      n = (e = e.nextElementSibling).offsetParent;
    }

    var i = n && n.nodeName;
    return i && 'BODY' !== i && 'HTML' !== i ? -1 !== ['TD', 'TABLE'].indexOf(n.nodeName) && 'static' === t(n, 'position') ? p(n) : n : e ? e.ownerDocument.documentElement : document.documentElement;
  }

  function s(e) {
    var t = e.nodeName;
    return 'BODY' !== t && ('HTML' === t || p(e.firstElementChild) === e);
  }

  function d(e) {
    return null === e.parentNode ? e : d(e.parentNode);
  }

  function a(e, t) {
    if (!e || !e.nodeType || !t || !t.nodeType) return document.documentElement;
    var o = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,
        n = o ? e : t,
        i = o ? t : e,
        r = document.createRange();
    r.setStart(n, 0), r.setEnd(i, 0);
    var l = r.commonAncestorContainer;
    if (e !== l && t !== l || n.contains(i)) return s(l) ? l : p(l);
    var f = d(e);
    return f.host ? a(f.host, t) : a(e, d(t).host);
  }

  function l(e) {
    var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 'top',
        o = 'top' === t ? 'scrollTop' : 'scrollLeft',
        n = e.nodeName;

    if ('BODY' === n || 'HTML' === n) {
      var i = e.ownerDocument.documentElement,
          r = e.ownerDocument.scrollingElement || i;
      return r[o];
    }

    return e[o];
  }

  function f(e, t) {
    var o = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
        n = l(t, 'top'),
        i = l(t, 'left'),
        r = o ? -1 : 1;
    return e.top += n * r, e.bottom += n * r, e.left += i * r, e.right += i * r, e;
  }

  function m(e, t) {
    var o = 'x' === t ? 'Left' : 'Top',
        n = 'Left' == o ? 'Right' : 'Bottom';
    return parseFloat(e['border' + o + 'Width'], 10) + parseFloat(e['border' + n + 'Width'], 10);
  }

  function h(e, t, o, n) {
    return $(t['offset' + e], t['scroll' + e], o['client' + e], o['offset' + e], o['scroll' + e], r(10) ? o['offset' + e] + n['margin' + ('Height' === e ? 'Top' : 'Left')] + n['margin' + ('Height' === e ? 'Bottom' : 'Right')] : 0);
  }

  function c() {
    var e = document.body,
        t = document.documentElement,
        o = r(10) && getComputedStyle(t);
    return {
      height: h('Height', e, t, o),
      width: h('Width', e, t, o)
    };
  }

  function g(e) {
    return le({}, e, {
      right: e.left + e.width,
      bottom: e.top + e.height
    });
  }

  function u(e) {
    var o = {};

    try {
      if (r(10)) {
        o = e.getBoundingClientRect();
        var n = l(e, 'top'),
            i = l(e, 'left');
        o.top += n, o.left += i, o.bottom += n, o.right += i;
      } else o = e.getBoundingClientRect();
    } catch (t) {}

    var p = {
      left: o.left,
      top: o.top,
      width: o.right - o.left,
      height: o.bottom - o.top
    },
        s = 'HTML' === e.nodeName ? c() : {},
        d = s.width || e.clientWidth || p.right - p.left,
        a = s.height || e.clientHeight || p.bottom - p.top,
        f = e.offsetWidth - d,
        h = e.offsetHeight - a;

    if (f || h) {
      var u = t(e);
      f -= m(u, 'x'), h -= m(u, 'y'), p.width -= f, p.height -= h;
    }

    return g(p);
  }

  function b(e, o) {
    var i = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
        p = r(10),
        s = 'HTML' === o.nodeName,
        d = u(e),
        a = u(o),
        l = n(e),
        m = t(o),
        h = parseFloat(m.borderTopWidth, 10),
        c = parseFloat(m.borderLeftWidth, 10);
    i && 'HTML' === o.nodeName && (a.top = $(a.top, 0), a.left = $(a.left, 0));
    var b = g({
      top: d.top - a.top - h,
      left: d.left - a.left - c,
      width: d.width,
      height: d.height
    });

    if (b.marginTop = 0, b.marginLeft = 0, !p && s) {
      var y = parseFloat(m.marginTop, 10),
          w = parseFloat(m.marginLeft, 10);
      b.top -= h - y, b.bottom -= h - y, b.left -= c - w, b.right -= c - w, b.marginTop = y, b.marginLeft = w;
    }

    return (p && !i ? o.contains(l) : o === l && 'BODY' !== l.nodeName) && (b = f(b, o)), b;
  }

  function y(e) {
    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
        o = e.ownerDocument.documentElement,
        n = b(e, o),
        i = $(o.clientWidth, window.innerWidth || 0),
        r = $(o.clientHeight, window.innerHeight || 0),
        p = t ? 0 : l(o),
        s = t ? 0 : l(o, 'left'),
        d = {
      top: p - n.top + n.marginTop,
      left: s - n.left + n.marginLeft,
      width: i,
      height: r
    };
    return g(d);
  }

  function w(e) {
    var n = e.nodeName;
    return 'BODY' === n || 'HTML' === n ? !1 : 'fixed' === t(e, 'position') || w(o(e));
  }

  function E(e) {
    if (!e || !e.parentElement || r()) return document.documentElement;

    for (var o = e.parentElement; o && 'none' === t(o, 'transform');) {
      o = o.parentElement;
    }

    return o || document.documentElement;
  }

  function v(e, t, i, r) {
    var p = 4 < arguments.length && void 0 !== arguments[4] && arguments[4],
        s = {
      top: 0,
      left: 0
    },
        d = p ? E(e) : a(e, t);
    if ('viewport' === r) s = y(d, p);else {
      var l;
      'scrollParent' === r ? (l = n(o(t)), 'BODY' === l.nodeName && (l = e.ownerDocument.documentElement)) : 'window' === r ? l = e.ownerDocument.documentElement : l = r;
      var f = b(l, d, p);

      if ('HTML' === l.nodeName && !w(d)) {
        var m = c(),
            h = m.height,
            g = m.width;
        s.top += f.top - f.marginTop, s.bottom = h + f.top, s.left += f.left - f.marginLeft, s.right = g + f.left;
      } else s = f;
    }
    return s.left += i, s.top += i, s.right -= i, s.bottom -= i, s;
  }

  function x(e) {
    var t = e.width,
        o = e.height;
    return t * o;
  }

  function O(e, t, o, n, i) {
    var r = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;
    if (-1 === e.indexOf('auto')) return e;
    var p = v(o, n, r, i),
        s = {
      top: {
        width: p.width,
        height: t.top - p.top
      },
      right: {
        width: p.right - t.right,
        height: p.height
      },
      bottom: {
        width: p.width,
        height: p.bottom - t.bottom
      },
      left: {
        width: t.left - p.left,
        height: p.height
      }
    },
        d = Object.keys(s).map(function (e) {
      return le({
        key: e
      }, s[e], {
        area: x(s[e])
      });
    }).sort(function (e, t) {
      return t.area - e.area;
    }),
        a = d.filter(function (e) {
      var t = e.width,
          n = e.height;
      return t >= o.clientWidth && n >= o.clientHeight;
    }),
        l = 0 < a.length ? a[0].key : d[0].key,
        f = e.split('-')[1];
    return l + (f ? '-' + f : '');
  }

  function L(e, t, o) {
    var n = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null,
        i = n ? E(t) : a(t, o);
    return b(o, i, n);
  }

  function S(e) {
    var t = getComputedStyle(e),
        o = parseFloat(t.marginTop) + parseFloat(t.marginBottom),
        n = parseFloat(t.marginLeft) + parseFloat(t.marginRight),
        i = {
      width: e.offsetWidth + n,
      height: e.offsetHeight + o
    };
    return i;
  }

  function T(e) {
    var t = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
    };
    return e.replace(/left|right|bottom|top/g, function (e) {
      return t[e];
    });
  }

  function C(e, t, o) {
    o = o.split('-')[0];
    var n = S(e),
        i = {
      width: n.width,
      height: n.height
    },
        r = -1 !== ['right', 'left'].indexOf(o),
        p = r ? 'top' : 'left',
        s = r ? 'left' : 'top',
        d = r ? 'height' : 'width',
        a = r ? 'width' : 'height';
    return i[p] = t[p] + t[d] / 2 - n[d] / 2, i[s] = o === s ? t[s] - n[a] : t[T(s)], i;
  }

  function D(e, t) {
    return Array.prototype.find ? e.find(t) : e.filter(t)[0];
  }

  function N(e, t, o) {
    if (Array.prototype.findIndex) return e.findIndex(function (e) {
      return e[t] === o;
    });
    var n = D(e, function (e) {
      return e[t] === o;
    });
    return e.indexOf(n);
  }

  function k(t, o, n) {
    var i = void 0 === n ? t : t.slice(0, N(t, 'name', n));
    return i.forEach(function (t) {
      t['function'] && console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
      var n = t['function'] || t.fn;
      t.enabled && e(n) && (o.offsets.popper = g(o.offsets.popper), o.offsets.reference = g(o.offsets.reference), o = n(o, t));
    }), o;
  }

  function P(e) {
    for (var t = [!1, 'ms', 'Webkit', 'Moz', 'O'], o = e.charAt(0).toUpperCase() + e.slice(1), n = 0; n < t.length; n++) {
      var i = t[n],
          r = i ? '' + i + o : e;
      if ('undefined' != typeof document.body.style[r]) return r;
    }

    return null;
  }

  function W() {
    if (!this.state.isDestroyed) {
      var e = {
        instance: this,
        styles: {},
        arrowStyles: {},
        attributes: {},
        flipped: !1,
        offsets: {}
      },
          t = this.popper.style;
      t.top = '', t.left = '', t[P('transform')] = '', e.offsets.reference = L(this.state, this.popper, this.reference, this.options.positionFixed), e.placement = O(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.positionFixed = this.options.positionFixed, e.offsets.popper = C(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute', e = k(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));
    }
  }

  function B(e, t) {
    return e.some(function (e) {
      var o = e.name,
          n = e.enabled;
      return n && o === t;
    });
  }

  function H() {
    return this.state.isDestroyed = !0, B(this.modifiers, 'applyStyle') && (this.popper.removeAttribute('x-placement'), this.popper.style.position = '', this.popper.style.top = '', this.popper.style.left = '', this.popper.style.right = '', this.popper.style.bottom = '', this.popper.style.willChange = '', this.popper.style[P('transform')] = ''), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;
  }

  function A(e) {
    var t = e.ownerDocument;
    return t ? t.defaultView : window;
  }

  function M(e, t, o, i) {
    var r = 'BODY' === e.nodeName,
        p = r ? e.ownerDocument.defaultView : e;
    p.addEventListener(t, o, {
      passive: !0
    }), r || M(n(p.parentNode), t, o, i), i.push(p);
  }

  function I(e, t, o, i) {
    o.updateBound = i, A(e).addEventListener('resize', o.updateBound, {
      passive: !0
    });
    var r = n(e);
    return M(r, 'scroll', o.updateBound, o.scrollParents), o.scrollElement = r, o.eventsEnabled = !0, o;
  }

  function F() {
    this.state.eventsEnabled || (this.state = I(this.reference, this.options, this.state, this.scheduleUpdate));
  }

  function R(e, t) {
    return A(e).removeEventListener('resize', t.updateBound), t.scrollParents.forEach(function (e) {
      e.removeEventListener('scroll', t.updateBound);
    }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t;
  }

  function U() {
    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = R(this.reference, this.state));
  }

  function Y(e) {
    return '' !== e && !isNaN(parseFloat(e)) && isFinite(e);
  }

  function j(e, t) {
    Object.keys(t).forEach(function (o) {
      var n = '';
      -1 !== ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(o) && Y(t[o]) && (n = 'px'), e.style[o] = t[o] + n;
    });
  }

  function K(e, t) {
    Object.keys(t).forEach(function (o) {
      var n = t[o];
      !1 === n ? e.removeAttribute(o) : e.setAttribute(o, t[o]);
    });
  }

  function q(e, t, o) {
    var n = D(e, function (e) {
      var o = e.name;
      return o === t;
    }),
        i = !!n && e.some(function (e) {
      return e.name === o && e.enabled && e.order < n.order;
    });

    if (!i) {
      var r = '`' + t + '`';
      console.warn('`' + o + '`' + ' modifier is required by ' + r + ' modifier in order to work, be sure to include it before ' + r + '!');
    }

    return i;
  }

  function G(e) {
    return 'end' === e ? 'start' : 'start' === e ? 'end' : e;
  }

  function z(e) {
    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
        o = me.indexOf(e),
        n = me.slice(o + 1).concat(me.slice(0, o));
    return t ? n.reverse() : n;
  }

  function V(e, t, o, n) {
    var i = e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
        r = +i[1],
        p = i[2];
    if (!r) return e;

    if (0 === p.indexOf('%')) {
      var s;

      switch (p) {
        case '%p':
          s = o;
          break;

        case '%':
        case '%r':
        default:
          s = n;
      }

      var d = g(s);
      return d[t] / 100 * r;
    }

    if ('vh' === p || 'vw' === p) {
      var a;
      return a = 'vh' === p ? $(document.documentElement.clientHeight, window.innerHeight || 0) : $(document.documentElement.clientWidth, window.innerWidth || 0), a / 100 * r;
    }

    return r;
  }

  function _(e, t, o, n) {
    var i = [0, 0],
        r = -1 !== ['right', 'left'].indexOf(n),
        p = e.split(/(\+|\-)/).map(function (e) {
      return e.trim();
    }),
        s = p.indexOf(D(p, function (e) {
      return -1 !== e.search(/,|\s/);
    }));
    p[s] && -1 === p[s].indexOf(',') && console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
    var d = /\s*,\s*|\s+/,
        a = -1 === s ? [p] : [p.slice(0, s).concat([p[s].split(d)[0]]), [p[s].split(d)[1]].concat(p.slice(s + 1))];
    return a = a.map(function (e, n) {
      var i = (1 === n ? !r : r) ? 'height' : 'width',
          p = !1;
      return e.reduce(function (e, t) {
        return '' === e[e.length - 1] && -1 !== ['+', '-'].indexOf(t) ? (e[e.length - 1] = t, p = !0, e) : p ? (e[e.length - 1] += t, p = !1, e) : e.concat(t);
      }, []).map(function (e) {
        return V(e, i, t, o);
      });
    }), a.forEach(function (e, t) {
      e.forEach(function (o, n) {
        Y(o) && (i[t] += o * ('-' === e[n - 1] ? -1 : 1));
      });
    }), i;
  }

  function X(e, t) {
    var o,
        n = t.offset,
        i = e.placement,
        r = e.offsets,
        p = r.popper,
        s = r.reference,
        d = i.split('-')[0];
    return o = Y(+n) ? [+n, 0] : _(n, p, s, d), 'left' === d ? (p.top += o[0], p.left -= o[1]) : 'right' === d ? (p.top += o[0], p.left += o[1]) : 'top' === d ? (p.left += o[0], p.top -= o[1]) : 'bottom' === d && (p.left += o[0], p.top += o[1]), e.popper = p, e;
  }

  for (var J = Math.min, Q = Math.round, Z = Math.floor, $ = Math.max, ee = 'undefined' != typeof window && 'undefined' != typeof document, te = ['Edge', 'Trident', 'Firefox'], oe = 0, ne = 0; ne < te.length; ne += 1) {
    if (ee && 0 <= navigator.userAgent.indexOf(te[ne])) {
      oe = 1;
      break;
    }
  }

  var i = ee && window.Promise,
      ie = i ? function (e) {
    var t = !1;
    return function () {
      t || (t = !0, window.Promise.resolve().then(function () {
        t = !1, e();
      }));
    };
  } : function (e) {
    var t = !1;
    return function () {
      t || (t = !0, setTimeout(function () {
        t = !1, e();
      }, oe));
    };
  },
      re = ee && !!(window.MSInputMethodContext && document.documentMode),
      pe = ee && /MSIE 10/.test(navigator.userAgent),
      se = function se(e, t) {
    if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');
  },
      de = function () {
    function e(e, t) {
      for (var o, n = 0; n < t.length; n++) {
        o = t[n], o.enumerable = o.enumerable || !1, o.configurable = !0, 'value' in o && (o.writable = !0), Object.defineProperty(e, o.key, o);
      }
    }

    return function (t, o, n) {
      return o && e(t.prototype, o), n && e(t, n), t;
    };
  }(),
      ae = function ae(e, t, o) {
    return t in e ? Object.defineProperty(e, t, {
      value: o,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = o, e;
  },
      le = Object.assign || function (e) {
    for (var t, o = 1; o < arguments.length; o++) {
      for (var n in t = arguments[o], t) {
        Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
      }
    }

    return e;
  },
      fe = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'],
      me = fe.slice(3),
      he = {
    FLIP: 'flip',
    CLOCKWISE: 'clockwise',
    COUNTERCLOCKWISE: 'counterclockwise'
  },
      ce = function () {
    function t(o, n) {
      var i = this,
          r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};
      se(this, t), this.scheduleUpdate = function () {
        return requestAnimationFrame(i.update);
      }, this.update = ie(this.update.bind(this)), this.options = le({}, t.Defaults, r), this.state = {
        isDestroyed: !1,
        isCreated: !1,
        scrollParents: []
      }, this.reference = o && o.jquery ? o[0] : o, this.popper = n && n.jquery ? n[0] : n, this.options.modifiers = {}, Object.keys(le({}, t.Defaults.modifiers, r.modifiers)).forEach(function (e) {
        i.options.modifiers[e] = le({}, t.Defaults.modifiers[e] || {}, r.modifiers ? r.modifiers[e] : {});
      }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {
        return le({
          name: e
        }, i.options.modifiers[e]);
      }).sort(function (e, t) {
        return e.order - t.order;
      }), this.modifiers.forEach(function (t) {
        t.enabled && e(t.onLoad) && t.onLoad(i.reference, i.popper, i.options, t, i.state);
      }), this.update();
      var p = this.options.eventsEnabled;
      p && this.enableEventListeners(), this.state.eventsEnabled = p;
    }

    return de(t, [{
      key: 'update',
      value: function value() {
        return W.call(this);
      }
    }, {
      key: 'destroy',
      value: function value() {
        return H.call(this);
      }
    }, {
      key: 'enableEventListeners',
      value: function value() {
        return F.call(this);
      }
    }, {
      key: 'disableEventListeners',
      value: function value() {
        return U.call(this);
      }
    }]), t;
  }();

  return ce.Utils = ('undefined' == typeof window ? global : window).PopperUtils, ce.placements = fe, ce.Defaults = {
    placement: 'bottom',
    positionFixed: !1,
    eventsEnabled: !0,
    removeOnDestroy: !1,
    onCreate: function onCreate() {},
    onUpdate: function onUpdate() {},
    modifiers: {
      shift: {
        order: 100,
        enabled: !0,
        fn: function fn(e) {
          var t = e.placement,
              o = t.split('-')[0],
              n = t.split('-')[1];

          if (n) {
            var i = e.offsets,
                r = i.reference,
                p = i.popper,
                s = -1 !== ['bottom', 'top'].indexOf(o),
                d = s ? 'left' : 'top',
                a = s ? 'width' : 'height',
                l = {
              start: ae({}, d, r[d]),
              end: ae({}, d, r[d] + r[a] - p[a])
            };
            e.offsets.popper = le({}, p, l[n]);
          }

          return e;
        }
      },
      offset: {
        order: 200,
        enabled: !0,
        fn: X,
        offset: 0
      },
      preventOverflow: {
        order: 300,
        enabled: !0,
        fn: function fn(e, t) {
          var o = t.boundariesElement || p(e.instance.popper);
          e.instance.reference === o && (o = p(o));
          var n = v(e.instance.popper, e.instance.reference, t.padding, o, e.positionFixed);
          t.boundaries = n;
          var i = t.priority,
              r = e.offsets.popper,
              s = {
            primary: function primary(e) {
              var o = r[e];
              return r[e] < n[e] && !t.escapeWithReference && (o = $(r[e], n[e])), ae({}, e, o);
            },
            secondary: function secondary(e) {
              var o = 'right' === e ? 'left' : 'top',
                  i = r[o];
              return r[e] > n[e] && !t.escapeWithReference && (i = J(r[o], n[e] - ('right' === e ? r.width : r.height))), ae({}, o, i);
            }
          };
          return i.forEach(function (e) {
            var t = -1 === ['left', 'top'].indexOf(e) ? 'secondary' : 'primary';
            r = le({}, r, s[t](e));
          }), e.offsets.popper = r, e;
        },
        priority: ['left', 'right', 'top', 'bottom'],
        padding: 5,
        boundariesElement: 'scrollParent'
      },
      keepTogether: {
        order: 400,
        enabled: !0,
        fn: function fn(e) {
          var t = e.offsets,
              o = t.popper,
              n = t.reference,
              i = e.placement.split('-')[0],
              r = Z,
              p = -1 !== ['top', 'bottom'].indexOf(i),
              s = p ? 'right' : 'bottom',
              d = p ? 'left' : 'top',
              a = p ? 'width' : 'height';
          return o[s] < r(n[d]) && (e.offsets.popper[d] = r(n[d]) - o[a]), o[d] > r(n[s]) && (e.offsets.popper[d] = r(n[s])), e;
        }
      },
      arrow: {
        order: 500,
        enabled: !0,
        fn: function fn(e, o) {
          var n;
          if (!q(e.instance.modifiers, 'arrow', 'keepTogether')) return e;
          var i = o.element;

          if ('string' == typeof i) {
            if (i = e.instance.popper.querySelector(i), !i) return e;
          } else if (!e.instance.popper.contains(i)) return console.warn('WARNING: `arrow.element` must be child of its popper element!'), e;

          var r = e.placement.split('-')[0],
              p = e.offsets,
              s = p.popper,
              d = p.reference,
              a = -1 !== ['left', 'right'].indexOf(r),
              l = a ? 'height' : 'width',
              f = a ? 'Top' : 'Left',
              m = f.toLowerCase(),
              h = a ? 'left' : 'top',
              c = a ? 'bottom' : 'right',
              u = S(i)[l];
          d[c] - u < s[m] && (e.offsets.popper[m] -= s[m] - (d[c] - u)), d[m] + u > s[c] && (e.offsets.popper[m] += d[m] + u - s[c]), e.offsets.popper = g(e.offsets.popper);
          var b = d[m] + d[l] / 2 - u / 2,
              y = t(e.instance.popper),
              w = parseFloat(y['margin' + f], 10),
              E = parseFloat(y['border' + f + 'Width'], 10),
              v = b - e.offsets.popper[m] - w - E;
          return v = $(J(s[l] - u, v), 0), e.arrowElement = i, e.offsets.arrow = (n = {}, ae(n, m, Q(v)), ae(n, h, ''), n), e;
        },
        element: '[x-arrow]'
      },
      flip: {
        order: 600,
        enabled: !0,
        fn: function fn(e, t) {
          if (B(e.instance.modifiers, 'inner')) return e;
          if (e.flipped && e.placement === e.originalPlacement) return e;
          var o = v(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement, e.positionFixed),
              n = e.placement.split('-')[0],
              i = T(n),
              r = e.placement.split('-')[1] || '',
              p = [];

          switch (t.behavior) {
            case he.FLIP:
              p = [n, i];
              break;

            case he.CLOCKWISE:
              p = z(n);
              break;

            case he.COUNTERCLOCKWISE:
              p = z(n, !0);
              break;

            default:
              p = t.behavior;
          }

          return p.forEach(function (s, d) {
            if (n !== s || p.length === d + 1) return e;
            n = e.placement.split('-')[0], i = T(n);
            var a = e.offsets.popper,
                l = e.offsets.reference,
                f = Z,
                m = 'left' === n && f(a.right) > f(l.left) || 'right' === n && f(a.left) < f(l.right) || 'top' === n && f(a.bottom) > f(l.top) || 'bottom' === n && f(a.top) < f(l.bottom),
                h = f(a.left) < f(o.left),
                c = f(a.right) > f(o.right),
                g = f(a.top) < f(o.top),
                u = f(a.bottom) > f(o.bottom),
                b = 'left' === n && h || 'right' === n && c || 'top' === n && g || 'bottom' === n && u,
                y = -1 !== ['top', 'bottom'].indexOf(n),
                w = !!t.flipVariations && (y && 'start' === r && h || y && 'end' === r && c || !y && 'start' === r && g || !y && 'end' === r && u);
            (m || b || w) && (e.flipped = !0, (m || b) && (n = p[d + 1]), w && (r = G(r)), e.placement = n + (r ? '-' + r : ''), e.offsets.popper = le({}, e.offsets.popper, C(e.instance.popper, e.offsets.reference, e.placement)), e = k(e.instance.modifiers, e, 'flip'));
          }), e;
        },
        behavior: 'flip',
        padding: 5,
        boundariesElement: 'viewport'
      },
      inner: {
        order: 700,
        enabled: !1,
        fn: function fn(e) {
          var t = e.placement,
              o = t.split('-')[0],
              n = e.offsets,
              i = n.popper,
              r = n.reference,
              p = -1 !== ['left', 'right'].indexOf(o),
              s = -1 === ['top', 'left'].indexOf(o);
          return i[p ? 'left' : 'top'] = r[o] - (s ? i[p ? 'width' : 'height'] : 0), e.placement = T(t), e.offsets.popper = g(i), e;
        }
      },
      hide: {
        order: 800,
        enabled: !0,
        fn: function fn(e) {
          if (!q(e.instance.modifiers, 'hide', 'preventOverflow')) return e;
          var t = e.offsets.reference,
              o = D(e.instance.modifiers, function (e) {
            return 'preventOverflow' === e.name;
          }).boundaries;

          if (t.bottom < o.top || t.left > o.right || t.top > o.bottom || t.right < o.left) {
            if (!0 === e.hide) return e;
            e.hide = !0, e.attributes['x-out-of-boundaries'] = '';
          } else {
            if (!1 === e.hide) return e;
            e.hide = !1, e.attributes['x-out-of-boundaries'] = !1;
          }

          return e;
        }
      },
      computeStyle: {
        order: 850,
        enabled: !0,
        fn: function fn(e, t) {
          var o = t.x,
              n = t.y,
              i = e.offsets.popper,
              r = D(e.instance.modifiers, function (e) {
            return 'applyStyle' === e.name;
          }).gpuAcceleration;
          void 0 !== r && console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
          var s,
              d,
              a = void 0 === r ? t.gpuAcceleration : r,
              l = p(e.instance.popper),
              f = u(l),
              m = {
            position: i.position
          },
              h = {
            left: Z(i.left),
            top: Q(i.top),
            bottom: Q(i.bottom),
            right: Z(i.right)
          },
              c = 'bottom' === o ? 'top' : 'bottom',
              g = 'right' === n ? 'left' : 'right',
              b = P('transform');
          if (d = 'bottom' == c ? -f.height + h.bottom : h.top, s = 'right' == g ? -f.width + h.right : h.left, a && b) m[b] = 'translate3d(' + s + 'px, ' + d + 'px, 0)', m[c] = 0, m[g] = 0, m.willChange = 'transform';else {
            var y = 'bottom' == c ? -1 : 1,
                w = 'right' == g ? -1 : 1;
            m[c] = d * y, m[g] = s * w, m.willChange = c + ', ' + g;
          }
          var E = {
            "x-placement": e.placement
          };
          return e.attributes = le({}, E, e.attributes), e.styles = le({}, m, e.styles), e.arrowStyles = le({}, e.offsets.arrow, e.arrowStyles), e;
        },
        gpuAcceleration: !0,
        x: 'bottom',
        y: 'right'
      },
      applyStyle: {
        order: 900,
        enabled: !0,
        fn: function fn(e) {
          return j(e.instance.popper, e.styles), K(e.instance.popper, e.attributes), e.arrowElement && Object.keys(e.arrowStyles).length && j(e.arrowElement, e.arrowStyles), e;
        },
        onLoad: function onLoad(e, t, o, n, i) {
          var r = L(i, t, e, o.positionFixed),
              p = O(o.placement, r, t, e, o.modifiers.flip.boundariesElement, o.modifiers.flip.padding);
          return t.setAttribute('x-placement', p), j(t, {
            position: o.positionFixed ? 'fixed' : 'absolute'
          }), o;
        },
        gpuAcceleration: void 0
      }
    }
  }, ce;
});
/*!
  * Bootstrap v4.0.0 (https://getbootstrap.com)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */


(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof2(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('jquery'), require('popper.js')) : typeof define === 'function' && define.amd ? define(['exports', 'jquery', 'popper.js'], factory) : factory(global.bootstrap = {}, global.jQuery, global.Popper);
})(this, function (exports, $, Popper) {
  'use strict';

  $ = $ && $.hasOwnProperty('default') ? $['default'] : $;
  Popper = Popper && Popper.hasOwnProperty('default') ? Popper['default'] : Popper;

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.0.0): util.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */


  var Util = function ($$$1) {
    /**
     * ------------------------------------------------------------------------
     * Private TransitionEnd Helpers
     * ------------------------------------------------------------------------
     */
    var transition = false;
    var MAX_UID = 1000000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

    function toType(obj) {
      return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    }

    function getSpecialTransitionEndEvent() {
      return {
        bindType: transition.end,
        delegateType: transition.end,
        handle: function handle(event) {
          if ($$$1(event.target).is(this)) {
            return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
          }

          return undefined; // eslint-disable-line no-undefined
        }
      };
    }

    function transitionEndTest() {
      if (typeof window !== 'undefined' && window.QUnit) {
        return false;
      }

      return {
        end: 'transitionend'
      };
    }

    function transitionEndEmulator(duration) {
      var _this = this;

      var called = false;
      $$$1(this).one(Util.TRANSITION_END, function () {
        called = true;
      });
      setTimeout(function () {
        if (!called) {
          Util.triggerTransitionEnd(_this);
        }
      }, duration);
      return this;
    }

    function setTransitionEndSupport() {
      transition = transitionEndTest();
      $$$1.fn.emulateTransitionEnd = transitionEndEmulator;

      if (Util.supportsTransitionEnd()) {
        $$$1.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
      }
    }

    function escapeId(selector) {
      // We escape IDs in case of special selectors (selector = '#myId:something')
      // $.escapeSelector does not exist in jQuery < 3
      selector = typeof $$$1.escapeSelector === 'function' ? $$$1.escapeSelector(selector).substr(1) : selector.replace(/(:|\.|\[|\]|,|=|@)/g, '\\$1');
      return selector;
    }
    /**
     * --------------------------------------------------------------------------
     * Public Util Api
     * --------------------------------------------------------------------------
     */


    var Util = {
      TRANSITION_END: 'bsTransitionEnd',
      getUID: function getUID(prefix) {
        do {
          // eslint-disable-next-line no-bitwise
          prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
        } while (document.getElementById(prefix));

        return prefix;
      },
      getSelectorFromElement: function getSelectorFromElement(element) {
        var selector = element.getAttribute('data-target');

        if (!selector || selector === '#') {
          selector = element.getAttribute('href') || '';
        } // If it's an ID


        if (selector.charAt(0) === '#') {
          selector = escapeId(selector);
        }

        try {
          var $selector = $$$1(document).find(selector);
          return $selector.length > 0 ? selector : null;
        } catch (err) {
          return null;
        }
      },
      reflow: function reflow(element) {
        return element.offsetHeight;
      },
      triggerTransitionEnd: function triggerTransitionEnd(element) {
        $$$1(element).trigger(transition.end);
      },
      supportsTransitionEnd: function supportsTransitionEnd() {
        return Boolean(transition);
      },
      isElement: function isElement(obj) {
        return (obj[0] || obj).nodeType;
      },
      typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
        for (var property in configTypes) {
          if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
            var expectedTypes = configTypes[property];
            var value = config[property];
            var valueType = value && Util.isElement(value) ? 'element' : toType(value);

            if (!new RegExp(expectedTypes).test(valueType)) {
              throw new Error(componentName.toUpperCase() + ": " + ("Option \"" + property + "\" provided type \"" + valueType + "\" ") + ("but expected type \"" + expectedTypes + "\"."));
            }
          }
        }
      }
    };
    setTransitionEndSupport();
    return Util;
  }($);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.0.0): alert.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */


  var Alert = function ($$$1) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'alert';
    var VERSION = '4.0.0';
    var DATA_KEY = 'bs.alert';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
    var TRANSITION_DURATION = 150;
    var Selector = {
      DISMISS: '[data-dismiss="alert"]'
    };
    var Event = {
      CLOSE: "close" + EVENT_KEY,
      CLOSED: "closed" + EVENT_KEY,
      CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
      ALERT: 'alert',
      FADE: 'fade',
      SHOW: 'show'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

    };

    var Alert = /*#__PURE__*/function () {
      function Alert(element) {
        this._element = element;
      } // Getters


      var _proto = Alert.prototype; // Public

      _proto.close = function close(element) {
        element = element || this._element;

        var rootElement = this._getRootElement(element);

        var customEvent = this._triggerCloseEvent(rootElement);

        if (customEvent.isDefaultPrevented()) {
          return;
        }

        this._removeElement(rootElement);
      };

      _proto.dispose = function dispose() {
        $$$1.removeData(this._element, DATA_KEY);
        this._element = null;
      }; // Private


      _proto._getRootElement = function _getRootElement(element) {
        var selector = Util.getSelectorFromElement(element);
        var parent = false;

        if (selector) {
          parent = $$$1(selector)[0];
        }

        if (!parent) {
          parent = $$$1(element).closest("." + ClassName.ALERT)[0];
        }

        return parent;
      };

      _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
        var closeEvent = $$$1.Event(Event.CLOSE);
        $$$1(element).trigger(closeEvent);
        return closeEvent;
      };

      _proto._removeElement = function _removeElement(element) {
        var _this = this;

        $$$1(element).removeClass(ClassName.SHOW);

        if (!Util.supportsTransitionEnd() || !$$$1(element).hasClass(ClassName.FADE)) {
          this._destroyElement(element);

          return;
        }

        $$$1(element).one(Util.TRANSITION_END, function (event) {
          return _this._destroyElement(element, event);
        }).emulateTransitionEnd(TRANSITION_DURATION);
      };

      _proto._destroyElement = function _destroyElement(element) {
        $$$1(element).detach().trigger(Event.CLOSED).remove();
      }; // Static


      Alert._jQueryInterface = function _jQueryInterface(config) {
        return this.each(function () {
          var $element = $$$1(this);
          var data = $element.data(DATA_KEY);

          if (!data) {
            data = new Alert(this);
            $element.data(DATA_KEY, data);
          }

          if (config === 'close') {
            data[config](this);
          }
        });
      };

      Alert._handleDismiss = function _handleDismiss(alertInstance) {
        return function (event) {
          if (event) {
            event.preventDefault();
          }

          alertInstance.close(this);
        };
      };

      _createClass(Alert, null, [{
        key: "VERSION",
        get: function get() {
          return VERSION;
        }
      }]);

      return Alert;
    }();
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */


    $$$1(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */

    $$$1.fn[NAME] = Alert._jQueryInterface;
    $$$1.fn[NAME].Constructor = Alert;

    $$$1.fn[NAME].noConflict = function () {
      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
      return Alert._jQueryInterface;
    };

    return Alert;
  }($);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.0.0): button.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */


  var Button = function ($$$1) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'button';
    var VERSION = '4.0.0';
    var DATA_KEY = 'bs.button';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
    var ClassName = {
      ACTIVE: 'active',
      BUTTON: 'btn',
      FOCUS: 'focus'
    };
    var Selector = {
      DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
      DATA_TOGGLE: '[data-toggle="buttons"]',
      INPUT: 'input',
      ACTIVE: '.active',
      BUTTON: '.btn'
    };
    var Event = {
      CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
      FOCUS_BLUR_DATA_API: "focus" + EVENT_KEY + DATA_API_KEY + " " + ("blur" + EVENT_KEY + DATA_API_KEY)
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

    };

    var Button = /*#__PURE__*/function () {
      function Button(element) {
        this._element = element;
      } // Getters


      var _proto = Button.prototype; // Public

      _proto.toggle = function toggle() {
        var triggerChangeEvent = true;
        var addAriaPressed = true;
        var rootElement = $$$1(this._element).closest(Selector.DATA_TOGGLE)[0];

        if (rootElement) {
          var input = $$$1(this._element).find(Selector.INPUT)[0];

          if (input) {
            if (input.type === 'radio') {
              if (input.checked && $$$1(this._element).hasClass(ClassName.ACTIVE)) {
                triggerChangeEvent = false;
              } else {
                var activeElement = $$$1(rootElement).find(Selector.ACTIVE)[0];

                if (activeElement) {
                  $$$1(activeElement).removeClass(ClassName.ACTIVE);
                }
              }
            }

            if (triggerChangeEvent) {
              if (input.hasAttribute('disabled') || rootElement.hasAttribute('disabled') || input.classList.contains('disabled') || rootElement.classList.contains('disabled')) {
                return;
              }

              input.checked = !$$$1(this._element).hasClass(ClassName.ACTIVE);
              $$$1(input).trigger('change');
            }

            input.focus();
            addAriaPressed = false;
          }
        }

        if (addAriaPressed) {
          this._element.setAttribute('aria-pressed', !$$$1(this._element).hasClass(ClassName.ACTIVE));
        }

        if (triggerChangeEvent) {
          $$$1(this._element).toggleClass(ClassName.ACTIVE);
        }
      };

      _proto.dispose = function dispose() {
        $$$1.removeData(this._element, DATA_KEY);
        this._element = null;
      }; // Static


      Button._jQueryInterface = function _jQueryInterface(config) {
        return this.each(function () {
          var data = $$$1(this).data(DATA_KEY);

          if (!data) {
            data = new Button(this);
            $$$1(this).data(DATA_KEY, data);
          }

          if (config === 'toggle') {
            data[config]();
          }
        });
      };

      _createClass(Button, null, [{
        key: "VERSION",
        get: function get() {
          return VERSION;
        }
      }]);

      return Button;
    }();
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */


    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
      event.preventDefault();
      var button = event.target;

      if (!$$$1(button).hasClass(ClassName.BUTTON)) {
        button = $$$1(button).closest(Selector.BUTTON);
      }

      Button._jQueryInterface.call($$$1(button), 'toggle');
    }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {
      var button = $$$1(event.target).closest(Selector.BUTTON)[0];
      $$$1(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */

    $$$1.fn[NAME] = Button._jQueryInterface;
    $$$1.fn[NAME].Constructor = Button;

    $$$1.fn[NAME].noConflict = function () {
      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
      return Button._jQueryInterface;
    };

    return Button;
  }($);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.0.0): carousel.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */


  var Carousel = function ($$$1) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'carousel';
    var VERSION = '4.0.0';
    var DATA_KEY = 'bs.carousel';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
    var TRANSITION_DURATION = 600;
    var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

    var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

    var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

    var Default = {
      interval: 5000,
      keyboard: true,
      slide: false,
      pause: 'hover',
      wrap: true
    };
    var DefaultType = {
      interval: '(number|boolean)',
      keyboard: 'boolean',
      slide: '(boolean|string)',
      pause: '(string|boolean)',
      wrap: 'boolean'
    };
    var Direction = {
      NEXT: 'next',
      PREV: 'prev',
      LEFT: 'left',
      RIGHT: 'right'
    };
    var Event = {
      SLIDE: "slide" + EVENT_KEY,
      SLID: "slid" + EVENT_KEY,
      KEYDOWN: "keydown" + EVENT_KEY,
      MOUSEENTER: "mouseenter" + EVENT_KEY,
      MOUSELEAVE: "mouseleave" + EVENT_KEY,
      TOUCHEND: "touchend" + EVENT_KEY,
      LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY,
      CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
      CAROUSEL: 'carousel',
      ACTIVE: 'active',
      SLIDE: 'slide',
      RIGHT: 'carousel-item-right',
      LEFT: 'carousel-item-left',
      NEXT: 'carousel-item-next',
      PREV: 'carousel-item-prev',
      ITEM: 'carousel-item'
    };
    var Selector = {
      ACTIVE: '.active',
      ACTIVE_ITEM: '.active.carousel-item',
      ITEM: '.carousel-item',
      NEXT_PREV: '.carousel-item-next, .carousel-item-prev',
      INDICATORS: '.carousel-indicators',
      DATA_SLIDE: '[data-slide], [data-slide-to]',
      DATA_RIDE: '[data-ride="carousel"]'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

    };

    var Carousel = /*#__PURE__*/function () {
      function Carousel(element, config) {
        this._items = null;
        this._interval = null;
        this._activeElement = null;
        this._isPaused = false;
        this._isSliding = false;
        this.touchTimeout = null;
        this._config = this._getConfig(config);
        this._element = $$$1(element)[0];
        this._indicatorsElement = $$$1(this._element).find(Selector.INDICATORS)[0];

        this._addEventListeners();
      } // Getters


      var _proto = Carousel.prototype; // Public

      _proto.next = function next() {
        if (!this._isSliding) {
          this._slide(Direction.NEXT);
        }
      };

      _proto.nextWhenVisible = function nextWhenVisible() {
        // Don't call next when the page isn't visible
        // or the carousel or its parent isn't visible
        if (!document.hidden && $$$1(this._element).is(':visible') && $$$1(this._element).css('visibility') !== 'hidden') {
          this.next();
        }
      };

      _proto.prev = function prev() {
        if (!this._isSliding) {
          this._slide(Direction.PREV);
        }
      };

      _proto.pause = function pause(event) {
        if (!event) {
          this._isPaused = true;
        }

        if ($$$1(this._element).find(Selector.NEXT_PREV)[0] && Util.supportsTransitionEnd()) {
          Util.triggerTransitionEnd(this._element);
          this.cycle(true);
        }

        clearInterval(this._interval);
        this._interval = null;
      };

      _proto.cycle = function cycle(event) {
        if (!event) {
          this._isPaused = false;
        }

        if (this._interval) {
          clearInterval(this._interval);
          this._interval = null;
        }

        if (this._config.interval && !this._isPaused) {
          this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
        }
      };

      _proto.to = function to(index) {
        var _this = this;

        this._activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];

        var activeIndex = this._getItemIndex(this._activeElement);

        if (index > this._items.length - 1 || index < 0) {
          return;
        }

        if (this._isSliding) {
          $$$1(this._element).one(Event.SLID, function () {
            return _this.to(index);
          });
          return;
        }

        if (activeIndex === index) {
          this.pause();
          this.cycle();
          return;
        }

        var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;

        this._slide(direction, this._items[index]);
      };

      _proto.dispose = function dispose() {
        $$$1(this._element).off(EVENT_KEY);
        $$$1.removeData(this._element, DATA_KEY);
        this._items = null;
        this._config = null;
        this._element = null;
        this._interval = null;
        this._isPaused = null;
        this._isSliding = null;
        this._activeElement = null;
        this._indicatorsElement = null;
      }; // Private


      _proto._getConfig = function _getConfig(config) {
        config = _extends({}, Default, config);
        Util.typeCheckConfig(NAME, config, DefaultType);
        return config;
      };

      _proto._addEventListeners = function _addEventListeners() {
        var _this2 = this;

        if (this._config.keyboard) {
          $$$1(this._element).on(Event.KEYDOWN, function (event) {
            return _this2._keydown(event);
          });
        }

        if (this._config.pause === 'hover') {
          $$$1(this._element).on(Event.MOUSEENTER, function (event) {
            return _this2.pause(event);
          }).on(Event.MOUSELEAVE, function (event) {
            return _this2.cycle(event);
          });

          if ('ontouchstart' in document.documentElement) {
            // If it's a touch-enabled device, mouseenter/leave are fired as
            // part of the mouse compatibility events on first tap - the carousel
            // would stop cycling until user tapped out of it;
            // here, we listen for touchend, explicitly pause the carousel
            // (as if it's the second time we tap on it, mouseenter compat event
            // is NOT fired) and after a timeout (to allow for mouse compatibility
            // events to fire) we explicitly restart cycling
            $$$1(this._element).on(Event.TOUCHEND, function () {
              _this2.pause();

              if (_this2.touchTimeout) {
                clearTimeout(_this2.touchTimeout);
              }

              _this2.touchTimeout = setTimeout(function (event) {
                return _this2.cycle(event);
              }, TOUCHEVENT_COMPAT_WAIT + _this2._config.interval);
            });
          }
        }
      };

      _proto._keydown = function _keydown(event) {
        if (/input|textarea/i.test(event.target.tagName)) {
          return;
        }

        switch (event.which) {
          case ARROW_LEFT_KEYCODE:
            event.preventDefault();
            this.prev();
            break;

          case ARROW_RIGHT_KEYCODE:
            event.preventDefault();
            this.next();
            break;

          default:
        }
      };

      _proto._getItemIndex = function _getItemIndex(element) {
        this._items = $$$1.makeArray($$$1(element).parent().find(Selector.ITEM));
        return this._items.indexOf(element);
      };

      _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
        var isNextDirection = direction === Direction.NEXT;
        var isPrevDirection = direction === Direction.PREV;

        var activeIndex = this._getItemIndex(activeElement);

        var lastItemIndex = this._items.length - 1;
        var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

        if (isGoingToWrap && !this._config.wrap) {
          return activeElement;
        }

        var delta = direction === Direction.PREV ? -1 : 1;
        var itemIndex = (activeIndex + delta) % this._items.length;
        return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
      };

      _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
        var targetIndex = this._getItemIndex(relatedTarget);

        var fromIndex = this._getItemIndex($$$1(this._element).find(Selector.ACTIVE_ITEM)[0]);

        var slideEvent = $$$1.Event(Event.SLIDE, {
          relatedTarget: relatedTarget,
          direction: eventDirectionName,
          from: fromIndex,
          to: targetIndex
        });
        $$$1(this._element).trigger(slideEvent);
        return slideEvent;
      };

      _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
        if (this._indicatorsElement) {
          $$$1(this._indicatorsElement).find(Selector.ACTIVE).removeClass(ClassName.ACTIVE);

          var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

          if (nextIndicator) {
            $$$1(nextIndicator).addClass(ClassName.ACTIVE);
          }
        }
      };

      _proto._slide = function _slide(direction, element) {
        var _this3 = this;

        var activeElement = $$$1(this._element).find(Selector.ACTIVE_ITEM)[0];

        var activeElementIndex = this._getItemIndex(activeElement);

        var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);

        var nextElementIndex = this._getItemIndex(nextElement);

        var isCycling = Boolean(this._interval);
        var directionalClassName;
        var orderClassName;
        var eventDirectionName;

        if (direction === Direction.NEXT) {
          directionalClassName = ClassName.LEFT;
          orderClassName = ClassName.NEXT;
          eventDirectionName = Direction.LEFT;
        } else {
          directionalClassName = ClassName.RIGHT;
          orderClassName = ClassName.PREV;
          eventDirectionName = Direction.RIGHT;
        }

        if (nextElement && $$$1(nextElement).hasClass(ClassName.ACTIVE)) {
          this._isSliding = false;
          return;
        }

        var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

        if (slideEvent.isDefaultPrevented()) {
          return;
        }

        if (!activeElement || !nextElement) {
          // Some weirdness is happening, so we bail
          return;
        }

        this._isSliding = true;

        if (isCycling) {
          this.pause();
        }

        this._setActiveIndicatorElement(nextElement);

        var slidEvent = $$$1.Event(Event.SLID, {
          relatedTarget: nextElement,
          direction: eventDirectionName,
          from: activeElementIndex,
          to: nextElementIndex
        });

        if (Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.SLIDE)) {
          $$$1(nextElement).addClass(orderClassName);
          Util.reflow(nextElement);
          $$$1(activeElement).addClass(directionalClassName);
          $$$1(nextElement).addClass(directionalClassName);
          $$$1(activeElement).one(Util.TRANSITION_END, function () {
            $$$1(nextElement).removeClass(directionalClassName + " " + orderClassName).addClass(ClassName.ACTIVE);
            $$$1(activeElement).removeClass(ClassName.ACTIVE + " " + orderClassName + " " + directionalClassName);
            _this3._isSliding = false;
            setTimeout(function () {
              return $$$1(_this3._element).trigger(slidEvent);
            }, 0);
          }).emulateTransitionEnd(TRANSITION_DURATION);
        } else {
          $$$1(activeElement).removeClass(ClassName.ACTIVE);
          $$$1(nextElement).addClass(ClassName.ACTIVE);
          this._isSliding = false;
          $$$1(this._element).trigger(slidEvent);
        }

        if (isCycling) {
          this.cycle();
        }
      }; // Static


      Carousel._jQueryInterface = function _jQueryInterface(config) {
        return this.each(function () {
          var data = $$$1(this).data(DATA_KEY);

          var _config = _extends({}, Default, $$$1(this).data());

          if (_typeof2(config) === 'object') {
            _config = _extends({}, _config, config);
          }

          var action = typeof config === 'string' ? config : _config.slide;

          if (!data) {
            data = new Carousel(this, _config);
            $$$1(this).data(DATA_KEY, data);
          }

          if (typeof config === 'number') {
            data.to(config);
          } else if (typeof action === 'string') {
            if (typeof data[action] === 'undefined') {
              throw new TypeError("No method named \"" + action + "\"");
            }

            data[action]();
          } else if (_config.interval) {
            data.pause();
            data.cycle();
          }
        });
      };

      Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
        var selector = Util.getSelectorFromElement(this);

        if (!selector) {
          return;
        }

        var target = $$$1(selector)[0];

        if (!target || !$$$1(target).hasClass(ClassName.CAROUSEL)) {
          return;
        }

        var config = _extends({}, $$$1(target).data(), $$$1(this).data());

        var slideIndex = this.getAttribute('data-slide-to');

        if (slideIndex) {
          config.interval = false;
        }

        Carousel._jQueryInterface.call($$$1(target), config);

        if (slideIndex) {
          $$$1(target).data(DATA_KEY).to(slideIndex);
        }

        event.preventDefault();
      };

      _createClass(Carousel, null, [{
        key: "VERSION",
        get: function get() {
          return VERSION;
        }
      }, {
        key: "Default",
        get: function get() {
          return Default;
        }
      }]);

      return Carousel;
    }();
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */


    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);
    $$$1(window).on(Event.LOAD_DATA_API, function () {
      $$$1(Selector.DATA_RIDE).each(function () {
        var $carousel = $$$1(this);

        Carousel._jQueryInterface.call($carousel, $carousel.data());
      });
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */

    $$$1.fn[NAME] = Carousel._jQueryInterface;
    $$$1.fn[NAME].Constructor = Carousel;

    $$$1.fn[NAME].noConflict = function () {
      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
      return Carousel._jQueryInterface;
    };

    return Carousel;
  }($);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.0.0): collapse.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */


  var Collapse = function ($$$1) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'collapse';
    var VERSION = '4.0.0';
    var DATA_KEY = 'bs.collapse';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
    var TRANSITION_DURATION = 600;
    var Default = {
      toggle: true,
      parent: ''
    };
    var DefaultType = {
      toggle: 'boolean',
      parent: '(string|element)'
    };
    var Event = {
      SHOW: "show" + EVENT_KEY,
      SHOWN: "shown" + EVENT_KEY,
      HIDE: "hide" + EVENT_KEY,
      HIDDEN: "hidden" + EVENT_KEY,
      CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
      SHOW: 'show',
      COLLAPSE: 'collapse',
      COLLAPSING: 'collapsing',
      COLLAPSED: 'collapsed'
    };
    var Dimension = {
      WIDTH: 'width',
      HEIGHT: 'height'
    };
    var Selector = {
      ACTIVES: '.show, .collapsing',
      DATA_TOGGLE: '[data-toggle="collapse"]'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

    };

    var Collapse = /*#__PURE__*/function () {
      function Collapse(element, config) {
        this._isTransitioning = false;
        this._element = element;
        this._config = this._getConfig(config);
        this._triggerArray = $$$1.makeArray($$$1("[data-toggle=\"collapse\"][href=\"#" + element.id + "\"]," + ("[data-toggle=\"collapse\"][data-target=\"#" + element.id + "\"]")));
        var tabToggles = $$$1(Selector.DATA_TOGGLE);

        for (var i = 0; i < tabToggles.length; i++) {
          var elem = tabToggles[i];
          var selector = Util.getSelectorFromElement(elem);

          if (selector !== null && $$$1(selector).filter(element).length > 0) {
            this._selector = selector;

            this._triggerArray.push(elem);
          }
        }

        this._parent = this._config.parent ? this._getParent() : null;

        if (!this._config.parent) {
          this._addAriaAndCollapsedClass(this._element, this._triggerArray);
        }

        if (this._config.toggle) {
          this.toggle();
        }
      } // Getters


      var _proto = Collapse.prototype; // Public

      _proto.toggle = function toggle() {
        if ($$$1(this._element).hasClass(ClassName.SHOW)) {
          this.hide();
        } else {
          this.show();
        }
      };

      _proto.show = function show() {
        var _this = this;

        if (this._isTransitioning || $$$1(this._element).hasClass(ClassName.SHOW)) {
          return;
        }

        var actives;
        var activesData;

        if (this._parent) {
          actives = $$$1.makeArray($$$1(this._parent).find(Selector.ACTIVES).filter("[data-parent=\"" + this._config.parent + "\"]"));

          if (actives.length === 0) {
            actives = null;
          }
        }

        if (actives) {
          activesData = $$$1(actives).not(this._selector).data(DATA_KEY);

          if (activesData && activesData._isTransitioning) {
            return;
          }
        }

        var startEvent = $$$1.Event(Event.SHOW);
        $$$1(this._element).trigger(startEvent);

        if (startEvent.isDefaultPrevented()) {
          return;
        }

        if (actives) {
          Collapse._jQueryInterface.call($$$1(actives).not(this._selector), 'hide');

          if (!activesData) {
            $$$1(actives).data(DATA_KEY, null);
          }
        }

        var dimension = this._getDimension();

        $$$1(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);
        this._element.style[dimension] = 0;

        if (this._triggerArray.length > 0) {
          $$$1(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);
        }

        this.setTransitioning(true);

        var complete = function complete() {
          $$$1(_this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);
          _this._element.style[dimension] = '';

          _this.setTransitioning(false);

          $$$1(_this._element).trigger(Event.SHOWN);
        };

        if (!Util.supportsTransitionEnd()) {
          complete();
          return;
        }

        var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
        var scrollSize = "scroll" + capitalizedDimension;
        $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
        this._element.style[dimension] = this._element[scrollSize] + "px";
      };

      _proto.hide = function hide() {
        var _this2 = this;

        if (this._isTransitioning || !$$$1(this._element).hasClass(ClassName.SHOW)) {
          return;
        }

        var startEvent = $$$1.Event(Event.HIDE);
        $$$1(this._element).trigger(startEvent);

        if (startEvent.isDefaultPrevented()) {
          return;
        }

        var dimension = this._getDimension();

        this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
        Util.reflow(this._element);
        $$$1(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);

        if (this._triggerArray.length > 0) {
          for (var i = 0; i < this._triggerArray.length; i++) {
            var trigger = this._triggerArray[i];
            var selector = Util.getSelectorFromElement(trigger);

            if (selector !== null) {
              var $elem = $$$1(selector);

              if (!$elem.hasClass(ClassName.SHOW)) {
                $$$1(trigger).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);
              }
            }
          }
        }

        this.setTransitioning(true);

        var complete = function complete() {
          _this2.setTransitioning(false);

          $$$1(_this2._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);
        };

        this._element.style[dimension] = '';

        if (!Util.supportsTransitionEnd()) {
          complete();
          return;
        }

        $$$1(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
      };

      _proto.setTransitioning = function setTransitioning(isTransitioning) {
        this._isTransitioning = isTransitioning;
      };

      _proto.dispose = function dispose() {
        $$$1.removeData(this._element, DATA_KEY);
        this._config = null;
        this._parent = null;
        this._element = null;
        this._triggerArray = null;
        this._isTransitioning = null;
      }; // Private


      _proto._getConfig = function _getConfig(config) {
        config = _extends({}, Default, config);
        config.toggle = Boolean(config.toggle); // Coerce string values

        Util.typeCheckConfig(NAME, config, DefaultType);
        return config;
      };

      _proto._getDimension = function _getDimension() {
        var hasWidth = $$$1(this._element).hasClass(Dimension.WIDTH);
        return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
      };

      _proto._getParent = function _getParent() {
        var _this3 = this;

        var parent = null;

        if (Util.isElement(this._config.parent)) {
          parent = this._config.parent; // It's a jQuery object

          if (typeof this._config.parent.jquery !== 'undefined') {
            parent = this._config.parent[0];
          }
        } else {
          parent = $$$1(this._config.parent)[0];
        }

        var selector = "[data-toggle=\"collapse\"][data-parent=\"" + this._config.parent + "\"]";
        $$$1(parent).find(selector).each(function (i, element) {
          _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
        });
        return parent;
      };

      _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
        if (element) {
          var isOpen = $$$1(element).hasClass(ClassName.SHOW);

          if (triggerArray.length > 0) {
            $$$1(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
          }
        }
      }; // Static


      Collapse._getTargetFromElement = function _getTargetFromElement(element) {
        var selector = Util.getSelectorFromElement(element);
        return selector ? $$$1(selector)[0] : null;
      };

      Collapse._jQueryInterface = function _jQueryInterface(config) {
        return this.each(function () {
          var $this = $$$1(this);
          var data = $this.data(DATA_KEY);

          var _config = _extends({}, Default, $this.data(), _typeof2(config) === 'object' && config);

          if (!data && _config.toggle && /show|hide/.test(config)) {
            _config.toggle = false;
          }

          if (!data) {
            data = new Collapse(this, _config);
            $this.data(DATA_KEY, data);
          }

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"" + config + "\"");
            }

            data[config]();
          }
        });
      };

      _createClass(Collapse, null, [{
        key: "VERSION",
        get: function get() {
          return VERSION;
        }
      }, {
        key: "Default",
        get: function get() {
          return Default;
        }
      }]);

      return Collapse;
    }();
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */


    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
      // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
      if (event.currentTarget.tagName === 'A') {
        event.preventDefault();
      }

      var $trigger = $$$1(this);
      var selector = Util.getSelectorFromElement(this);
      $$$1(selector).each(function () {
        var $target = $$$1(this);
        var data = $target.data(DATA_KEY);
        var config = data ? 'toggle' : $trigger.data();

        Collapse._jQueryInterface.call($target, config);
      });
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */

    $$$1.fn[NAME] = Collapse._jQueryInterface;
    $$$1.fn[NAME].Constructor = Collapse;

    $$$1.fn[NAME].noConflict = function () {
      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
      return Collapse._jQueryInterface;
    };

    return Collapse;
  }($);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.0.0): dropdown.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */


  var Dropdown = function ($$$1) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'dropdown';
    var VERSION = '4.0.0';
    var DATA_KEY = 'bs.dropdown';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
    var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

    var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

    var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

    var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

    var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

    var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

    var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE);
    var Event = {
      HIDE: "hide" + EVENT_KEY,
      HIDDEN: "hidden" + EVENT_KEY,
      SHOW: "show" + EVENT_KEY,
      SHOWN: "shown" + EVENT_KEY,
      CLICK: "click" + EVENT_KEY,
      CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY,
      KEYDOWN_DATA_API: "keydown" + EVENT_KEY + DATA_API_KEY,
      KEYUP_DATA_API: "keyup" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
      DISABLED: 'disabled',
      SHOW: 'show',
      DROPUP: 'dropup',
      DROPRIGHT: 'dropright',
      DROPLEFT: 'dropleft',
      MENURIGHT: 'dropdown-menu-right',
      MENULEFT: 'dropdown-menu-left',
      POSITION_STATIC: 'position-static'
    };
    var Selector = {
      DATA_TOGGLE: '[data-toggle="dropdown"]',
      FORM_CHILD: '.dropdown form',
      MENU: '.dropdown-menu',
      NAVBAR_NAV: '.navbar-nav',
      VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled)'
    };
    var AttachmentMap = {
      TOP: 'top-start',
      TOPEND: 'top-end',
      BOTTOM: 'bottom-start',
      BOTTOMEND: 'bottom-end',
      RIGHT: 'right-start',
      RIGHTEND: 'right-end',
      LEFT: 'left-start',
      LEFTEND: 'left-end'
    };
    var Default = {
      offset: 0,
      flip: true,
      boundary: 'scrollParent'
    };
    var DefaultType = {
      offset: '(number|string|function)',
      flip: 'boolean',
      boundary: '(string|element)'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

    };

    var Dropdown = /*#__PURE__*/function () {
      function Dropdown(element, config) {
        this._element = element;
        this._popper = null;
        this._config = this._getConfig(config);
        this._menu = this._getMenuElement();
        this._inNavbar = this._detectNavbar();

        this._addEventListeners();
      } // Getters


      var _proto = Dropdown.prototype; // Public

      _proto.toggle = function toggle() {
        if (this._element.disabled || $$$1(this._element).hasClass(ClassName.DISABLED)) {
          return;
        }

        var parent = Dropdown._getParentFromElement(this._element);

        var isActive = $$$1(this._menu).hasClass(ClassName.SHOW);

        Dropdown._clearMenus();

        if (isActive) {
          return;
        }

        var relatedTarget = {
          relatedTarget: this._element
        };
        var showEvent = $$$1.Event(Event.SHOW, relatedTarget);
        $$$1(parent).trigger(showEvent);

        if (showEvent.isDefaultPrevented()) {
          return;
        } // Disable totally Popper.js for Dropdown in Navbar


        if (!this._inNavbar) {
          /**
           * Check for Popper dependency
           * Popper - https://popper.js.org
           */
          if (typeof Popper === 'undefined') {
            throw new TypeError('Bootstrap dropdown require Popper.js (https://popper.js.org)');
          }

          var element = this._element; // For dropup with alignment we use the parent as popper container

          if ($$$1(parent).hasClass(ClassName.DROPUP)) {
            if ($$$1(this._menu).hasClass(ClassName.MENULEFT) || $$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
              element = parent;
            }
          } // If boundary is not `scrollParent`, then set position to `static`
          // to allow the menu to "escape" the scroll parent's boundaries
          // https://github.com/twbs/bootstrap/issues/24251


          if (this._config.boundary !== 'scrollParent') {
            $$$1(parent).addClass(ClassName.POSITION_STATIC);
          }

          this._popper = new Popper(element, this._menu, this._getPopperConfig());
        } // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


        if ('ontouchstart' in document.documentElement && $$$1(parent).closest(Selector.NAVBAR_NAV).length === 0) {
          $$$1('body').children().on('mouseover', null, $$$1.noop);
        }

        this._element.focus();

        this._element.setAttribute('aria-expanded', true);

        $$$1(this._menu).toggleClass(ClassName.SHOW);
        $$$1(parent).toggleClass(ClassName.SHOW).trigger($$$1.Event(Event.SHOWN, relatedTarget));
      };

      _proto.dispose = function dispose() {
        $$$1.removeData(this._element, DATA_KEY);
        $$$1(this._element).off(EVENT_KEY);
        this._element = null;
        this._menu = null;

        if (this._popper !== null) {
          this._popper.destroy();

          this._popper = null;
        }
      };

      _proto.update = function update() {
        this._inNavbar = this._detectNavbar();

        if (this._popper !== null) {
          this._popper.scheduleUpdate();
        }
      }; // Private


      _proto._addEventListeners = function _addEventListeners() {
        var _this = this;

        $$$1(this._element).on(Event.CLICK, function (event) {
          event.preventDefault();
          event.stopPropagation();

          _this.toggle();
        });
      };

      _proto._getConfig = function _getConfig(config) {
        config = _extends({}, this.constructor.Default, $$$1(this._element).data(), config);
        Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
        return config;
      };

      _proto._getMenuElement = function _getMenuElement() {
        if (!this._menu) {
          var parent = Dropdown._getParentFromElement(this._element);

          this._menu = $$$1(parent).find(Selector.MENU)[0];
        }

        return this._menu;
      };

      _proto._getPlacement = function _getPlacement() {
        var $parentDropdown = $$$1(this._element).parent();
        var placement = AttachmentMap.BOTTOM; // Handle dropup

        if ($parentDropdown.hasClass(ClassName.DROPUP)) {
          placement = AttachmentMap.TOP;

          if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
            placement = AttachmentMap.TOPEND;
          }
        } else if ($parentDropdown.hasClass(ClassName.DROPRIGHT)) {
          placement = AttachmentMap.RIGHT;
        } else if ($parentDropdown.hasClass(ClassName.DROPLEFT)) {
          placement = AttachmentMap.LEFT;
        } else if ($$$1(this._menu).hasClass(ClassName.MENURIGHT)) {
          placement = AttachmentMap.BOTTOMEND;
        }

        return placement;
      };

      _proto._detectNavbar = function _detectNavbar() {
        return $$$1(this._element).closest('.navbar').length > 0;
      };

      _proto._getPopperConfig = function _getPopperConfig() {
        var _this2 = this;

        var offsetConf = {};

        if (typeof this._config.offset === 'function') {
          offsetConf.fn = function (data) {
            data.offsets = _extends({}, data.offsets, _this2._config.offset(data.offsets) || {});
            return data;
          };
        } else {
          offsetConf.offset = this._config.offset;
        }

        var popperConfig = {
          placement: this._getPlacement(),
          modifiers: {
            offset: offsetConf,
            flip: {
              enabled: this._config.flip
            },
            preventOverflow: {
              boundariesElement: this._config.boundary
            }
          }
        };
        return popperConfig;
      }; // Static


      Dropdown._jQueryInterface = function _jQueryInterface(config) {
        return this.each(function () {
          var data = $$$1(this).data(DATA_KEY);

          var _config = _typeof2(config) === 'object' ? config : null;

          if (!data) {
            data = new Dropdown(this, _config);
            $$$1(this).data(DATA_KEY, data);
          }

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"" + config + "\"");
            }

            data[config]();
          }
        });
      };

      Dropdown._clearMenus = function _clearMenus(event) {
        if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
          return;
        }

        var toggles = $$$1.makeArray($$$1(Selector.DATA_TOGGLE));

        for (var i = 0; i < toggles.length; i++) {
          var parent = Dropdown._getParentFromElement(toggles[i]);

          var context = $$$1(toggles[i]).data(DATA_KEY);
          var relatedTarget = {
            relatedTarget: toggles[i]
          };

          if (!context) {
            continue;
          }

          var dropdownMenu = context._menu;

          if (!$$$1(parent).hasClass(ClassName.SHOW)) {
            continue;
          }

          if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $$$1.contains(parent, event.target)) {
            continue;
          }

          var hideEvent = $$$1.Event(Event.HIDE, relatedTarget);
          $$$1(parent).trigger(hideEvent);

          if (hideEvent.isDefaultPrevented()) {
            continue;
          } // If this is a touch-enabled device we remove the extra
          // empty mouseover listeners we added for iOS support


          if ('ontouchstart' in document.documentElement) {
            $$$1('body').children().off('mouseover', null, $$$1.noop);
          }

          toggles[i].setAttribute('aria-expanded', 'false');
          $$$1(dropdownMenu).removeClass(ClassName.SHOW);
          $$$1(parent).removeClass(ClassName.SHOW).trigger($$$1.Event(Event.HIDDEN, relatedTarget));
        }
      };

      Dropdown._getParentFromElement = function _getParentFromElement(element) {
        var parent;
        var selector = Util.getSelectorFromElement(element);

        if (selector) {
          parent = $$$1(selector)[0];
        }

        return parent || element.parentNode;
      }; // eslint-disable-next-line complexity


      Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
        // If not input/textarea:
        //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
        // If input/textarea:
        //  - If space key => not a dropdown command
        //  - If key is other than escape
        //    - If key is not up or down => not a dropdown command
        //    - If trigger inside the menu => not a dropdown command
        if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $$$1(event.target).closest(Selector.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
          return;
        }

        event.preventDefault();
        event.stopPropagation();

        if (this.disabled || $$$1(this).hasClass(ClassName.DISABLED)) {
          return;
        }

        var parent = Dropdown._getParentFromElement(this);

        var isActive = $$$1(parent).hasClass(ClassName.SHOW);

        if (!isActive && (event.which !== ESCAPE_KEYCODE || event.which !== SPACE_KEYCODE) || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
          if (event.which === ESCAPE_KEYCODE) {
            var toggle = $$$1(parent).find(Selector.DATA_TOGGLE)[0];
            $$$1(toggle).trigger('focus');
          }

          $$$1(this).trigger('click');
          return;
        }

        var items = $$$1(parent).find(Selector.VISIBLE_ITEMS).get();

        if (items.length === 0) {
          return;
        }

        var index = items.indexOf(event.target);

        if (event.which === ARROW_UP_KEYCODE && index > 0) {
          // Up
          index--;
        }

        if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
          // Down
          index++;
        }

        if (index < 0) {
          index = 0;
        }

        items[index].focus();
      };

      _createClass(Dropdown, null, [{
        key: "VERSION",
        get: function get() {
          return VERSION;
        }
      }, {
        key: "Default",
        get: function get() {
          return Default;
        }
      }, {
        key: "DefaultType",
        get: function get() {
          return DefaultType;
        }
      }]);

      return Dropdown;
    }();
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */


    $$$1(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + " " + Event.KEYUP_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
      event.preventDefault();
      event.stopPropagation();

      Dropdown._jQueryInterface.call($$$1(this), 'toggle');
    }).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function (e) {
      e.stopPropagation();
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */

    $$$1.fn[NAME] = Dropdown._jQueryInterface;
    $$$1.fn[NAME].Constructor = Dropdown;

    $$$1.fn[NAME].noConflict = function () {
      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
      return Dropdown._jQueryInterface;
    };

    return Dropdown;
  }($, Popper);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.0.0): modal.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */


  var Modal = function ($$$1) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'modal';
    var VERSION = '4.0.0';
    var DATA_KEY = 'bs.modal';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
    var TRANSITION_DURATION = 300;
    var BACKDROP_TRANSITION_DURATION = 150;
    var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

    var Default = {
      backdrop: true,
      keyboard: true,
      focus: true,
      show: true
    };
    var DefaultType = {
      backdrop: '(boolean|string)',
      keyboard: 'boolean',
      focus: 'boolean',
      show: 'boolean'
    };
    var Event = {
      HIDE: "hide" + EVENT_KEY,
      HIDDEN: "hidden" + EVENT_KEY,
      SHOW: "show" + EVENT_KEY,
      SHOWN: "shown" + EVENT_KEY,
      FOCUSIN: "focusin" + EVENT_KEY,
      RESIZE: "resize" + EVENT_KEY,
      CLICK_DISMISS: "click.dismiss" + EVENT_KEY,
      KEYDOWN_DISMISS: "keydown.dismiss" + EVENT_KEY,
      MOUSEUP_DISMISS: "mouseup.dismiss" + EVENT_KEY,
      MOUSEDOWN_DISMISS: "mousedown.dismiss" + EVENT_KEY,
      CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
      SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
      BACKDROP: 'modal-backdrop',
      OPEN: 'modal-open',
      FADE: 'fade',
      SHOW: 'show'
    };
    var Selector = {
      DIALOG: '.modal-dialog',
      DATA_TOGGLE: '[data-toggle="modal"]',
      DATA_DISMISS: '[data-dismiss="modal"]',
      FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
      STICKY_CONTENT: '.sticky-top',
      NAVBAR_TOGGLER: '.navbar-toggler'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

    };

    var Modal = /*#__PURE__*/function () {
      function Modal(element, config) {
        this._config = this._getConfig(config);
        this._element = element;
        this._dialog = $$$1(element).find(Selector.DIALOG)[0];
        this._backdrop = null;
        this._isShown = false;
        this._isBodyOverflowing = false;
        this._ignoreBackdropClick = false;
        this._originalBodyPadding = 0;
        this._scrollbarWidth = 0;
      } // Getters


      var _proto = Modal.prototype; // Public

      _proto.toggle = function toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
      };

      _proto.show = function show(relatedTarget) {
        var _this = this;

        if (this._isTransitioning || this._isShown) {
          return;
        }

        if (Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE)) {
          this._isTransitioning = true;
        }

        var showEvent = $$$1.Event(Event.SHOW, {
          relatedTarget: relatedTarget
        });
        $$$1(this._element).trigger(showEvent);

        if (this._isShown || showEvent.isDefaultPrevented()) {
          return;
        }

        this._isShown = true;

        this._checkScrollbar();

        this._setScrollbar();

        this._adjustDialog();

        $$$1(document.body).addClass(ClassName.OPEN);

        this._setEscapeEvent();

        this._setResizeEvent();

        $$$1(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function (event) {
          return _this.hide(event);
        });
        $$$1(this._dialog).on(Event.MOUSEDOWN_DISMISS, function () {
          $$$1(_this._element).one(Event.MOUSEUP_DISMISS, function (event) {
            if ($$$1(event.target).is(_this._element)) {
              _this._ignoreBackdropClick = true;
            }
          });
        });

        this._showBackdrop(function () {
          return _this._showElement(relatedTarget);
        });
      };

      _proto.hide = function hide(event) {
        var _this2 = this;

        if (event) {
          event.preventDefault();
        }

        if (this._isTransitioning || !this._isShown) {
          return;
        }

        var hideEvent = $$$1.Event(Event.HIDE);
        $$$1(this._element).trigger(hideEvent);

        if (!this._isShown || hideEvent.isDefaultPrevented()) {
          return;
        }

        this._isShown = false;
        var transition = Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE);

        if (transition) {
          this._isTransitioning = true;
        }

        this._setEscapeEvent();

        this._setResizeEvent();

        $$$1(document).off(Event.FOCUSIN);
        $$$1(this._element).removeClass(ClassName.SHOW);
        $$$1(this._element).off(Event.CLICK_DISMISS);
        $$$1(this._dialog).off(Event.MOUSEDOWN_DISMISS);

        if (transition) {
          $$$1(this._element).one(Util.TRANSITION_END, function (event) {
            return _this2._hideModal(event);
          }).emulateTransitionEnd(TRANSITION_DURATION);
        } else {
          this._hideModal();
        }
      };

      _proto.dispose = function dispose() {
        $$$1.removeData(this._element, DATA_KEY);
        $$$1(window, document, this._element, this._backdrop).off(EVENT_KEY);
        this._config = null;
        this._element = null;
        this._dialog = null;
        this._backdrop = null;
        this._isShown = null;
        this._isBodyOverflowing = null;
        this._ignoreBackdropClick = null;
        this._scrollbarWidth = null;
      };

      _proto.handleUpdate = function handleUpdate() {
        this._adjustDialog();
      }; // Private


      _proto._getConfig = function _getConfig(config) {
        config = _extends({}, Default, config);
        Util.typeCheckConfig(NAME, config, DefaultType);
        return config;
      };

      _proto._showElement = function _showElement(relatedTarget) {
        var _this3 = this;

        var transition = Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE);

        if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
          // Don't move modal's DOM position
          document.body.appendChild(this._element);
        }

        this._element.style.display = 'block';

        this._element.removeAttribute('aria-hidden');

        this._element.scrollTop = 0;

        if (transition) {
          Util.reflow(this._element);
        }

        $$$1(this._element).addClass(ClassName.SHOW);

        if (this._config.focus) {
          this._enforceFocus();
        }

        var shownEvent = $$$1.Event(Event.SHOWN, {
          relatedTarget: relatedTarget
        });

        var transitionComplete = function transitionComplete() {
          if (_this3._config.focus) {
            _this3._element.focus();
          }

          _this3._isTransitioning = false;
          $$$1(_this3._element).trigger(shownEvent);
        };

        if (transition) {
          $$$1(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(TRANSITION_DURATION);
        } else {
          transitionComplete();
        }
      };

      _proto._enforceFocus = function _enforceFocus() {
        var _this4 = this;

        $$$1(document).off(Event.FOCUSIN) // Guard against infinite focus loop
        .on(Event.FOCUSIN, function (event) {
          if (document !== event.target && _this4._element !== event.target && $$$1(_this4._element).has(event.target).length === 0) {
            _this4._element.focus();
          }
        });
      };

      _proto._setEscapeEvent = function _setEscapeEvent() {
        var _this5 = this;

        if (this._isShown && this._config.keyboard) {
          $$$1(this._element).on(Event.KEYDOWN_DISMISS, function (event) {
            if (event.which === ESCAPE_KEYCODE) {
              event.preventDefault();

              _this5.hide();
            }
          });
        } else if (!this._isShown) {
          $$$1(this._element).off(Event.KEYDOWN_DISMISS);
        }
      };

      _proto._setResizeEvent = function _setResizeEvent() {
        var _this6 = this;

        if (this._isShown) {
          $$$1(window).on(Event.RESIZE, function (event) {
            return _this6.handleUpdate(event);
          });
        } else {
          $$$1(window).off(Event.RESIZE);
        }
      };

      _proto._hideModal = function _hideModal() {
        var _this7 = this;

        this._element.style.display = 'none';

        this._element.setAttribute('aria-hidden', true);

        this._isTransitioning = false;

        this._showBackdrop(function () {
          $$$1(document.body).removeClass(ClassName.OPEN);

          _this7._resetAdjustments();

          _this7._resetScrollbar();

          $$$1(_this7._element).trigger(Event.HIDDEN);
        });
      };

      _proto._removeBackdrop = function _removeBackdrop() {
        if (this._backdrop) {
          $$$1(this._backdrop).remove();
          this._backdrop = null;
        }
      };

      _proto._showBackdrop = function _showBackdrop(callback) {
        var _this8 = this;

        var animate = $$$1(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';

        if (this._isShown && this._config.backdrop) {
          var doAnimate = Util.supportsTransitionEnd() && animate;
          this._backdrop = document.createElement('div');
          this._backdrop.className = ClassName.BACKDROP;

          if (animate) {
            $$$1(this._backdrop).addClass(animate);
          }

          $$$1(this._backdrop).appendTo(document.body);
          $$$1(this._element).on(Event.CLICK_DISMISS, function (event) {
            if (_this8._ignoreBackdropClick) {
              _this8._ignoreBackdropClick = false;
              return;
            }

            if (event.target !== event.currentTarget) {
              return;
            }

            if (_this8._config.backdrop === 'static') {
              _this8._element.focus();
            } else {
              _this8.hide();
            }
          });

          if (doAnimate) {
            Util.reflow(this._backdrop);
          }

          $$$1(this._backdrop).addClass(ClassName.SHOW);

          if (!callback) {
            return;
          }

          if (!doAnimate) {
            callback();
            return;
          }

          $$$1(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);
        } else if (!this._isShown && this._backdrop) {
          $$$1(this._backdrop).removeClass(ClassName.SHOW);

          var callbackRemove = function callbackRemove() {
            _this8._removeBackdrop();

            if (callback) {
              callback();
            }
          };

          if (Util.supportsTransitionEnd() && $$$1(this._element).hasClass(ClassName.FADE)) {
            $$$1(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);
          } else {
            callbackRemove();
          }
        } else if (callback) {
          callback();
        }
      }; // ----------------------------------------------------------------------
      // the following methods are used to handle overflowing modals
      // todo (fat): these should probably be refactored out of modal.js
      // ----------------------------------------------------------------------


      _proto._adjustDialog = function _adjustDialog() {
        var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

        if (!this._isBodyOverflowing && isModalOverflowing) {
          this._element.style.paddingLeft = this._scrollbarWidth + "px";
        }

        if (this._isBodyOverflowing && !isModalOverflowing) {
          this._element.style.paddingRight = this._scrollbarWidth + "px";
        }
      };

      _proto._resetAdjustments = function _resetAdjustments() {
        this._element.style.paddingLeft = '';
        this._element.style.paddingRight = '';
      };

      _proto._checkScrollbar = function _checkScrollbar() {
        var rect = document.body.getBoundingClientRect();
        this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;
        this._scrollbarWidth = this._getScrollbarWidth();
      };

      _proto._setScrollbar = function _setScrollbar() {
        var _this9 = this;

        if (this._isBodyOverflowing) {
          // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
          //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
          // Adjust fixed content padding
          $$$1(Selector.FIXED_CONTENT).each(function (index, element) {
            var actualPadding = $$$1(element)[0].style.paddingRight;
            var calculatedPadding = $$$1(element).css('padding-right');
            $$$1(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this9._scrollbarWidth + "px");
          }); // Adjust sticky content margin

          $$$1(Selector.STICKY_CONTENT).each(function (index, element) {
            var actualMargin = $$$1(element)[0].style.marginRight;
            var calculatedMargin = $$$1(element).css('margin-right');
            $$$1(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this9._scrollbarWidth + "px");
          }); // Adjust navbar-toggler margin

          $$$1(Selector.NAVBAR_TOGGLER).each(function (index, element) {
            var actualMargin = $$$1(element)[0].style.marginRight;
            var calculatedMargin = $$$1(element).css('margin-right');
            $$$1(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) + _this9._scrollbarWidth + "px");
          }); // Adjust body padding

          var actualPadding = document.body.style.paddingRight;
          var calculatedPadding = $$$1('body').css('padding-right');
          $$$1('body').data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
        }
      };

      _proto._resetScrollbar = function _resetScrollbar() {
        // Restore fixed content padding
        $$$1(Selector.FIXED_CONTENT).each(function (index, element) {
          var padding = $$$1(element).data('padding-right');

          if (typeof padding !== 'undefined') {
            $$$1(element).css('padding-right', padding).removeData('padding-right');
          }
        }); // Restore sticky content and navbar-toggler margin

        $$$1(Selector.STICKY_CONTENT + ", " + Selector.NAVBAR_TOGGLER).each(function (index, element) {
          var margin = $$$1(element).data('margin-right');

          if (typeof margin !== 'undefined') {
            $$$1(element).css('margin-right', margin).removeData('margin-right');
          }
        }); // Restore body padding

        var padding = $$$1('body').data('padding-right');

        if (typeof padding !== 'undefined') {
          $$$1('body').css('padding-right', padding).removeData('padding-right');
        }
      };

      _proto._getScrollbarWidth = function _getScrollbarWidth() {
        // thx d.walsh
        var scrollDiv = document.createElement('div');
        scrollDiv.className = ClassName.SCROLLBAR_MEASURER;
        document.body.appendChild(scrollDiv);
        var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
        return scrollbarWidth;
      }; // Static


      Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
        return this.each(function () {
          var data = $$$1(this).data(DATA_KEY);

          var _config = _extends({}, Modal.Default, $$$1(this).data(), _typeof2(config) === 'object' && config);

          if (!data) {
            data = new Modal(this, _config);
            $$$1(this).data(DATA_KEY, data);
          }

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"" + config + "\"");
            }

            data[config](relatedTarget);
          } else if (_config.show) {
            data.show(relatedTarget);
          }
        });
      };

      _createClass(Modal, null, [{
        key: "VERSION",
        get: function get() {
          return VERSION;
        }
      }, {
        key: "Default",
        get: function get() {
          return Default;
        }
      }]);

      return Modal;
    }();
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */


    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
      var _this10 = this;

      var target;
      var selector = Util.getSelectorFromElement(this);

      if (selector) {
        target = $$$1(selector)[0];
      }

      var config = $$$1(target).data(DATA_KEY) ? 'toggle' : _extends({}, $$$1(target).data(), $$$1(this).data());

      if (this.tagName === 'A' || this.tagName === 'AREA') {
        event.preventDefault();
      }

      var $target = $$$1(target).one(Event.SHOW, function (showEvent) {
        if (showEvent.isDefaultPrevented()) {
          // Only register focus restorer if modal will actually get shown
          return;
        }

        $target.one(Event.HIDDEN, function () {
          if ($$$1(_this10).is(':visible')) {
            _this10.focus();
          }
        });
      });

      Modal._jQueryInterface.call($$$1(target), config, this);
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */

    $$$1.fn[NAME] = Modal._jQueryInterface;
    $$$1.fn[NAME].Constructor = Modal;

    $$$1.fn[NAME].noConflict = function () {
      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
      return Modal._jQueryInterface;
    };

    return Modal;
  }($);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.0.0): tooltip.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */


  var Tooltip = function ($$$1) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'tooltip';
    var VERSION = '4.0.0';
    var DATA_KEY = 'bs.tooltip';
    var EVENT_KEY = "." + DATA_KEY;
    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
    var TRANSITION_DURATION = 150;
    var CLASS_PREFIX = 'bs-tooltip';
    var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
    var DefaultType = {
      animation: 'boolean',
      template: 'string',
      title: '(string|element|function)',
      trigger: 'string',
      delay: '(number|object)',
      html: 'boolean',
      selector: '(string|boolean)',
      placement: '(string|function)',
      offset: '(number|string)',
      container: '(string|element|boolean)',
      fallbackPlacement: '(string|array)',
      boundary: '(string|element)'
    };
    var AttachmentMap = {
      AUTO: 'auto',
      TOP: 'top',
      RIGHT: 'right',
      BOTTOM: 'bottom',
      LEFT: 'left'
    };
    var Default = {
      animation: true,
      template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
      trigger: 'hover focus',
      title: '',
      delay: 0,
      html: false,
      selector: false,
      placement: 'top',
      offset: 0,
      container: false,
      fallbackPlacement: 'flip',
      boundary: 'scrollParent'
    };
    var HoverState = {
      SHOW: 'show',
      OUT: 'out'
    };
    var Event = {
      HIDE: "hide" + EVENT_KEY,
      HIDDEN: "hidden" + EVENT_KEY,
      SHOW: "show" + EVENT_KEY,
      SHOWN: "shown" + EVENT_KEY,
      INSERTED: "inserted" + EVENT_KEY,
      CLICK: "click" + EVENT_KEY,
      FOCUSIN: "focusin" + EVENT_KEY,
      FOCUSOUT: "focusout" + EVENT_KEY,
      MOUSEENTER: "mouseenter" + EVENT_KEY,
      MOUSELEAVE: "mouseleave" + EVENT_KEY
    };
    var ClassName = {
      FADE: 'fade',
      SHOW: 'show'
    };
    var Selector = {
      TOOLTIP: '.tooltip',
      TOOLTIP_INNER: '.tooltip-inner',
      ARROW: '.arrow'
    };
    var Trigger = {
      HOVER: 'hover',
      FOCUS: 'focus',
      CLICK: 'click',
      MANUAL: 'manual'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

    };

    var Tooltip = /*#__PURE__*/function () {
      function Tooltip(element, config) {
        /**
         * Check for Popper dependency
         * Popper - https://popper.js.org
         */
        if (typeof Popper === 'undefined') {
          throw new TypeError('Bootstrap tooltips require Popper.js (https://popper.js.org)');
        } // private


        this._isEnabled = true;
        this._timeout = 0;
        this._hoverState = '';
        this._activeTrigger = {};
        this._popper = null; // Protected

        this.element = element;
        this.config = this._getConfig(config);
        this.tip = null;

        this._setListeners();
      } // Getters


      var _proto = Tooltip.prototype; // Public

      _proto.enable = function enable() {
        this._isEnabled = true;
      };

      _proto.disable = function disable() {
        this._isEnabled = false;
      };

      _proto.toggleEnabled = function toggleEnabled() {
        this._isEnabled = !this._isEnabled;
      };

      _proto.toggle = function toggle(event) {
        if (!this._isEnabled) {
          return;
        }

        if (event) {
          var dataKey = this.constructor.DATA_KEY;
          var context = $$$1(event.currentTarget).data(dataKey);

          if (!context) {
            context = new this.constructor(event.currentTarget, this._getDelegateConfig());
            $$$1(event.currentTarget).data(dataKey, context);
          }

          context._activeTrigger.click = !context._activeTrigger.click;

          if (context._isWithActiveTrigger()) {
            context._enter(null, context);
          } else {
            context._leave(null, context);
          }
        } else {
          if ($$$1(this.getTipElement()).hasClass(ClassName.SHOW)) {
            this._leave(null, this);

            return;
          }

          this._enter(null, this);
        }
      };

      _proto.dispose = function dispose() {
        clearTimeout(this._timeout);
        $$$1.removeData(this.element, this.constructor.DATA_KEY);
        $$$1(this.element).off(this.constructor.EVENT_KEY);
        $$$1(this.element).closest('.modal').off('hide.bs.modal');

        if (this.tip) {
          $$$1(this.tip).remove();
        }

        this._isEnabled = null;
        this._timeout = null;
        this._hoverState = null;
        this._activeTrigger = null;

        if (this._popper !== null) {
          this._popper.destroy();
        }

        this._popper = null;
        this.element = null;
        this.config = null;
        this.tip = null;
      };

      _proto.show = function show() {
        var _this = this;

        if ($$$1(this.element).css('display') === 'none') {
          throw new Error('Please use show on visible elements');
        }

        var showEvent = $$$1.Event(this.constructor.Event.SHOW);

        if (this.isWithContent() && this._isEnabled) {
          $$$1(this.element).trigger(showEvent);
          var isInTheDom = $$$1.contains(this.element.ownerDocument.documentElement, this.element);

          if (showEvent.isDefaultPrevented() || !isInTheDom) {
            return;
          }

          var tip = this.getTipElement();
          var tipId = Util.getUID(this.constructor.NAME);
          tip.setAttribute('id', tipId);
          this.element.setAttribute('aria-describedby', tipId);
          this.setContent();

          if (this.config.animation) {
            $$$1(tip).addClass(ClassName.FADE);
          }

          var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;

          var attachment = this._getAttachment(placement);

          this.addAttachmentClass(attachment);
          var container = this.config.container === false ? document.body : $$$1(this.config.container);
          $$$1(tip).data(this.constructor.DATA_KEY, this);

          if (!$$$1.contains(this.element.ownerDocument.documentElement, this.tip)) {
            $$$1(tip).appendTo(container);
          }

          $$$1(this.element).trigger(this.constructor.Event.INSERTED);
          this._popper = new Popper(this.element, tip, {
            placement: attachment,
            modifiers: {
              offset: {
                offset: this.config.offset
              },
              flip: {
                behavior: this.config.fallbackPlacement
              },
              arrow: {
                element: Selector.ARROW
              },
              preventOverflow: {
                boundariesElement: this.config.boundary
              }
            },
            onCreate: function onCreate(data) {
              if (data.originalPlacement !== data.placement) {
                _this._handlePopperPlacementChange(data);
              }
            },
            onUpdate: function onUpdate(data) {
              _this._handlePopperPlacementChange(data);
            }
          });
          $$$1(tip).addClass(ClassName.SHOW); // If this is a touch-enabled device we add extra
          // empty mouseover listeners to the body's immediate children;
          // only needed because of broken event delegation on iOS
          // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

          if ('ontouchstart' in document.documentElement) {
            $$$1('body').children().on('mouseover', null, $$$1.noop);
          }

          var complete = function complete() {
            if (_this.config.animation) {
              _this._fixTransition();
            }

            var prevHoverState = _this._hoverState;
            _this._hoverState = null;
            $$$1(_this.element).trigger(_this.constructor.Event.SHOWN);

            if (prevHoverState === HoverState.OUT) {
              _this._leave(null, _this);
            }
          };

          if (Util.supportsTransitionEnd() && $$$1(this.tip).hasClass(ClassName.FADE)) {
            $$$1(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(Tooltip._TRANSITION_DURATION);
          } else {
            complete();
          }
        }
      };

      _proto.hide = function hide(callback) {
        var _this2 = this;

        var tip = this.getTipElement();
        var hideEvent = $$$1.Event(this.constructor.Event.HIDE);

        var complete = function complete() {
          if (_this2._hoverState !== HoverState.SHOW && tip.parentNode) {
            tip.parentNode.removeChild(tip);
          }

          _this2._cleanTipClass();

          _this2.element.removeAttribute('aria-describedby');

          $$$1(_this2.element).trigger(_this2.constructor.Event.HIDDEN);

          if (_this2._popper !== null) {
            _this2._popper.destroy();
          }

          if (callback) {
            callback();
          }
        };

        $$$1(this.element).trigger(hideEvent);

        if (hideEvent.isDefaultPrevented()) {
          return;
        }

        $$$1(tip).removeClass(ClassName.SHOW); // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support

        if ('ontouchstart' in document.documentElement) {
          $$$1('body').children().off('mouseover', null, $$$1.noop);
        }

        this._activeTrigger[Trigger.CLICK] = false;
        this._activeTrigger[Trigger.FOCUS] = false;
        this._activeTrigger[Trigger.HOVER] = false;

        if (Util.supportsTransitionEnd() && $$$1(this.tip).hasClass(ClassName.FADE)) {
          $$$1(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
        } else {
          complete();
        }

        this._hoverState = '';
      };

      _proto.update = function update() {
        if (this._popper !== null) {
          this._popper.scheduleUpdate();
        }
      }; // Protected


      _proto.isWithContent = function isWithContent() {
        return Boolean(this.getTitle());
      };

      _proto.addAttachmentClass = function addAttachmentClass(attachment) {
        $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
      };

      _proto.getTipElement = function getTipElement() {
        this.tip = this.tip || $$$1(this.config.template)[0];
        return this.tip;
      };

      _proto.setContent = function setContent() {
        var $tip = $$$1(this.getTipElement());
        this.setElementContent($tip.find(Selector.TOOLTIP_INNER), this.getTitle());
        $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
      };

      _proto.setElementContent = function setElementContent($element, content) {
        var html = this.config.html;

        if (_typeof2(content) === 'object' && (content.nodeType || content.jquery)) {
          // Content is a DOM node or a jQuery
          if (html) {
            if (!$$$1(content).parent().is($element)) {
              $element.empty().append(content);
            }
          } else {
            $element.text($$$1(content).text());
          }
        } else {
          $element[html ? 'html' : 'text'](content);
        }
      };

      _proto.getTitle = function getTitle() {
        var title = this.element.getAttribute('data-original-title');

        if (!title) {
          title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
        }

        return title;
      }; // Private


      _proto._getAttachment = function _getAttachment(placement) {
        return AttachmentMap[placement.toUpperCase()];
      };

      _proto._setListeners = function _setListeners() {
        var _this3 = this;

        var triggers = this.config.trigger.split(' ');
        triggers.forEach(function (trigger) {
          if (trigger === 'click') {
            $$$1(_this3.element).on(_this3.constructor.Event.CLICK, _this3.config.selector, function (event) {
              return _this3.toggle(event);
            });
          } else if (trigger !== Trigger.MANUAL) {
            var eventIn = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSEENTER : _this3.constructor.Event.FOCUSIN;
            var eventOut = trigger === Trigger.HOVER ? _this3.constructor.Event.MOUSELEAVE : _this3.constructor.Event.FOCUSOUT;
            $$$1(_this3.element).on(eventIn, _this3.config.selector, function (event) {
              return _this3._enter(event);
            }).on(eventOut, _this3.config.selector, function (event) {
              return _this3._leave(event);
            });
          }

          $$$1(_this3.element).closest('.modal').on('hide.bs.modal', function () {
            return _this3.hide();
          });
        });

        if (this.config.selector) {
          this.config = _extends({}, this.config, {
            trigger: 'manual',
            selector: ''
          });
        } else {
          this._fixTitle();
        }
      };

      _proto._fixTitle = function _fixTitle() {
        var titleType = _typeof2(this.element.getAttribute('data-original-title'));

        if (this.element.getAttribute('title') || titleType !== 'string') {
          this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
          this.element.setAttribute('title', '');
        }
      };

      _proto._enter = function _enter(event, context) {
        var dataKey = this.constructor.DATA_KEY;
        context = context || $$$1(event.currentTarget).data(dataKey);

        if (!context) {
          context = new this.constructor(event.currentTarget, this._getDelegateConfig());
          $$$1(event.currentTarget).data(dataKey, context);
        }

        if (event) {
          context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;
        }

        if ($$$1(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {
          context._hoverState = HoverState.SHOW;
          return;
        }

        clearTimeout(context._timeout);
        context._hoverState = HoverState.SHOW;

        if (!context.config.delay || !context.config.delay.show) {
          context.show();
          return;
        }

        context._timeout = setTimeout(function () {
          if (context._hoverState === HoverState.SHOW) {
            context.show();
          }
        }, context.config.delay.show);
      };

      _proto._leave = function _leave(event, context) {
        var dataKey = this.constructor.DATA_KEY;
        context = context || $$$1(event.currentTarget).data(dataKey);

        if (!context) {
          context = new this.constructor(event.currentTarget, this._getDelegateConfig());
          $$$1(event.currentTarget).data(dataKey, context);
        }

        if (event) {
          context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;
        }

        if (context._isWithActiveTrigger()) {
          return;
        }

        clearTimeout(context._timeout);
        context._hoverState = HoverState.OUT;

        if (!context.config.delay || !context.config.delay.hide) {
          context.hide();
          return;
        }

        context._timeout = setTimeout(function () {
          if (context._hoverState === HoverState.OUT) {
            context.hide();
          }
        }, context.config.delay.hide);
      };

      _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
        for (var trigger in this._activeTrigger) {
          if (this._activeTrigger[trigger]) {
            return true;
          }
        }

        return false;
      };

      _proto._getConfig = function _getConfig(config) {
        config = _extends({}, this.constructor.Default, $$$1(this.element).data(), config);

        if (typeof config.delay === 'number') {
          config.delay = {
            show: config.delay,
            hide: config.delay
          };
        }

        if (typeof config.title === 'number') {
          config.title = config.title.toString();
        }

        if (typeof config.content === 'number') {
          config.content = config.content.toString();
        }

        Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);
        return config;
      };

      _proto._getDelegateConfig = function _getDelegateConfig() {
        var config = {};

        if (this.config) {
          for (var key in this.config) {
            if (this.constructor.Default[key] !== this.config[key]) {
              config[key] = this.config[key];
            }
          }
        }

        return config;
      };

      _proto._cleanTipClass = function _cleanTipClass() {
        var $tip = $$$1(this.getTipElement());
        var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

        if (tabClass !== null && tabClass.length > 0) {
          $tip.removeClass(tabClass.join(''));
        }
      };

      _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(data) {
        this._cleanTipClass();

        this.addAttachmentClass(this._getAttachment(data.placement));
      };

      _proto._fixTransition = function _fixTransition() {
        var tip = this.getTipElement();
        var initConfigAnimation = this.config.animation;

        if (tip.getAttribute('x-placement') !== null) {
          return;
        }

        $$$1(tip).removeClass(ClassName.FADE);
        this.config.animation = false;
        this.hide();
        this.show();
        this.config.animation = initConfigAnimation;
      }; // Static


      Tooltip._jQueryInterface = function _jQueryInterface(config) {
        return this.each(function () {
          var data = $$$1(this).data(DATA_KEY);

          var _config = _typeof2(config) === 'object' && config;

          if (!data && /dispose|hide/.test(config)) {
            return;
          }

          if (!data) {
            data = new Tooltip(this, _config);
            $$$1(this).data(DATA_KEY, data);
          }

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"" + config + "\"");
            }

            data[config]();
          }
        });
      };

      _createClass(Tooltip, null, [{
        key: "VERSION",
        get: function get() {
          return VERSION;
        }
      }, {
        key: "Default",
        get: function get() {
          return Default;
        }
      }, {
        key: "NAME",
        get: function get() {
          return NAME;
        }
      }, {
        key: "DATA_KEY",
        get: function get() {
          return DATA_KEY;
        }
      }, {
        key: "Event",
        get: function get() {
          return Event;
        }
      }, {
        key: "EVENT_KEY",
        get: function get() {
          return EVENT_KEY;
        }
      }, {
        key: "DefaultType",
        get: function get() {
          return DefaultType;
        }
      }]);

      return Tooltip;
    }();
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */


    $$$1.fn[NAME] = Tooltip._jQueryInterface;
    $$$1.fn[NAME].Constructor = Tooltip;

    $$$1.fn[NAME].noConflict = function () {
      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
      return Tooltip._jQueryInterface;
    };

    return Tooltip;
  }($, Popper);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.0.0): popover.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */


  var Popover = function ($$$1) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'popover';
    var VERSION = '4.0.0';
    var DATA_KEY = 'bs.popover';
    var EVENT_KEY = "." + DATA_KEY;
    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
    var CLASS_PREFIX = 'bs-popover';
    var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');

    var Default = _extends({}, Tooltip.Default, {
      placement: 'right',
      trigger: 'click',
      content: '',
      template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
    });

    var DefaultType = _extends({}, Tooltip.DefaultType, {
      content: '(string|element|function)'
    });

    var ClassName = {
      FADE: 'fade',
      SHOW: 'show'
    };
    var Selector = {
      TITLE: '.popover-header',
      CONTENT: '.popover-body'
    };
    var Event = {
      HIDE: "hide" + EVENT_KEY,
      HIDDEN: "hidden" + EVENT_KEY,
      SHOW: "show" + EVENT_KEY,
      SHOWN: "shown" + EVENT_KEY,
      INSERTED: "inserted" + EVENT_KEY,
      CLICK: "click" + EVENT_KEY,
      FOCUSIN: "focusin" + EVENT_KEY,
      FOCUSOUT: "focusout" + EVENT_KEY,
      MOUSEENTER: "mouseenter" + EVENT_KEY,
      MOUSELEAVE: "mouseleave" + EVENT_KEY
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

    };

    var Popover = /*#__PURE__*/function (_Tooltip) {
      _inheritsLoose(Popover, _Tooltip);

      function Popover() {
        return _Tooltip.apply(this, arguments) || this;
      }

      var _proto = Popover.prototype; // Overrides

      _proto.isWithContent = function isWithContent() {
        return this.getTitle() || this._getContent();
      };

      _proto.addAttachmentClass = function addAttachmentClass(attachment) {
        $$$1(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
      };

      _proto.getTipElement = function getTipElement() {
        this.tip = this.tip || $$$1(this.config.template)[0];
        return this.tip;
      };

      _proto.setContent = function setContent() {
        var $tip = $$$1(this.getTipElement()); // We use append for html objects to maintain js events

        this.setElementContent($tip.find(Selector.TITLE), this.getTitle());

        var content = this._getContent();

        if (typeof content === 'function') {
          content = content.call(this.element);
        }

        this.setElementContent($tip.find(Selector.CONTENT), content);
        $tip.removeClass(ClassName.FADE + " " + ClassName.SHOW);
      }; // Private


      _proto._getContent = function _getContent() {
        return this.element.getAttribute('data-content') || this.config.content;
      };

      _proto._cleanTipClass = function _cleanTipClass() {
        var $tip = $$$1(this.getTipElement());
        var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

        if (tabClass !== null && tabClass.length > 0) {
          $tip.removeClass(tabClass.join(''));
        }
      }; // Static


      Popover._jQueryInterface = function _jQueryInterface(config) {
        return this.each(function () {
          var data = $$$1(this).data(DATA_KEY);

          var _config = _typeof2(config) === 'object' ? config : null;

          if (!data && /destroy|hide/.test(config)) {
            return;
          }

          if (!data) {
            data = new Popover(this, _config);
            $$$1(this).data(DATA_KEY, data);
          }

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"" + config + "\"");
            }

            data[config]();
          }
        });
      };

      _createClass(Popover, null, [{
        key: "VERSION",
        // Getters
        get: function get() {
          return VERSION;
        }
      }, {
        key: "Default",
        get: function get() {
          return Default;
        }
      }, {
        key: "NAME",
        get: function get() {
          return NAME;
        }
      }, {
        key: "DATA_KEY",
        get: function get() {
          return DATA_KEY;
        }
      }, {
        key: "Event",
        get: function get() {
          return Event;
        }
      }, {
        key: "EVENT_KEY",
        get: function get() {
          return EVENT_KEY;
        }
      }, {
        key: "DefaultType",
        get: function get() {
          return DefaultType;
        }
      }]);

      return Popover;
    }(Tooltip);
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */


    $$$1.fn[NAME] = Popover._jQueryInterface;
    $$$1.fn[NAME].Constructor = Popover;

    $$$1.fn[NAME].noConflict = function () {
      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
      return Popover._jQueryInterface;
    };

    return Popover;
  }($);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.0.0): scrollspy.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */


  var ScrollSpy = function ($$$1) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'scrollspy';
    var VERSION = '4.0.0';
    var DATA_KEY = 'bs.scrollspy';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
    var Default = {
      offset: 10,
      method: 'auto',
      target: ''
    };
    var DefaultType = {
      offset: 'number',
      method: 'string',
      target: '(string|element)'
    };
    var Event = {
      ACTIVATE: "activate" + EVENT_KEY,
      SCROLL: "scroll" + EVENT_KEY,
      LOAD_DATA_API: "load" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
      DROPDOWN_ITEM: 'dropdown-item',
      DROPDOWN_MENU: 'dropdown-menu',
      ACTIVE: 'active'
    };
    var Selector = {
      DATA_SPY: '[data-spy="scroll"]',
      ACTIVE: '.active',
      NAV_LIST_GROUP: '.nav, .list-group',
      NAV_LINKS: '.nav-link',
      NAV_ITEMS: '.nav-item',
      LIST_ITEMS: '.list-group-item',
      DROPDOWN: '.dropdown',
      DROPDOWN_ITEMS: '.dropdown-item',
      DROPDOWN_TOGGLE: '.dropdown-toggle'
    };
    var OffsetMethod = {
      OFFSET: 'offset',
      POSITION: 'position'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

    };

    var ScrollSpy = /*#__PURE__*/function () {
      function ScrollSpy(element, config) {
        var _this = this;

        this._element = element;
        this._scrollElement = element.tagName === 'BODY' ? window : element;
        this._config = this._getConfig(config);
        this._selector = this._config.target + " " + Selector.NAV_LINKS + "," + (this._config.target + " " + Selector.LIST_ITEMS + ",") + (this._config.target + " " + Selector.DROPDOWN_ITEMS);
        this._offsets = [];
        this._targets = [];
        this._activeTarget = null;
        this._scrollHeight = 0;
        $$$1(this._scrollElement).on(Event.SCROLL, function (event) {
          return _this._process(event);
        });
        this.refresh();

        this._process();
      } // Getters


      var _proto = ScrollSpy.prototype; // Public

      _proto.refresh = function refresh() {
        var _this2 = this;

        var autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;
        var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
        var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;
        this._offsets = [];
        this._targets = [];
        this._scrollHeight = this._getScrollHeight();
        var targets = $$$1.makeArray($$$1(this._selector));
        targets.map(function (element) {
          var target;
          var targetSelector = Util.getSelectorFromElement(element);

          if (targetSelector) {
            target = $$$1(targetSelector)[0];
          }

          if (target) {
            var targetBCR = target.getBoundingClientRect();

            if (targetBCR.width || targetBCR.height) {
              // TODO (fat): remove sketch reliance on jQuery position/offset
              return [$$$1(target)[offsetMethod]().top + offsetBase, targetSelector];
            }
          }

          return null;
        }).filter(function (item) {
          return item;
        }).sort(function (a, b) {
          return a[0] - b[0];
        }).forEach(function (item) {
          _this2._offsets.push(item[0]);

          _this2._targets.push(item[1]);
        });
      };

      _proto.dispose = function dispose() {
        $$$1.removeData(this._element, DATA_KEY);
        $$$1(this._scrollElement).off(EVENT_KEY);
        this._element = null;
        this._scrollElement = null;
        this._config = null;
        this._selector = null;
        this._offsets = null;
        this._targets = null;
        this._activeTarget = null;
        this._scrollHeight = null;
      }; // Private


      _proto._getConfig = function _getConfig(config) {
        config = _extends({}, Default, config);

        if (typeof config.target !== 'string') {
          var id = $$$1(config.target).attr('id');

          if (!id) {
            id = Util.getUID(NAME);
            $$$1(config.target).attr('id', id);
          }

          config.target = "#" + id;
        }

        Util.typeCheckConfig(NAME, config, DefaultType);
        return config;
      };

      _proto._getScrollTop = function _getScrollTop() {
        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
      };

      _proto._getScrollHeight = function _getScrollHeight() {
        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
      };

      _proto._getOffsetHeight = function _getOffsetHeight() {
        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
      };

      _proto._process = function _process() {
        var scrollTop = this._getScrollTop() + this._config.offset;

        var scrollHeight = this._getScrollHeight();

        var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

        if (this._scrollHeight !== scrollHeight) {
          this.refresh();
        }

        if (scrollTop >= maxScroll) {
          var target = this._targets[this._targets.length - 1];

          if (this._activeTarget !== target) {
            this._activate(target);
          }

          return;
        }

        if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
          this._activeTarget = null;

          this._clear();

          return;
        }

        for (var i = this._offsets.length; i--;) {
          var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

          if (isActiveTarget) {
            this._activate(this._targets[i]);
          }
        }
      };

      _proto._activate = function _activate(target) {
        this._activeTarget = target;

        this._clear();

        var queries = this._selector.split(','); // eslint-disable-next-line arrow-body-style


        queries = queries.map(function (selector) {
          return selector + "[data-target=\"" + target + "\"]," + (selector + "[href=\"" + target + "\"]");
        });
        var $link = $$$1(queries.join(','));

        if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {
          $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
          $link.addClass(ClassName.ACTIVE);
        } else {
          // Set triggered link as active
          $link.addClass(ClassName.ACTIVE); // Set triggered links parents as active
          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

          $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_LINKS + ", " + Selector.LIST_ITEMS).addClass(ClassName.ACTIVE); // Handle special case when .nav-link is inside .nav-item

          $link.parents(Selector.NAV_LIST_GROUP).prev(Selector.NAV_ITEMS).children(Selector.NAV_LINKS).addClass(ClassName.ACTIVE);
        }

        $$$1(this._scrollElement).trigger(Event.ACTIVATE, {
          relatedTarget: target
        });
      };

      _proto._clear = function _clear() {
        $$$1(this._selector).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);
      }; // Static


      ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
        return this.each(function () {
          var data = $$$1(this).data(DATA_KEY);

          var _config = _typeof2(config) === 'object' && config;

          if (!data) {
            data = new ScrollSpy(this, _config);
            $$$1(this).data(DATA_KEY, data);
          }

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"" + config + "\"");
            }

            data[config]();
          }
        });
      };

      _createClass(ScrollSpy, null, [{
        key: "VERSION",
        get: function get() {
          return VERSION;
        }
      }, {
        key: "Default",
        get: function get() {
          return Default;
        }
      }]);

      return ScrollSpy;
    }();
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */


    $$$1(window).on(Event.LOAD_DATA_API, function () {
      var scrollSpys = $$$1.makeArray($$$1(Selector.DATA_SPY));

      for (var i = scrollSpys.length; i--;) {
        var $spy = $$$1(scrollSpys[i]);

        ScrollSpy._jQueryInterface.call($spy, $spy.data());
      }
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */

    $$$1.fn[NAME] = ScrollSpy._jQueryInterface;
    $$$1.fn[NAME].Constructor = ScrollSpy;

    $$$1.fn[NAME].noConflict = function () {
      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
      return ScrollSpy._jQueryInterface;
    };

    return ScrollSpy;
  }($);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.0.0): tab.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */


  var Tab = function ($$$1) {
    /**
     * ------------------------------------------------------------------------
     * Constants
     * ------------------------------------------------------------------------
     */
    var NAME = 'tab';
    var VERSION = '4.0.0';
    var DATA_KEY = 'bs.tab';
    var EVENT_KEY = "." + DATA_KEY;
    var DATA_API_KEY = '.data-api';
    var JQUERY_NO_CONFLICT = $$$1.fn[NAME];
    var TRANSITION_DURATION = 150;
    var Event = {
      HIDE: "hide" + EVENT_KEY,
      HIDDEN: "hidden" + EVENT_KEY,
      SHOW: "show" + EVENT_KEY,
      SHOWN: "shown" + EVENT_KEY,
      CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
    };
    var ClassName = {
      DROPDOWN_MENU: 'dropdown-menu',
      ACTIVE: 'active',
      DISABLED: 'disabled',
      FADE: 'fade',
      SHOW: 'show'
    };
    var Selector = {
      DROPDOWN: '.dropdown',
      NAV_LIST_GROUP: '.nav, .list-group',
      ACTIVE: '.active',
      ACTIVE_UL: '> li > .active',
      DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
      DROPDOWN_TOGGLE: '.dropdown-toggle',
      DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'
      /**
       * ------------------------------------------------------------------------
       * Class Definition
       * ------------------------------------------------------------------------
       */

    };

    var Tab = /*#__PURE__*/function () {
      function Tab(element) {
        this._element = element;
      } // Getters


      var _proto = Tab.prototype; // Public

      _proto.show = function show() {
        var _this = this;

        if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $$$1(this._element).hasClass(ClassName.ACTIVE) || $$$1(this._element).hasClass(ClassName.DISABLED)) {
          return;
        }

        var target;
        var previous;
        var listElement = $$$1(this._element).closest(Selector.NAV_LIST_GROUP)[0];
        var selector = Util.getSelectorFromElement(this._element);

        if (listElement) {
          var itemSelector = listElement.nodeName === 'UL' ? Selector.ACTIVE_UL : Selector.ACTIVE;
          previous = $$$1.makeArray($$$1(listElement).find(itemSelector));
          previous = previous[previous.length - 1];
        }

        var hideEvent = $$$1.Event(Event.HIDE, {
          relatedTarget: this._element
        });
        var showEvent = $$$1.Event(Event.SHOW, {
          relatedTarget: previous
        });

        if (previous) {
          $$$1(previous).trigger(hideEvent);
        }

        $$$1(this._element).trigger(showEvent);

        if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
          return;
        }

        if (selector) {
          target = $$$1(selector)[0];
        }

        this._activate(this._element, listElement);

        var complete = function complete() {
          var hiddenEvent = $$$1.Event(Event.HIDDEN, {
            relatedTarget: _this._element
          });
          var shownEvent = $$$1.Event(Event.SHOWN, {
            relatedTarget: previous
          });
          $$$1(previous).trigger(hiddenEvent);
          $$$1(_this._element).trigger(shownEvent);
        };

        if (target) {
          this._activate(target, target.parentNode, complete);
        } else {
          complete();
        }
      };

      _proto.dispose = function dispose() {
        $$$1.removeData(this._element, DATA_KEY);
        this._element = null;
      }; // Private


      _proto._activate = function _activate(element, container, callback) {
        var _this2 = this;

        var activeElements;

        if (container.nodeName === 'UL') {
          activeElements = $$$1(container).find(Selector.ACTIVE_UL);
        } else {
          activeElements = $$$1(container).children(Selector.ACTIVE);
        }

        var active = activeElements[0];
        var isTransitioning = callback && Util.supportsTransitionEnd() && active && $$$1(active).hasClass(ClassName.FADE);

        var complete = function complete() {
          return _this2._transitionComplete(element, active, callback);
        };

        if (active && isTransitioning) {
          $$$1(active).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);
        } else {
          complete();
        }
      };

      _proto._transitionComplete = function _transitionComplete(element, active, callback) {
        if (active) {
          $$$1(active).removeClass(ClassName.SHOW + " " + ClassName.ACTIVE);
          var dropdownChild = $$$1(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];

          if (dropdownChild) {
            $$$1(dropdownChild).removeClass(ClassName.ACTIVE);
          }

          if (active.getAttribute('role') === 'tab') {
            active.setAttribute('aria-selected', false);
          }
        }

        $$$1(element).addClass(ClassName.ACTIVE);

        if (element.getAttribute('role') === 'tab') {
          element.setAttribute('aria-selected', true);
        }

        Util.reflow(element);
        $$$1(element).addClass(ClassName.SHOW);

        if (element.parentNode && $$$1(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {
          var dropdownElement = $$$1(element).closest(Selector.DROPDOWN)[0];

          if (dropdownElement) {
            $$$1(dropdownElement).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);
          }

          element.setAttribute('aria-expanded', true);
        }

        if (callback) {
          callback();
        }
      }; // Static


      Tab._jQueryInterface = function _jQueryInterface(config) {
        return this.each(function () {
          var $this = $$$1(this);
          var data = $this.data(DATA_KEY);

          if (!data) {
            data = new Tab(this);
            $this.data(DATA_KEY, data);
          }

          if (typeof config === 'string') {
            if (typeof data[config] === 'undefined') {
              throw new TypeError("No method named \"" + config + "\"");
            }

            data[config]();
          }
        });
      };

      _createClass(Tab, null, [{
        key: "VERSION",
        get: function get() {
          return VERSION;
        }
      }]);

      return Tab;
    }();
    /**
     * ------------------------------------------------------------------------
     * Data Api implementation
     * ------------------------------------------------------------------------
     */


    $$$1(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {
      event.preventDefault();

      Tab._jQueryInterface.call($$$1(this), 'show');
    });
    /**
     * ------------------------------------------------------------------------
     * jQuery
     * ------------------------------------------------------------------------
     */

    $$$1.fn[NAME] = Tab._jQueryInterface;
    $$$1.fn[NAME].Constructor = Tab;

    $$$1.fn[NAME].noConflict = function () {
      $$$1.fn[NAME] = JQUERY_NO_CONFLICT;
      return Tab._jQueryInterface;
    };

    return Tab;
  }($);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.0.0-alpha.6): index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */


  (function ($$$1) {
    if (typeof $$$1 === 'undefined') {
      throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.');
    }

    var version = $$$1.fn.jquery.split(' ')[0].split('.');
    var minMajor = 1;
    var ltMajor = 2;
    var minMinor = 9;
    var minPatch = 1;
    var maxMajor = 4;

    if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
      throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');
    }
  })($);

  exports.Util = Util;
  exports.Alert = Alert;
  exports.Button = Button;
  exports.Carousel = Carousel;
  exports.Collapse = Collapse;
  exports.Dropdown = Dropdown;
  exports.Modal = Modal;
  exports.Popover = Popover;
  exports.Scrollspy = ScrollSpy;
  exports.Tab = Tab;
  exports.Tooltip = Tooltip;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});
/*!
 * animsition v4.0.2
 * A simple and easy jQuery plugin for CSS animated page transitions.
 * http://blivesta.github.io/animsition
 * License : MIT
 * Author : blivesta (http://blivesta.com/)
 */


;

(function (factory) {
  'use strict';

  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else if ((typeof exports === "undefined" ? "undefined" : _typeof2(exports)) === 'object') {
    module.exports = factory(require('jquery'));
  } else {
    factory(jQuery);
  }
})(function ($) {
  'use strict';

  var namespace = 'animsition';
  var loaded = false;
  $(window).on('load', function () {
    loaded = true;
  });
  var __ = {
    init: function init(options) {
      options = $.extend({
        inClass: 'fade-in',
        outClass: 'fade-out',
        inDuration: 1500,
        outDuration: 800,
        linkElement: '.animsition-link',
        // e.g. linkElement   :   'a:not([target="_blank"]):not([href^="#"])'
        loading: true,
        loadingParentElement: 'body',
        //animsition wrapper element
        loadingClass: 'animsition-loading',
        loadingInner: '',
        // e.g '<img src="loading.svg" />'
        timeout: false,
        timeoutCountdown: 5000,
        onLoadEvent: true,
        browser: ['animation-duration', '-webkit-animation-duration'],
        // "browser" option allows you to disable the "animsition" in case the css property in the array is not supported by your browser.
        // The default setting is to disable the "animsition" in a browser that does not support "animation-duration".
        overlay: false,
        overlayClass: 'animsition-overlay-slide',
        overlayParentElement: 'body',
        transition: function transition(url) {
          window.location.href = url;
        }
      }, options);
      __.settings = {
        timer: false,
        data: {
          inClass: 'animsition-in-class',
          inDuration: 'animsition-in-duration',
          outClass: 'animsition-out-class',
          outDuration: 'animsition-out-duration',
          overlay: 'animsition-overlay'
        },
        events: {
          inStart: 'animsition.inStart',
          inEnd: 'animsition.inEnd',
          outStart: 'animsition.outStart',
          outEnd: 'animsition.outEnd'
        }
      }; // Remove the "Animsition" in a browser
      // that does not support the "animaition-duration".

      var support = __.supportCheck.call(this, options);

      if (!support && options.browser.length > 0) {
        if (!support || !this.length) {
          // If do not have a console object to object window
          if (!('console' in window)) {
            window.console = {};

            window.console.log = function (str) {
              return str;
            };
          }

          if (!this.length) console.log('Animsition: Element does not exist on page.');
          if (!support) console.log('Animsition: Does not support this browser.');
          return __.destroy.call(this);
        }
      }

      var overlayMode = __.optionCheck.call(this, options);

      if (overlayMode && $('.' + options.overlayClass).length <= 0) {
        __.addOverlay.call(this, options);
      }

      if (options.loading && $('.' + options.loadingClass).length <= 0) {
        __.addLoading.call(this, options);
      }

      return this.each(function () {
        var _this = this;

        var $this = $(this);
        var $window = $(window);
        var $document = $(document);
        var data = $this.data(namespace);

        if (!data) {
          options = $.extend({}, options);
          $this.data(namespace, {
            options: options
          });
          if (options.timeout) __.addTimer.call(_this);

          if (options.onLoadEvent) {
            if (loaded) {
              if (__.settings.timer) clearTimeout(__.settings.timer);

              __["in"].call(_this);
            } else {
              $window.on('load', function (e) {
                if (__.settings.timer) clearTimeout(__.settings.timer);

                __["in"].call(_this);
              });
            }
          }

          $window.on('pageshow.' + namespace, function (event) {
            if (event.originalEvent.persisted) __["in"].call(_this);
          }); // Firefox back button issue #4

          $window.on('unload.' + namespace, function () {});
          $document.on('click.' + namespace, options.linkElement, function (event) {
            event.preventDefault();
            var $self = $(this);
            var url = $self.attr('href'); // middle mouse button issue #24
            // if(middle mouse button || command key || shift key || win control key)

            if (event.which === 2 || event.metaKey || event.shiftKey || navigator.platform.toUpperCase().indexOf('WIN') !== -1 && event.ctrlKey) {
              window.open(url, '_blank');
            } else {
              __.out.call(_this, $self, url);
            }
          });
        }
      }); // end each
    },
    addOverlay: function addOverlay(options) {
      $(options.overlayParentElement).prepend('<div class="' + options.overlayClass + '"></div>');
    },
    addLoading: function addLoading(options) {
      $(options.loadingParentElement).append('<div class="' + options.loadingClass + '">' + options.loadingInner + '</div>');
    },
    removeLoading: function removeLoading() {
      var $this = $(this);
      var options = $this.data(namespace).options;
      var $loading = $(options.loadingParentElement).children('.' + options.loadingClass);
      $loading.fadeOut().remove();
    },
    addTimer: function addTimer() {
      var _this = this;

      var $this = $(this);
      var options = $this.data(namespace).options;
      __.settings.timer = setTimeout(function () {
        __["in"].call(_this);

        $(window).off('load.' + namespace);
      }, options.timeoutCountdown);
    },
    supportCheck: function supportCheck(options) {
      var $this = $(this);
      var props = options.browser;
      var propsNum = props.length;
      var support = false;

      if (propsNum === 0) {
        support = true;
      }

      for (var i = 0; i < propsNum; i++) {
        if (typeof $this.css(props[i]) === 'string') {
          support = true;
          break;
        }
      }

      return support;
    },
    optionCheck: function optionCheck(options) {
      var $this = $(this);
      var overlayMode;

      if (options.overlay || $this.data(__.settings.data.overlay)) {
        overlayMode = true;
      } else {
        overlayMode = false;
      }

      return overlayMode;
    },
    animationCheck: function animationCheck(data, stateClass, stateIn) {
      var $this = $(this);
      var options = $this.data(namespace).options;

      var dataType = _typeof2(data);

      var dataDuration = !stateClass && dataType === 'number';
      var dataClass = stateClass && dataType === 'string' && data.length > 0;

      if (dataDuration || dataClass) {
        data = data;
      } else if (stateClass && stateIn) {
        data = options.inClass;
      } else if (!stateClass && stateIn) {
        data = options.inDuration;
      } else if (stateClass && !stateIn) {
        data = options.outClass;
      } else if (!stateClass && !stateIn) {
        data = options.outDuration;
      }

      return data;
    },
    "in": function _in() {
      var _this = this;

      var $this = $(this);
      var options = $this.data(namespace).options;
      var thisInDuration = $this.data(__.settings.data.inDuration);
      var thisInClass = $this.data(__.settings.data.inClass);

      var inDuration = __.animationCheck.call(_this, thisInDuration, false, true);

      var inClass = __.animationCheck.call(_this, thisInClass, true, true);

      var overlayMode = __.optionCheck.call(_this, options);

      var outClass = $this.data(namespace).outClass;
      if (options.loading) __.removeLoading.call(_this);
      if (outClass) $this.removeClass(outClass);

      if (overlayMode) {
        __.inOverlay.call(_this, inClass, inDuration);
      } else {
        __.inDefault.call(_this, inClass, inDuration);
      }
    },
    inDefault: function inDefault(inClass, inDuration) {
      var $this = $(this);
      $this.css({
        'animation-duration': inDuration + 'ms'
      }).addClass(inClass).trigger(__.settings.events.inStart).animateCallback(function () {
        $this.removeClass(inClass).css({
          'opacity': 1
        }).trigger(__.settings.events.inEnd);
      });
    },
    inOverlay: function inOverlay(inClass, inDuration) {
      var $this = $(this);
      var options = $this.data(namespace).options;
      $this.css({
        'opacity': 1
      }).trigger(__.settings.events.inStart);
      $(options.overlayParentElement).children('.' + options.overlayClass).css({
        'animation-duration': inDuration + 'ms'
      }).addClass(inClass).animateCallback(function () {
        $this.trigger(__.settings.events.inEnd);
      });
    },
    out: function out($self, url) {
      var _this = this;

      var $this = $(this);
      var options = $this.data(namespace).options;
      var selfOutClass = $self.data(__.settings.data.outClass);
      var thisOutClass = $this.data(__.settings.data.outClass);
      var selfOutDuration = $self.data(__.settings.data.outDuration);
      var thisOutDuration = $this.data(__.settings.data.outDuration);
      var isOutClass = selfOutClass ? selfOutClass : thisOutClass;
      var isOutDuration = selfOutDuration ? selfOutDuration : thisOutDuration;

      var outClass = __.animationCheck.call(_this, isOutClass, true, false);

      var outDuration = __.animationCheck.call(_this, isOutDuration, false, false);

      var overlayMode = __.optionCheck.call(_this, options);

      $this.data(namespace).outClass = outClass;

      if (overlayMode) {
        __.outOverlay.call(_this, outClass, outDuration, url);
      } else {
        __.outDefault.call(_this, outClass, outDuration, url);
      }
    },
    outDefault: function outDefault(outClass, outDuration, url) {
      var $this = $(this);
      var options = $this.data(namespace).options; // (outDuration + 1) | #55 outDuration: 0 crashes on Safari only

      $this.css({
        'animation-duration': outDuration + 1 + 'ms'
      }).addClass(outClass).trigger(__.settings.events.outStart).animateCallback(function () {
        $this.trigger(__.settings.events.outEnd);
        options.transition(url);
      });
    },
    outOverlay: function outOverlay(outClass, outDuration, url) {
      var _this = this;

      var $this = $(this);
      var options = $this.data(namespace).options;
      var thisInClass = $this.data(__.settings.data.inClass);

      var inClass = __.animationCheck.call(_this, thisInClass, true, true); // (outDuration + 1) | #55 outDuration: 0 crashes animsition on Safari only


      $(options.overlayParentElement).children('.' + options.overlayClass).css({
        'animation-duration': outDuration + 1 + 'ms'
      }).removeClass(inClass).addClass(outClass).trigger(__.settings.events.outStart).animateCallback(function () {
        $this.trigger(__.settings.events.outEnd);
        options.transition(url);
      });
    },
    destroy: function destroy() {
      return this.each(function () {
        var $this = $(this);
        $(window).off('.' + namespace);
        $this.css({
          'opacity': 1
        }).removeData(namespace);
      });
    }
  };

  $.fn.animateCallback = function (callback) {
    var end = 'animationend webkitAnimationEnd';
    return this.each(function () {
      var $this = $(this);
      $this.on(end, function () {
        $this.off(end);
        return callback.call(this);
      });
    });
  };

  $.fn.animsition = function (method) {
    if (__[method]) {
      return __[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (_typeof2(method) === 'object' || !method) {
      return __.init.apply(this, arguments);
    } else {
      $.error('Method ' + method + ' does not exist on jQuery.' + namespace);
    }
  };
});
/*
* jquery-match-height 0.7.2 by @liabru
* http://brm.io/jquery-match-height/
* License MIT
*/


!function (t) {
  "use strict";

  "function" == typeof define && define.amd ? define(["jquery"], t) : "undefined" != typeof module && module.exports ? module.exports = t(require("jquery")) : t(jQuery);
}(function (t) {
  var e = -1,
      o = -1,
      n = function n(t) {
    return parseFloat(t) || 0;
  },
      a = function a(e) {
    var o = 1,
        a = t(e),
        i = null,
        r = [];
    return a.each(function () {
      var e = t(this),
          a = e.offset().top - n(e.css("margin-top")),
          s = r.length > 0 ? r[r.length - 1] : null;
      null === s ? r.push(e) : Math.floor(Math.abs(i - a)) <= o ? r[r.length - 1] = s.add(e) : r.push(e), i = a;
    }), r;
  },
      i = function i(e) {
    var o = {
      byRow: !0,
      property: "height",
      target: null,
      remove: !1
    };
    return "object" == _typeof2(e) ? t.extend(o, e) : ("boolean" == typeof e ? o.byRow = e : "remove" === e && (o.remove = !0), o);
  },
      r = t.fn.matchHeight = function (e) {
    var o = i(e);

    if (o.remove) {
      var n = this;
      return this.css(o.property, ""), t.each(r._groups, function (t, e) {
        e.elements = e.elements.not(n);
      }), this;
    }

    return this.length <= 1 && !o.target ? this : (r._groups.push({
      elements: this,
      options: o
    }), r._apply(this, o), this);
  };

  r.version = "0.7.2", r._groups = [], r._throttle = 80, r._maintainScroll = !1, r._beforeUpdate = null, r._afterUpdate = null, r._rows = a, r._parse = n, r._parseOptions = i, r._apply = function (e, o) {
    var s = i(o),
        h = t(e),
        l = [h],
        c = t(window).scrollTop(),
        p = t("html").outerHeight(!0),
        u = h.parents().filter(":hidden");
    return u.each(function () {
      var e = t(this);
      e.data("style-cache", e.attr("style"));
    }), u.css("display", "block"), s.byRow && !s.target && (h.each(function () {
      var e = t(this),
          o = e.css("display");
      "inline-block" !== o && "flex" !== o && "inline-flex" !== o && (o = "block"), e.data("style-cache", e.attr("style")), e.css({
        display: o,
        "padding-top": "0",
        "padding-bottom": "0",
        "margin-top": "0",
        "margin-bottom": "0",
        "border-top-width": "0",
        "border-bottom-width": "0",
        height: "100px",
        overflow: "hidden"
      });
    }), l = a(h), h.each(function () {
      var e = t(this);
      e.attr("style", e.data("style-cache") || "");
    })), t.each(l, function (e, o) {
      var a = t(o),
          i = 0;
      if (s.target) i = s.target.outerHeight(!1);else {
        if (s.byRow && a.length <= 1) return void a.css(s.property, "");
        a.each(function () {
          var e = t(this),
              o = e.attr("style"),
              n = e.css("display");
          "inline-block" !== n && "flex" !== n && "inline-flex" !== n && (n = "block");
          var a = {
            display: n
          };
          a[s.property] = "", e.css(a), e.outerHeight(!1) > i && (i = e.outerHeight(!1)), o ? e.attr("style", o) : e.css("display", "");
        });
      }
      a.each(function () {
        var e = t(this),
            o = 0;
        s.target && e.is(s.target) || ("border-box" !== e.css("box-sizing") && (o += n(e.css("border-top-width")) + n(e.css("border-bottom-width")), o += n(e.css("padding-top")) + n(e.css("padding-bottom"))), e.css(s.property, i - o + "px"));
      });
    }), u.each(function () {
      var e = t(this);
      e.attr("style", e.data("style-cache") || null);
    }), r._maintainScroll && t(window).scrollTop(c / p * t("html").outerHeight(!0)), this;
  }, r._applyDataApi = function () {
    var e = {};
    t("[data-match-height], [data-mh]").each(function () {
      var o = t(this),
          n = o.attr("data-mh") || o.attr("data-match-height");
      n in e ? e[n] = e[n].add(o) : e[n] = o;
    }), t.each(e, function () {
      this.matchHeight(!0);
    });
  };

  var s = function s(e) {
    r._beforeUpdate && r._beforeUpdate(e, r._groups), t.each(r._groups, function () {
      r._apply(this.elements, this.options);
    }), r._afterUpdate && r._afterUpdate(e, r._groups);
  };

  r._update = function (n, a) {
    if (a && "resize" === a.type) {
      var i = t(window).width();
      if (i === e) return;
      e = i;
    }

    n ? o === -1 && (o = setTimeout(function () {
      s(a), o = -1;
    }, r._throttle)) : s(a);
  }, t(r._applyDataApi);
  var h = t.fn.on ? "on" : "bind";
  t(window)[h]("load", function (t) {
    r._update(!1, t);
  }), t(window)[h]("resize orientationchange", function (t) {
    r._update(!0, t);
  });
}); // jQuery Mask Plugin v1.14.16
// github.com/igorescobar/jQuery-Mask-Plugin

var $jscomp = $jscomp || {};
$jscomp.scope = {};

$jscomp.findInternal = function (a, n, f) {
  a instanceof String && (a = String(a));

  for (var p = a.length, k = 0; k < p; k++) {
    var b = a[k];
    if (n.call(f, b, k, a)) return {
      i: k,
      v: b
    };
  }

  return {
    i: -1,
    v: void 0
  };
};

$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.SIMPLE_FROUND_POLYFILL = !1;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, n, f) {
  a != Array.prototype && a != Object.prototype && (a[n] = f.value);
};

$jscomp.getGlobal = function (a) {
  return "undefined" != typeof window && window === a ? a : "undefined" != typeof global && null != global ? global : a;
};

$jscomp.global = $jscomp.getGlobal(this);

$jscomp.polyfill = function (a, n, f, p) {
  if (n) {
    f = $jscomp.global;
    a = a.split(".");

    for (p = 0; p < a.length - 1; p++) {
      var k = a[p];
      k in f || (f[k] = {});
      f = f[k];
    }

    a = a[a.length - 1];
    p = f[a];
    n = n(p);
    n != p && null != n && $jscomp.defineProperty(f, a, {
      configurable: !0,
      writable: !0,
      value: n
    });
  }
};

$jscomp.polyfill("Array.prototype.find", function (a) {
  return a ? a : function (a, f) {
    return $jscomp.findInternal(this, a, f).v;
  };
}, "es6", "es3");

(function (a, n, f) {
  "function" === typeof define && define.amd ? define(["jquery"], a) : "object" === (typeof exports === "undefined" ? "undefined" : _typeof2(exports)) && "undefined" === typeof Meteor ? module.exports = a(require("jquery")) : a(n || f);
})(function (a) {
  var n = function n(b, d, e) {
    var c = {
      invalid: [],
      getCaret: function getCaret() {
        try {
          var a = 0,
              r = b.get(0),
              h = document.selection,
              d = r.selectionStart;

          if (h && -1 === navigator.appVersion.indexOf("MSIE 10")) {
            var e = h.createRange();
            e.moveStart("character", -c.val().length);
            a = e.text.length;
          } else if (d || "0" === d) a = d;

          return a;
        } catch (C) {}
      },
      setCaret: function setCaret(a) {
        try {
          if (b.is(":focus")) {
            var c = b.get(0);
            if (c.setSelectionRange) c.setSelectionRange(a, a);else {
              var g = c.createTextRange();
              g.collapse(!0);
              g.moveEnd("character", a);
              g.moveStart("character", a);
              g.select();
            }
          }
        } catch (B) {}
      },
      events: function events() {
        b.on("keydown.mask", function (a) {
          b.data("mask-keycode", a.keyCode || a.which);
          b.data("mask-previus-value", b.val());
          b.data("mask-previus-caret-pos", c.getCaret());
          c.maskDigitPosMapOld = c.maskDigitPosMap;
        }).on(a.jMaskGlobals.useInput ? "input.mask" : "keyup.mask", c.behaviour).on("paste.mask drop.mask", function () {
          setTimeout(function () {
            b.keydown().keyup();
          }, 100);
        }).on("change.mask", function () {
          b.data("changed", !0);
        }).on("blur.mask", function () {
          f === c.val() || b.data("changed") || b.trigger("change");
          b.data("changed", !1);
        }).on("blur.mask", function () {
          f = c.val();
        }).on("focus.mask", function (b) {
          !0 === e.selectOnFocus && a(b.target).select();
        }).on("focusout.mask", function () {
          e.clearIfNotMatch && !k.test(c.val()) && c.val("");
        });
      },
      getRegexMask: function getRegexMask() {
        for (var a = [], b, c, e, t, f = 0; f < d.length; f++) {
          (b = l.translation[d.charAt(f)]) ? (c = b.pattern.toString().replace(/.{1}$|^.{1}/g, ""), e = b.optional, (b = b.recursive) ? (a.push(d.charAt(f)), t = {
            digit: d.charAt(f),
            pattern: c
          }) : a.push(e || b ? c + "?" : c)) : a.push(d.charAt(f).replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"));
        }

        a = a.join("");
        t && (a = a.replace(new RegExp("(" + t.digit + "(.*" + t.digit + ")?)"), "($1)?").replace(new RegExp(t.digit, "g"), t.pattern));
        return new RegExp(a);
      },
      destroyEvents: function destroyEvents() {
        b.off("input keydown keyup paste drop blur focusout ".split(" ").join(".mask "));
      },
      val: function val(a) {
        var c = b.is("input") ? "val" : "text";

        if (0 < arguments.length) {
          if (b[c]() !== a) b[c](a);
          c = b;
        } else c = b[c]();

        return c;
      },
      calculateCaretPosition: function calculateCaretPosition(a) {
        var d = c.getMasked(),
            h = c.getCaret();

        if (a !== d) {
          var e = b.data("mask-previus-caret-pos") || 0;
          d = d.length;
          var g = a.length,
              f = a = 0,
              l = 0,
              k = 0,
              m;

          for (m = h; m < d && c.maskDigitPosMap[m]; m++) {
            f++;
          }

          for (m = h - 1; 0 <= m && c.maskDigitPosMap[m]; m--) {
            a++;
          }

          for (m = h - 1; 0 <= m; m--) {
            c.maskDigitPosMap[m] && l++;
          }

          for (m = e - 1; 0 <= m; m--) {
            c.maskDigitPosMapOld[m] && k++;
          }

          h > g ? h = 10 * d : e >= h && e !== g ? c.maskDigitPosMapOld[h] || (e = h, h = h - (k - l) - a, c.maskDigitPosMap[h] && (h = e)) : h > e && (h = h + (l - k) + f);
        }

        return h;
      },
      behaviour: function behaviour(d) {
        d = d || window.event;
        c.invalid = [];
        var e = b.data("mask-keycode");

        if (-1 === a.inArray(e, l.byPassKeys)) {
          e = c.getMasked();
          var h = c.getCaret(),
              g = b.data("mask-previus-value") || "";
          setTimeout(function () {
            c.setCaret(c.calculateCaretPosition(g));
          }, a.jMaskGlobals.keyStrokeCompensation);
          c.val(e);
          c.setCaret(h);
          return c.callbacks(d);
        }
      },
      getMasked: function getMasked(a, b) {
        var h = [],
            f = void 0 === b ? c.val() : b + "",
            g = 0,
            k = d.length,
            n = 0,
            p = f.length,
            m = 1,
            r = "push",
            u = -1,
            w = 0;
        b = [];

        if (e.reverse) {
          r = "unshift";
          m = -1;
          var x = 0;
          g = k - 1;
          n = p - 1;

          var A = function A() {
            return -1 < g && -1 < n;
          };
        } else x = k - 1, A = function A() {
          return g < k && n < p;
        };

        for (var z; A();) {
          var y = d.charAt(g),
              v = f.charAt(n),
              q = l.translation[y];
          if (q) v.match(q.pattern) ? (h[r](v), q.recursive && (-1 === u ? u = g : g === x && g !== u && (g = u - m), x === u && (g -= m)), g += m) : v === z ? (w--, z = void 0) : q.optional ? (g += m, n -= m) : q.fallback ? (h[r](q.fallback), g += m, n -= m) : c.invalid.push({
            p: n,
            v: v,
            e: q.pattern
          }), n += m;else {
            if (!a) h[r](y);
            v === y ? (b.push(n), n += m) : (z = y, b.push(n + w), w++);
            g += m;
          }
        }

        a = d.charAt(x);
        k !== p + 1 || l.translation[a] || h.push(a);
        h = h.join("");
        c.mapMaskdigitPositions(h, b, p);
        return h;
      },
      mapMaskdigitPositions: function mapMaskdigitPositions(a, b, d) {
        a = e.reverse ? a.length - d : 0;
        c.maskDigitPosMap = {};

        for (d = 0; d < b.length; d++) {
          c.maskDigitPosMap[b[d] + a] = 1;
        }
      },
      callbacks: function callbacks(a) {
        var g = c.val(),
            h = g !== f,
            k = [g, a, b, e],
            l = function l(a, b, c) {
          "function" === typeof e[a] && b && e[a].apply(this, c);
        };

        l("onChange", !0 === h, k);
        l("onKeyPress", !0 === h, k);
        l("onComplete", g.length === d.length, k);
        l("onInvalid", 0 < c.invalid.length, [g, a, b, c.invalid, e]);
      }
    };
    b = a(b);
    var l = this,
        f = c.val(),
        k;
    d = "function" === typeof d ? d(c.val(), void 0, b, e) : d;
    l.mask = d;
    l.options = e;

    l.remove = function () {
      var a = c.getCaret();
      l.options.placeholder && b.removeAttr("placeholder");
      b.data("mask-maxlength") && b.removeAttr("maxlength");
      c.destroyEvents();
      c.val(l.getCleanVal());
      c.setCaret(a);
      return b;
    };

    l.getCleanVal = function () {
      return c.getMasked(!0);
    };

    l.getMaskedVal = function (a) {
      return c.getMasked(!1, a);
    };

    l.init = function (g) {
      g = g || !1;
      e = e || {};
      l.clearIfNotMatch = a.jMaskGlobals.clearIfNotMatch;
      l.byPassKeys = a.jMaskGlobals.byPassKeys;
      l.translation = a.extend({}, a.jMaskGlobals.translation, e.translation);
      l = a.extend(!0, {}, l, e);
      k = c.getRegexMask();
      if (g) c.events(), c.val(c.getMasked());else {
        e.placeholder && b.attr("placeholder", e.placeholder);
        b.data("mask") && b.attr("autocomplete", "off");
        g = 0;

        for (var f = !0; g < d.length; g++) {
          var h = l.translation[d.charAt(g)];

          if (h && h.recursive) {
            f = !1;
            break;
          }
        }

        f && b.attr("maxlength", d.length).data("mask-maxlength", !0);
        c.destroyEvents();
        c.events();
        g = c.getCaret();
        c.val(c.getMasked());
        c.setCaret(g);
      }
    };

    l.init(!b.is("input"));
  };

  a.maskWatchers = {};

  var f = function f() {
    var b = a(this),
        d = {},
        e = b.attr("data-mask");
    b.attr("data-mask-reverse") && (d.reverse = !0);
    b.attr("data-mask-clearifnotmatch") && (d.clearIfNotMatch = !0);
    "true" === b.attr("data-mask-selectonfocus") && (d.selectOnFocus = !0);
    if (p(b, e, d)) return b.data("mask", new n(this, e, d));
  },
      p = function p(b, d, e) {
    e = e || {};
    var c = a(b).data("mask"),
        f = JSON.stringify;
    b = a(b).val() || a(b).text();

    try {
      return "function" === typeof d && (d = d(b)), "object" !== _typeof2(c) || f(c.options) !== f(e) || c.mask !== d;
    } catch (w) {}
  },
      k = function k(a) {
    var b = document.createElement("div");
    a = "on" + a;
    var e = (a in b);
    e || (b.setAttribute(a, "return;"), e = "function" === typeof b[a]);
    return e;
  };

  a.fn.mask = function (b, d) {
    d = d || {};
    var e = this.selector,
        c = a.jMaskGlobals,
        f = c.watchInterval;
    c = d.watchInputs || c.watchInputs;

    var k = function k() {
      if (p(this, b, d)) return a(this).data("mask", new n(this, b, d));
    };

    a(this).each(k);
    e && "" !== e && c && (clearInterval(a.maskWatchers[e]), a.maskWatchers[e] = setInterval(function () {
      a(document).find(e).each(k);
    }, f));
    return this;
  };

  a.fn.masked = function (a) {
    return this.data("mask").getMaskedVal(a);
  };

  a.fn.unmask = function () {
    clearInterval(a.maskWatchers[this.selector]);
    delete a.maskWatchers[this.selector];
    return this.each(function () {
      var b = a(this).data("mask");
      b && b.remove().removeData("mask");
    });
  };

  a.fn.cleanVal = function () {
    return this.data("mask").getCleanVal();
  };

  a.applyDataMask = function (b) {
    b = b || a.jMaskGlobals.maskElements;
    (b instanceof a ? b : a(b)).filter(a.jMaskGlobals.dataMaskAttr).each(f);
  };

  k = {
    maskElements: "input,td,span,div",
    dataMaskAttr: "*[data-mask]",
    dataMask: !0,
    watchInterval: 300,
    watchInputs: !0,
    keyStrokeCompensation: 10,
    useInput: !/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent) && k("input"),
    watchDataMask: !1,
    byPassKeys: [9, 16, 17, 18, 36, 37, 38, 39, 40, 91],
    translation: {
      0: {
        pattern: /\d/
      },
      9: {
        pattern: /\d/,
        optional: !0
      },
      "#": {
        pattern: /\d/,
        recursive: !0
      },
      A: {
        pattern: /[a-zA-Z0-9]/
      },
      S: {
        pattern: /[a-zA-Z]/
      }
    }
  };
  a.jMaskGlobals = a.jMaskGlobals || {};
  k = a.jMaskGlobals = a.extend(!0, {}, k, a.jMaskGlobals);
  k.dataMask && a.applyDataMask();
  setInterval(function () {
    a.jMaskGlobals.watchDataMask && a.applyDataMask();
  }, k.watchInterval);
}, window.jQuery, window.Zepto);

(function ($) {
  "use strict";

  if (!$.browser) {
    $.browser = {};
    $.browser.mozilla = /mozilla/.test(navigator.userAgent.toLowerCase()) && !/webkit/.test(navigator.userAgent.toLowerCase());
    $.browser.webkit = /webkit/.test(navigator.userAgent.toLowerCase());
    $.browser.opera = /opera/.test(navigator.userAgent.toLowerCase());
    $.browser.msie = /msie/.test(navigator.userAgent.toLowerCase());
    $.browser.device = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase());
  }

  var defaultOptions = {
    prefix: "",
    suffix: "",
    affixesStay: true,
    thousands: ",",
    decimal: ".",
    precision: 2,
    allowZero: false,
    allowNegative: false,
    doubleClickSelection: true,
    allowEmpty: false,
    bringCaretAtEndOnFocus: true
  },
      methods = {
    destroy: function destroy() {
      $(this).unbind(".maskMoney");

      if ($.browser.msie) {
        this.onpaste = null;
      }

      return this;
    },
    applyMask: function applyMask(value) {
      var $input = $(this); // data-* api

      var settings = $input.data("settings");
      return maskValue(value, settings);
    },
    mask: function mask(value) {
      return this.each(function () {
        var $this = $(this);

        if (typeof value === "number") {
          $this.val(value);
        }

        return $this.trigger("mask");
      });
    },
    unmasked: function unmasked() {
      return this.map(function () {
        var value = $(this).val() || "0",
            isNegative = value.indexOf("-") !== -1,
            decimalPart; // get the last position of the array that is a number(coercion makes "" to be evaluated as false)

        $(value.split(/\D/).reverse()).each(function (index, element) {
          if (element) {
            decimalPart = element;
            return false;
          }
        });
        value = value.replace(/\D/g, "");
        value = value.replace(new RegExp(decimalPart + "$"), "." + decimalPart);

        if (isNegative) {
          value = "-" + value;
        }

        return parseFloat(value);
      });
    },
    unmaskedWithOptions: function unmaskedWithOptions() {
      return this.map(function () {
        var value = $(this).val() || "0",
            settings = $(this).data("settings") || defaultOptions,
            regExp = new RegExp(settings.thousandsForUnmasked || settings.thousands, "g");
        value = value.replace(regExp, "");
        return parseFloat(value);
      });
    },
    init: function init(parameters) {
      // the default options should not be shared with others
      parameters = $.extend($.extend({}, defaultOptions), parameters);
      return this.each(function () {
        var $input = $(this),
            settings,
            onFocusValue; // data-* api

        settings = $.extend({}, parameters);
        settings = $.extend(settings, $input.data()); // Store settings for use with the applyMask method.

        $input.data("settings", settings);

        function getInputSelection() {
          var el = $input.get(0),
              start = 0,
              end = 0,
              normalizedValue,
              range,
              textInputRange,
              len,
              endRange;

          if (typeof el.selectionStart === "number" && typeof el.selectionEnd === "number") {
            start = el.selectionStart;
            end = el.selectionEnd;
          } else {
            range = document.selection.createRange();

            if (range && range.parentElement() === el) {
              len = el.value.length;
              normalizedValue = el.value.replace(/\r\n/g, "\n"); // Create a working TextRange that lives only in the input

              textInputRange = el.createTextRange();
              textInputRange.moveToBookmark(range.getBookmark()); // Check if the start and end of the selection are at the very end
              // of the input, since moveStart/moveEnd doesn't return what we want
              // in those cases

              endRange = el.createTextRange();
              endRange.collapse(false);

              if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
                start = end = len;
              } else {
                start = -textInputRange.moveStart("character", -len);
                start += normalizedValue.slice(0, start).split("\n").length - 1;

                if (textInputRange.compareEndPoints("EndToEnd", endRange) > -1) {
                  end = len;
                } else {
                  end = -textInputRange.moveEnd("character", -len);
                  end += normalizedValue.slice(0, end).split("\n").length - 1;
                }
              }
            }
          }

          return {
            start: start,
            end: end
          };
        } // getInputSelection


        function canInputMoreNumbers() {
          var haventReachedMaxLength = !($input.val().length >= $input.attr("maxlength") && $input.attr("maxlength") >= 0),
              selection = getInputSelection(),
              start = selection.start,
              end = selection.end,
              haveNumberSelected = selection.start !== selection.end && $input.val().substring(start, end).match(/\d/) ? true : false,
              startWithZero = $input.val().substring(0, 1) === "0";
          return haventReachedMaxLength || haveNumberSelected || startWithZero;
        }

        function setCursorPosition(pos) {
          // Do not set the position if
          // the we're formatting on blur.
          // This is because we do not want
          // to refocus on the control after
          // the blur.
          if (!!settings.formatOnBlur) {
            return;
          }

          $input.each(function (index, elem) {
            if (elem.setSelectionRange) {
              elem.focus();
              elem.setSelectionRange(pos, pos);
            } else if (elem.createTextRange) {
              var range = elem.createTextRange();
              range.collapse(true);
              range.moveEnd("character", pos);
              range.moveStart("character", pos);
              range.select();
            }
          });
        }

        function maskAndPosition(startPos) {
          var originalLen = $input.val().length,
              newLen;
          $input.val(maskValue($input.val(), settings));
          newLen = $input.val().length; // If the we're using the reverse option,
          // do not put the cursor at the end of
          // the input. The reverse option allows
          // the user to input text from left to right.

          if (!settings.reverse) {
            startPos = startPos - (originalLen - newLen);
          }

          setCursorPosition(startPos);
        }

        function mask() {
          var value = $input.val();

          if (settings.allowEmpty && value === "") {
            return;
          }

          var isNumber = !isNaN(value);
          var decimalPointIndex = isNumber ? value.indexOf(".") : value.indexOf(settings.decimal);

          if (settings.precision > 0) {
            if (decimalPointIndex < 0) {
              value += settings.decimal + new Array(settings.precision + 1).join(0);
            } else {
              // If the following decimal part dosen't have enough length against the precision, it needs to be filled with zeros.
              var integerPart = value.slice(0, decimalPointIndex),
                  decimalPart = value.slice(decimalPointIndex + 1);
              value = integerPart + settings.decimal + decimalPart + new Array(settings.precision + 1 - decimalPart.length).join(0);
            }
          } else if (decimalPointIndex > 0) {
            // if the precision is 0, discard the decimal part
            value = value.slice(0, decimalPointIndex);
          }

          $input.val(maskValue(value, settings));
        }

        function changeSign() {
          var inputValue = $input.val();

          if (settings.allowNegative) {
            if (inputValue !== "" && inputValue.charAt(0) === "-") {
              return inputValue.replace("-", "");
            } else {
              return "-" + inputValue;
            }
          } else {
            return inputValue;
          }
        }

        function preventDefault(e) {
          if (e.preventDefault) {
            //standard browsers
            e.preventDefault();
          } else {
            // old internet explorer
            e.returnValue = false;
          }
        }

        function fixMobile() {
          if ($.browser.device) {
            $input.attr("type", "tel");
          }
        }

        function keypressEvent(e) {
          e = e || window.event;
          var key = e.which || e.charCode || e.keyCode,
              decimalKeyCode = settings.decimal.charCodeAt(0); //added to handle an IE "special" event

          if (key === undefined) {
            return false;
          } // any key except the numbers 0-9. if we're using settings.reverse,
          // allow the user to input the decimal key


          if ((key < 48 || key > 57) && (key !== decimalKeyCode || !settings.reverse)) {
            return handleAllKeysExceptNumericalDigits(key, e);
          } else if (!canInputMoreNumbers()) {
            return false;
          } else {
            if (key === decimalKeyCode && shouldPreventDecimalKey()) {
              return false;
            }

            if (settings.formatOnBlur) {
              return true;
            }

            preventDefault(e);
            applyMask(e);
            return false;
          }
        }

        function shouldPreventDecimalKey() {
          // If all text is selected, we can accept the decimal
          // key because it will replace everything.
          if (isAllTextSelected()) {
            return false;
          }

          return alreadyContainsDecimal();
        }

        function isAllTextSelected() {
          var length = $input.val().length;
          var selection = getInputSelection(); // This should if all text is selected or if the
          // input is empty.

          return selection.start === 0 && selection.end === length;
        }

        function alreadyContainsDecimal() {
          return $input.val().indexOf(settings.decimal) > -1;
        }

        function applyMask(e) {
          e = e || window.event;
          var key = e.which || e.charCode || e.keyCode,
              keyPressedChar = "",
              selection,
              startPos,
              endPos,
              value;

          if (key >= 48 && key <= 57) {
            keyPressedChar = String.fromCharCode(key);
          }

          selection = getInputSelection();
          startPos = selection.start;
          endPos = selection.end;
          value = $input.val();
          $input.val(value.substring(0, startPos) + keyPressedChar + value.substring(endPos, value.length));
          maskAndPosition(startPos + 1);
        }

        function handleAllKeysExceptNumericalDigits(key, e) {
          // -(minus) key
          if (key === 45) {
            $input.val(changeSign());
            return false; // +(plus) key
          } else if (key === 43) {
            $input.val($input.val().replace("-", ""));
            return false; // enter key or tab key
          } else if (key === 13 || key === 9) {
            return true;
          } else if ($.browser.mozilla && (key === 37 || key === 39) && e.charCode === 0) {
            // needed for left arrow key or right arrow key with firefox
            // the charCode part is to avoid allowing "%"(e.charCode 0, e.keyCode 37)
            return true;
          } else {
            // any other key with keycode less than 48 and greater than 57
            preventDefault(e);
            return true;
          }
        }

        function keydownEvent(e) {
          e = e || window.event;
          var key = e.which || e.charCode || e.keyCode,
              selection,
              startPos,
              endPos,
              value,
              lastNumber; //needed to handle an IE "special" event

          if (key === undefined) {
            return false;
          }

          selection = getInputSelection();
          startPos = selection.start;
          endPos = selection.end;

          if (key === 8 || key === 46 || key === 63272) {
            // backspace or delete key (with special case for safari)
            preventDefault(e);
            value = $input.val(); // not a selection

            if (startPos === endPos) {
              // backspace
              if (key === 8) {
                if (settings.suffix === "") {
                  startPos -= 1;
                } else {
                  // needed to find the position of the last number to be erased
                  lastNumber = value.split("").reverse().join("").search(/\d/);
                  startPos = value.length - lastNumber - 1;
                  endPos = startPos + 1;
                } //delete

              } else {
                endPos += 1;
              }
            }

            $input.val(value.substring(0, startPos) + value.substring(endPos, value.length));
            maskAndPosition(startPos);
            return false;
          } else if (key === 9) {
            // tab key
            return true;
          } else {
            // any other key
            return true;
          }
        }

        function focusEvent() {
          onFocusValue = $input.val();
          mask();
          var input = $input.get(0),
              textRange;

          if (!!settings.selectAllOnFocus) {
            input.select();
          } else if (input.createTextRange && settings.bringCaretAtEndOnFocus) {
            textRange = input.createTextRange();
            textRange.collapse(false); // set the cursor at the end of the input

            textRange.select();
          }
        }

        function cutPasteEvent() {
          setTimeout(function () {
            mask();
          }, 0);
        }

        function getDefaultMask() {
          var n = parseFloat("0") / Math.pow(10, settings.precision);
          return n.toFixed(settings.precision).replace(new RegExp("\\.", "g"), settings.decimal);
        }

        function blurEvent(e) {
          if ($.browser.msie) {
            keypressEvent(e);
          }

          if (!!settings.formatOnBlur && $input.val() !== onFocusValue) {
            applyMask(e);
          }

          if ($input.val() === "" && settings.allowEmpty) {
            $input.val("");
          } else if ($input.val() === "" || $input.val() === setSymbol(getDefaultMask(), settings)) {
            if (!settings.allowZero) {
              $input.val("");
            } else if (!settings.affixesStay) {
              $input.val(getDefaultMask());
            } else {
              $input.val(setSymbol(getDefaultMask(), settings));
            }
          } else {
            if (!settings.affixesStay) {
              var newValue = $input.val().replace(settings.prefix, "").replace(settings.suffix, "");
              $input.val(newValue);
            }
          }

          if ($input.val() !== onFocusValue) {
            $input.change();
          }
        }

        function clickEvent() {
          var input = $input.get(0),
              length;

          if (!!settings.selectAllOnFocus) {
            // selectAllOnFocus will be handled by
            // the focus event. The focus event is
            // also fired when the input is clicked.
            return;
          } else if (input.setSelectionRange && settings.bringCaretAtEndOnFocus) {
            length = $input.val().length;
            input.setSelectionRange(length, length);
          } else {
            $input.val($input.val());
          }
        }

        function doubleClickEvent() {
          var input = $input.get(0),
              start,
              length;

          if (input.setSelectionRange && settings.bringCaretAtEndOnFocus) {
            length = $input.val().length;
            start = settings.doubleClickSelection ? 0 : length;
            input.setSelectionRange(start, length);
          } else {
            $input.val($input.val());
          }
        }

        fixMobile();
        $input.unbind(".maskMoney");
        $input.bind("keypress.maskMoney", keypressEvent);
        $input.bind("keydown.maskMoney", keydownEvent);
        $input.bind("blur.maskMoney", blurEvent);
        $input.bind("focus.maskMoney", focusEvent);
        $input.bind("click.maskMoney", clickEvent);
        $input.bind("dblclick.maskMoney", doubleClickEvent);
        $input.bind("cut.maskMoney", cutPasteEvent);
        $input.bind("paste.maskMoney", cutPasteEvent);
        $input.bind("mask.maskMoney", mask);
      });
    }
  };

  function setSymbol(value, settings) {
    var operator = "";

    if (value.indexOf("-") > -1) {
      value = value.replace("-", "");
      operator = "-";
    }

    if (value.indexOf(settings.prefix) > -1) {
      value = value.replace(settings.prefix, "");
    }

    if (value.indexOf(settings.suffix) > -1) {
      value = value.replace(settings.suffix, "");
    }

    return operator + settings.prefix + value + settings.suffix;
  }

  function maskValue(value, settings) {
    if (settings.allowEmpty && value === "") {
      return "";
    }

    if (!!settings.reverse) {
      return maskValueReverse(value, settings);
    }

    return maskValueStandard(value, settings);
  }

  function maskValueStandard(value, settings) {
    var negative = value.indexOf("-") > -1 && settings.allowNegative ? "-" : "",
        onlyNumbers = value.replace(/[^0-9]/g, ""),
        integerPart = onlyNumbers.slice(0, onlyNumbers.length - settings.precision),
        newValue,
        decimalPart,
        leadingZeros;
    newValue = buildIntegerPart(integerPart, negative, settings);

    if (settings.precision > 0) {
      if (!isNaN(value) && value.indexOf(".")) {
        var precision = value.substr(value.indexOf(".") + 1);
        onlyNumbers += new Array(settings.precision + 1 - precision.length).join(0);
        integerPart = onlyNumbers.slice(0, onlyNumbers.length - settings.precision);
        newValue = buildIntegerPart(integerPart, negative, settings);
      }

      decimalPart = onlyNumbers.slice(onlyNumbers.length - settings.precision);
      leadingZeros = new Array(settings.precision + 1 - decimalPart.length).join(0);
      newValue += settings.decimal + leadingZeros + decimalPart;
    }

    return setSymbol(newValue, settings);
  }

  function maskValueReverse(value, settings) {
    var negative = value.indexOf("-") > -1 && settings.allowNegative ? "-" : "",
        valueWithoutSymbol = value.replace(settings.prefix, "").replace(settings.suffix, ""),
        integerPart = valueWithoutSymbol.split(settings.decimal)[0],
        newValue,
        decimalPart = "";

    if (integerPart === "") {
      integerPart = "0";
    }

    newValue = buildIntegerPart(integerPart, negative, settings);

    if (settings.precision > 0) {
      var arr = valueWithoutSymbol.split(settings.decimal);

      if (arr.length > 1) {
        decimalPart = arr[1];
      }

      newValue += settings.decimal + decimalPart;
      var rounded = Number.parseFloat(integerPart + "." + decimalPart).toFixed(settings.precision);
      var roundedDecimalPart = rounded.toString().split(settings.decimal)[1];
      newValue = newValue.split(settings.decimal)[0] + "." + roundedDecimalPart;
    }

    return setSymbol(newValue, settings);
  }

  function buildIntegerPart(integerPart, negative, settings) {
    // remove initial zeros
    integerPart = integerPart.replace(/^0*/g, ""); // put settings.thousands every 3 chars

    integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, settings.thousands);

    if (integerPart === "") {
      integerPart = "0";
    }

    return negative + integerPart;
  }

  $.fn.maskMoney = function (method) {
    if (methods[method]) {
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (_typeof2(method) === "object" || !method) {
      return methods.init.apply(this, arguments);
    } else {
      $.error("Method " + method + " does not exist on jQuery.maskMoney");
    }
  };
})(window.jQuery || window.Zepto);

!function (n, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof2(exports)) && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : n.Sweetalert2 = t();
}(this, function () {
  "use strict";

  var n = {
    title: "",
    titleText: "",
    text: "",
    html: "",
    footer: "",
    type: null,
    toast: !1,
    customClass: "",
    target: "body",
    backdrop: !0,
    animation: !0,
    allowOutsideClick: !0,
    allowEscapeKey: !0,
    allowEnterKey: !0,
    showConfirmButton: !0,
    showCancelButton: !1,
    preConfirm: null,
    confirmButtonText: "OK",
    confirmButtonAriaLabel: "",
    confirmButtonColor: null,
    confirmButtonClass: null,
    cancelButtonText: "Cancel",
    cancelButtonAriaLabel: "",
    cancelButtonColor: null,
    cancelButtonClass: null,
    buttonsStyling: !0,
    reverseButtons: !1,
    focusConfirm: !0,
    focusCancel: !1,
    showCloseButton: !1,
    closeButtonAriaLabel: "Close this dialog",
    showLoaderOnConfirm: !1,
    imageUrl: null,
    imageWidth: null,
    imageHeight: null,
    imageAlt: "",
    imageClass: null,
    timer: null,
    width: null,
    padding: null,
    background: null,
    input: null,
    inputPlaceholder: "",
    inputValue: "",
    inputOptions: {},
    inputAutoTrim: !0,
    inputClass: null,
    inputAttributes: {},
    inputValidator: null,
    grow: !1,
    position: "center",
    progressSteps: [],
    currentProgressStep: null,
    progressStepsDistance: null,
    onBeforeOpen: null,
    onOpen: null,
    onClose: null,
    useRejections: !1,
    expectRejections: !1
  },
      t = ["useRejections", "expectRejections"],
      e = function e(n) {
    var t = {};

    for (var e in n) {
      t[n[e]] = "swal2-" + n[e];
    }

    return t;
  },
      o = e(["container", "shown", "iosfix", "popup", "modal", "no-backdrop", "toast", "toast-shown", "fade", "show", "hide", "noanimation", "close", "title", "header", "content", "actions", "confirm", "cancel", "footer", "icon", "image", "input", "has-input", "file", "range", "select", "radio", "checkbox", "textarea", "inputerror", "validationerror", "progresssteps", "activeprogressstep", "progresscircle", "progressline", "loading", "styled", "top", "top-start", "top-end", "top-left", "top-right", "center", "center-start", "center-end", "center-left", "center-right", "bottom", "bottom-start", "bottom-end", "bottom-left", "bottom-right", "grow-row", "grow-column", "grow-fullscreen"]),
      a = e(["success", "warning", "info", "question", "error"]),
      s = "SweetAlert2:",
      r = function r(n) {
    console.warn(s + " " + n);
  },
      i = function i(n) {
    console.error(s + " " + n);
  },
      l = [],
      c = function c(n) {
    -1 === l.indexOf(n) && (l.push(n), r(n));
  },
      p = function p(n) {
    return "function" == typeof n ? n() : n;
  },
      w = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function (n) {
    return _typeof2(n);
  } : function (n) {
    return n && "function" == typeof Symbol && n.constructor === Symbol && n !== Symbol.prototype ? "symbol" : _typeof2(n);
  },
      u = Object.assign || function (n) {
    for (var t = 1; t < arguments.length; t++) {
      var e = arguments[t];

      for (var o in e) {
        Object.prototype.hasOwnProperty.call(e, o) && (n[o] = e[o]);
      }
    }

    return n;
  },
      d = function d(n, t) {
    if (Array.isArray(n)) return n;
    if (Symbol.iterator in Object(n)) return function (n, t) {
      var e = [],
          o = !0,
          a = !1,
          s = void 0;

      try {
        for (var r, i = n[Symbol.iterator](); !(o = (r = i.next()).done) && (e.push(r.value), !t || e.length !== t); o = !0) {
          ;
        }
      } catch (n) {
        a = !0, s = n;
      } finally {
        try {
          !o && i["return"] && i["return"]();
        } finally {
          if (a) throw s;
        }
      }

      return e;
    }(n, t);
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  },
      f = u({}, n),
      m = [],
      b = void 0,
      g = void 0,
      h = function h(n) {
    for (var t in n) {
      v.isValidParameter(t) || r('Unknown parameter "' + t + '"'), v.isDeprecatedParameter(t) && c('The parameter "' + t + '" is deprecated and will be removed in the next major release.');
    }
  },
      x = function x(n) {
    (!n.target || "string" == typeof n.target && !document.querySelector(n.target) || "string" != typeof n.target && !n.target.appendChild) && (r('Target parameter is not valid, defaulting to "body"'), n.target = "body");
    var t = void 0,
        e = P(),
        s = "string" == typeof n.target ? document.querySelector(n.target) : n.target;
    t = e && s && e.parentNode !== s.parentNode ? A(n) : e || A(n), n.width && (t.style.width = "number" == typeof n.width ? n.width + "px" : n.width), n.padding && (t.style.padding = "number" == typeof n.padding ? n.padding + "px" : n.padding), n.background && (t.style.background = n.background);

    for (var l = window.getComputedStyle(t).getPropertyValue("background-color"), c = t.querySelectorAll("[class^=swal2-success-circular-line], .swal2-success-fix"), p = 0; p < c.length; p++) {
      c[p].style.backgroundColor = l;
    }

    var w = E(),
        u = z(),
        d = j().querySelector("#" + o.content),
        f = Z(),
        m = Y(),
        b = R(),
        g = H(),
        h = D();

    if (n.titleText ? u.innerText = n.titleText : n.title && (u.innerHTML = n.title.split("\n").join("<br />")), "string" == typeof n.backdrop ? E().style.background = n.backdrop : n.backdrop || Q([document.documentElement, document.body], o["no-backdrop"]), n.html ? I(n.html, d) : n.text ? (d.textContent = n.text, G(d)) : nn(d), n.position in o ? Q(w, o[n.position]) : (r('The "position" parameter is not valid, defaulting to "center"'), Q(w, o.center)), n.grow && "string" == typeof n.grow) {
      var x = "grow-" + n.grow;
      x in o && Q(w, o[x]);
    }

    "function" == typeof n.animation && (n.animation = n.animation.call()), n.showCloseButton ? (g.setAttribute("aria-label", n.closeButtonAriaLabel), G(g)) : nn(g), t.className = o.popup, n.toast ? (Q([document.documentElement, document.body], o["toast-shown"]), Q(t, o.toast)) : Q(t, o.modal), n.customClass && Q(t, n.customClass);
    var k = V(),
        y = parseInt(null === n.currentProgressStep ? v.getQueueStep() : n.currentProgressStep, 10);
    n.progressSteps && n.progressSteps.length ? (G(k), tn(k), y >= n.progressSteps.length && r("Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)"), n.progressSteps.forEach(function (t, e) {
      var a = document.createElement("li");

      if (Q(a, o.progresscircle), a.innerHTML = t, e === y && Q(a, o.activeprogressstep), k.appendChild(a), e !== n.progressSteps.length - 1) {
        var s = document.createElement("li");
        Q(s, o.progressline), n.progressStepsDistance && (s.style.width = n.progressStepsDistance), k.appendChild(s);
      }
    })) : nn(k);

    for (var C = L(), S = 0; S < C.length; S++) {
      nn(C[S]);
    }

    if (n.type) {
      var B = !1;

      for (var T in a) {
        if (n.type === T) {
          B = !0;
          break;
        }
      }

      if (!B) return i("Unknown alert type: " + n.type), !1;
      var O = t.querySelector("." + o.icon + "." + a[n.type]);
      G(O), n.animation && Q(O, "swal2-animate-" + n.type + "-icon");
    }

    var N = q();

    if (n.imageUrl ? (N.setAttribute("src", n.imageUrl), N.setAttribute("alt", n.imageAlt), G(N), n.imageWidth ? N.setAttribute("width", n.imageWidth) : N.removeAttribute("width"), n.imageHeight ? N.setAttribute("height", n.imageHeight) : N.removeAttribute("height"), N.className = o.image, n.imageClass && Q(N, n.imageClass)) : nn(N), n.showCancelButton ? b.style.display = "inline-block" : nn(b), n.showConfirmButton ? on(m, "display") : nn(m), n.showConfirmButton || n.showCancelButton ? G(f) : nn(f), m.innerHTML = n.confirmButtonText, b.innerHTML = n.cancelButtonText, m.setAttribute("aria-label", n.confirmButtonAriaLabel), b.setAttribute("aria-label", n.cancelButtonAriaLabel), m.className = o.confirm, Q(m, n.confirmButtonClass), b.className = o.cancel, Q(b, n.cancelButtonClass), n.buttonsStyling) {
      Q([m, b], o.styled), n.confirmButtonColor && (m.style.backgroundColor = n.confirmButtonColor), n.cancelButtonColor && (b.style.backgroundColor = n.cancelButtonColor);
      var M = window.getComputedStyle(m).getPropertyValue("background-color");
      m.style.borderLeftColor = M, m.style.borderRightColor = M;
    } else F([m, b], o.styled), m.style.backgroundColor = m.style.borderLeftColor = m.style.borderRightColor = "", b.style.backgroundColor = b.style.borderLeftColor = b.style.borderRightColor = "";

    I(n.footer, h), !0 === n.animation ? F(t, o.noanimation) : Q(t, o.noanimation), n.showLoaderOnConfirm && !n.preConfirm && r("showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://sweetalert2.github.io/#ajax-request");
  },
      k = function k() {
    null === C.previousBodyPadding && document.body.scrollHeight > window.innerHeight && (C.previousBodyPadding = document.body.style.paddingRight, document.body.style.paddingRight = rn() + "px");
  },
      y = function y() {
    if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream && !W(document.body, o.iosfix)) {
      var n = document.body.scrollTop;
      document.body.style.top = -1 * n + "px", Q(document.body, o.iosfix);
    }
  },
      v = function n() {
    for (var t = arguments.length, e = Array(t), a = 0; a < t; a++) {
      e[a] = arguments[a];
    }

    if ("undefined" != typeof window) {
      if ("undefined" == typeof Promise && i("This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)"), void 0 === e[0]) return i("SweetAlert2 expects at least 1 attribute!"), !1;
      var s = u({}, f);

      switch (w(e[0])) {
        case "string":
          s.title = e[0], s.html = e[1], s.type = e[2];
          break;

        case "object":
          if (h(e[0]), u(s, e[0]), s.extraParams = e[0].extraParams, "email" === s.input && null === s.inputValidator) {
            var r = function r(n) {
              return new Promise(function (t, e) {
                /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(n) ? t() : e("Invalid email address");
              });
            };

            s.inputValidator = s.expectRejections ? r : n.adaptInputValidator(r);
          }

          if ("url" === s.input && null === s.inputValidator) {
            var l = function l(n) {
              return new Promise(function (t, e) {
                /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&//=]*)$/.test(n) ? t() : e("Invalid URL");
              });
            };

            s.inputValidator = s.expectRejections ? l : n.adaptInputValidator(l);
          }

          break;

        default:
          return i('Unexpected type of argument! Expected "string" or "object", got ' + w(e[0])), !1;
      }

      x(s);
      var c = E(),
          m = P();
      return new Promise(function (t, e) {
        var a = function a(e) {
          n.closePopup(s.onClose), s.useRejections ? t(e) : t({
            value: e
          });
        },
            r = function r(o) {
          n.closePopup(s.onClose), s.useRejections ? e(o) : t({
            dismiss: o
          });
        },
            l = function l(t) {
          n.closePopup(s.onClose), e(t);
        };

        s.timer && (m.timeout = setTimeout(function () {
          return r("timer");
        }, s.timer));

        var u = function u(n) {
          if (!(n = n || s.input)) return null;

          switch (n) {
            case "select":
            case "textarea":
            case "file":
              return J(B, o[n]);

            case "checkbox":
              return m.querySelector("." + o.checkbox + " input");

            case "radio":
              return m.querySelector("." + o.radio + " input:checked") || m.querySelector("." + o.radio + " input:first-child");

            case "range":
              return m.querySelector("." + o.range + " input");

            default:
              return J(B, o.input);
          }
        };

        s.input && setTimeout(function () {
          var n = u();
          n && K(n);
        }, 0);

        for (var f = function f(t) {
          if (s.showLoaderOnConfirm && n.showLoading(), s.preConfirm) {
            n.resetValidationError();
            var e = Promise.resolve().then(function () {
              return s.preConfirm(t, s.extraParams);
            });
            s.expectRejections ? e.then(function (n) {
              return a(n || t);
            }, function (t) {
              n.hideLoading(), t && n.showValidationError(t);
            }) : e.then(function (e) {
              en(O()) || !1 === e ? n.hideLoading() : a(e || t);
            }, function (n) {
              return l(n);
            });
          } else a(t);
        }, h = function h(t) {
          var e = t || window.event,
              o = e.target || e.srcElement,
              a = Y(),
              i = R(),
              c = a && (a === o || a.contains(o)),
              p = i && (i === o || i.contains(o));

          switch (e.type) {
            case "click":
              if (c && n.isVisible()) {
                if (n.disableButtons(), s.input) {
                  var w = function () {
                    var n = u();
                    if (!n) return null;

                    switch (s.input) {
                      case "checkbox":
                        return n.checked ? 1 : 0;

                      case "radio":
                        return n.checked ? n.value : null;

                      case "file":
                        return n.files.length ? n.files[0] : null;

                      default:
                        return s.inputAutoTrim ? n.value.trim() : n.value;
                    }
                  }();

                  if (s.inputValidator) {
                    n.disableInput();
                    var d = Promise.resolve().then(function () {
                      return s.inputValidator(w, s.extraParams);
                    });
                    s.expectRejections ? d.then(function () {
                      n.enableButtons(), n.enableInput(), f(w);
                    }, function (t) {
                      n.enableButtons(), n.enableInput(), t && n.showValidationError(t);
                    }) : d.then(function (t) {
                      n.enableButtons(), n.enableInput(), t ? n.showValidationError(t) : f(w);
                    }, function (n) {
                      return l(n);
                    });
                  } else f(w);
                } else f(!0);
              } else p && n.isVisible() && (n.disableButtons(), r(n.DismissReason.cancel));
          }
        }, v = m.querySelectorAll("button"), S = 0; S < v.length; S++) {
          v[S].onclick = h, v[S].onmouseover = h, v[S].onmouseout = h, v[S].onmousedown = h;
        }

        if (H().onclick = function () {
          r(n.DismissReason.close);
        }, s.toast) m.onclick = function (t) {
          t.target !== m || s.showConfirmButton || s.showCancelButton || s.allowOutsideClick && (n.closePopup(s.onClose), r(n.DismissReason.backdrop));
        };else {
          var A = !1;
          m.onmousedown = function () {
            c.onmouseup = function (n) {
              c.onmouseup = void 0, n.target === c && (A = !0);
            };
          }, c.onmousedown = function () {
            m.onmouseup = function (n) {
              m.onmouseup = void 0, (n.target === m || m.contains(n.target)) && (A = !0);
            };
          }, c.onclick = function (t) {
            A ? A = !1 : t.target === c && p(s.allowOutsideClick) && r(n.DismissReason.backdrop);
          };
        }
        var B = j(),
            L = Z(),
            T = Y(),
            I = R();
        s.reverseButtons ? T.parentNode.insertBefore(I, T) : T.parentNode.insertBefore(T, I);

        var $ = function $(n, t) {
          for (var e = M(s.focusCancel), o = 0; o < e.length; o++) {
            (n += t) === e.length ? n = 0 : -1 === n && (n = e.length - 1);
            var a = e[n];
            if (en(a)) return a.focus();
          }
        };

        s.toast && g && (window.onkeydown = b, g = !1), s.toast || g || (b = window.onkeydown, g = !0, window.onkeydown = function (t) {
          var e = t || window.event;
          if ("Enter" !== e.key || e.isComposing) {
            if ("Tab" === e.key) {
              for (var o = e.target || e.srcElement, a = M(s.focusCancel), i = -1, l = 0; l < a.length; l++) {
                if (o === a[l]) {
                  i = l;
                  break;
                }
              }

              e.shiftKey ? $(i, -1) : $(i, 1), e.stopPropagation(), e.preventDefault();
            } else -1 !== ["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", "Left", "Right", "Up", "Down"].indexOf(e.key) ? document.activeElement === T && en(I) ? I.focus() : document.activeElement === I && en(T) && T.focus() : "Escape" !== e.key && "Esc" !== e.key || !0 !== p(s.allowEscapeKey) || r(n.DismissReason.esc);
          } else if (e.target === u()) {
            if (-1 !== ["textarea", "file"].indexOf(s.input)) return;
            n.clickConfirm(), e.preventDefault();
          }
        }), n.hideLoading = n.disableLoading = function () {
          s.showConfirmButton || (nn(T), s.showCancelButton || nn(Z())), F([m, L], o.loading), m.removeAttribute("aria-busy"), m.removeAttribute("data-loading"), T.disabled = !1, I.disabled = !1;
        }, n.getTitle = function () {
          return z();
        }, n.getContent = function () {
          return j();
        }, n.getInput = function () {
          return u();
        }, n.getImage = function () {
          return q();
        }, n.getButtonsWrapper = function () {
          return N();
        }, n.getActions = function () {
          return Z();
        }, n.getConfirmButton = function () {
          return Y();
        }, n.getCancelButton = function () {
          return R();
        }, n.getFooter = function () {
          return D();
        }, n.isLoading = function () {
          return U();
        }, n.enableButtons = function () {
          T.disabled = !1, I.disabled = !1;
        }, n.disableButtons = function () {
          T.disabled = !0, I.disabled = !0;
        }, n.enableConfirmButton = function () {
          T.disabled = !1;
        }, n.disableConfirmButton = function () {
          T.disabled = !0;
        }, n.enableInput = function () {
          var n = u();
          if (!n) return !1;
          if ("radio" === n.type) for (var t = n.parentNode.parentNode.querySelectorAll("input"), e = 0; e < t.length; e++) {
            t[e].disabled = !1;
          } else n.disabled = !1;
        }, n.disableInput = function () {
          var n = u();
          if (!n) return !1;
          if (n && "radio" === n.type) for (var t = n.parentNode.parentNode.querySelectorAll("input"), e = 0; e < t.length; e++) {
            t[e].disabled = !0;
          } else n.disabled = !0;
        }, n.showValidationError = function (n) {
          var t = O();
          t.innerHTML = n;
          var e = window.getComputedStyle(m);
          t.style.marginLeft = "-" + e.getPropertyValue("padding-left"), t.style.marginRight = "-" + e.getPropertyValue("padding-right"), G(t);
          var a = u();
          a && (a.setAttribute("aria-invalid", !0), a.setAttribute("aria-describedBy", o.validationerror), K(a), Q(a, o.inputerror));
        }, n.resetValidationError = function () {
          var n = O();
          nn(n);
          var t = u();
          t && (t.removeAttribute("aria-invalid"), t.removeAttribute("aria-describedBy"), F(t, o.inputerror));
        }, n.getProgressSteps = function () {
          return s.progressSteps;
        }, n.setProgressSteps = function (n) {
          s.progressSteps = n, x(s);
        }, n.showProgressSteps = function () {
          G(V());
        }, n.hideProgressSteps = function () {
          nn(V());
        }, n.enableButtons(), n.hideLoading(), n.resetValidationError(), s.input && Q(document.body, o["has-input"]);

        for (var _ = ["input", "file", "range", "select", "radio", "checkbox", "textarea"], tn = void 0, on = 0; on < _.length; on++) {
          var sn = o[_[on]],
              rn = J(B, sn);

          if (tn = u(_[on])) {
            for (var ln in tn.attributes) {
              if (tn.attributes.hasOwnProperty(ln)) {
                var cn = tn.attributes[ln].name;
                "type" !== cn && "value" !== cn && tn.removeAttribute(cn);
              }
            }

            for (var pn in s.inputAttributes) {
              tn.setAttribute(pn, s.inputAttributes[pn]);
            }
          }

          rn.className = sn, s.inputClass && Q(rn, s.inputClass), nn(rn);
        }

        var wn,
            un,
            dn,
            fn,
            mn,
            bn = void 0;

        switch (s.input) {
          case "text":
          case "email":
          case "password":
          case "number":
          case "tel":
          case "url":
            (tn = J(B, o.input)).value = s.inputValue, tn.placeholder = s.inputPlaceholder, tn.type = s.input, G(tn);
            break;

          case "file":
            (tn = J(B, o.file)).placeholder = s.inputPlaceholder, tn.type = s.input, G(tn);
            break;

          case "range":
            var gn = J(B, o.range),
                hn = gn.querySelector("input"),
                xn = gn.querySelector("output");
            hn.value = s.inputValue, hn.type = s.input, xn.value = s.inputValue, G(gn);
            break;

          case "select":
            var kn = J(B, o.select);

            if (kn.innerHTML = "", s.inputPlaceholder) {
              var yn = document.createElement("option");
              yn.innerHTML = s.inputPlaceholder, yn.value = "", yn.disabled = !0, yn.selected = !0, kn.appendChild(yn);
            }

            bn = function bn(n) {
              n.forEach(function (n) {
                var t = d(n, 2),
                    e = t[0],
                    o = t[1],
                    a = document.createElement("option");
                a.value = e, a.innerHTML = o, s.inputValue.toString() === e.toString() && (a.selected = !0), kn.appendChild(a);
              }), G(kn), kn.focus();
            };

            break;

          case "radio":
            var vn = J(B, o.radio);
            vn.innerHTML = "", bn = function bn(n) {
              n.forEach(function (n) {
                var t = d(n, 2),
                    e = t[0],
                    a = t[1],
                    r = document.createElement("input"),
                    i = document.createElement("label");
                r.type = "radio", r.name = o.radio, r.value = e, s.inputValue.toString() === e.toString() && (r.checked = !0), i.innerHTML = a, i.insertBefore(r, i.firstChild), vn.appendChild(i);
              }), G(vn);
              var t = vn.querySelectorAll("input");
              t.length && t[0].focus();
            };
            break;

          case "checkbox":
            var Cn = J(B, o.checkbox),
                Sn = u("checkbox");
            Sn.type = "checkbox", Sn.value = 1, Sn.id = o.checkbox, Sn.checked = Boolean(s.inputValue);
            var An = Cn.getElementsByTagName("span");
            An.length && Cn.removeChild(An[0]), (An = document.createElement("span")).innerHTML = s.inputPlaceholder, Cn.appendChild(An), G(Cn);
            break;

          case "textarea":
            var Bn = J(B, o.textarea);
            Bn.value = s.inputValue, Bn.placeholder = s.inputPlaceholder, G(Bn);
            break;

          case null:
            break;

          default:
            i('Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "' + s.input + '"');
        }

        if ("select" === s.input || "radio" === s.input) {
          var En = function En(n) {
            return bn((e = [], (t = n) instanceof Map ? t.forEach(function (n, t) {
              e.push([t, n]);
            }) : Object.keys(t).forEach(function (n) {
              e.push([n, t[n]]);
            }), e));
            var t, e;
          };

          s.inputOptions instanceof Promise ? (n.showLoading(), s.inputOptions.then(function (t) {
            n.hideLoading(), En(t);
          })) : "object" === w(s.inputOptions) ? En(s.inputOptions) : i("Unexpected type of inputOptions! Expected object, Map or Promise, got " + w(s.inputOptions));
        }

        wn = s.animation, un = s.onBeforeOpen, dn = s.onOpen, fn = E(), mn = P(), null !== un && "function" == typeof un && un(mn), wn ? (Q(mn, o.show), Q(fn, o.fade), F(mn, o.hide)) : F(mn, o.fade), G(mn), fn.style.overflowY = "hidden", an && !W(mn, o.noanimation) ? mn.addEventListener(an, function n() {
          mn.removeEventListener(an, n), fn.style.overflowY = "auto";
        }) : fn.style.overflowY = "auto", Q([document.documentElement, document.body, fn], o.shown), X() && (k(), y()), C.previousActiveElement = document.activeElement, null !== dn && "function" == typeof dn && setTimeout(function () {
          dn(mn);
        }), s.toast || (p(s.allowEnterKey) ? s.focusCancel && en(I) ? I.focus() : s.focusConfirm && en(T) ? T.focus() : $(-1, 1) : document.activeElement && document.activeElement.blur()), E().scrollTop = 0;
      });
    }
  };

  v.isVisible = function () {
    return !!P();
  }, v.queue = function (n) {
    m = n;

    var t = function t() {
      m = [], document.body.removeAttribute("data-swal2-queue-step");
    },
        e = [];

    return new Promise(function (n, o) {
      !function o(a, s) {
        a < m.length ? (document.body.setAttribute("data-swal2-queue-step", a), v(m[a]).then(function (r) {
          void 0 !== r.value ? (e.push(r.value), o(a + 1, s)) : (t(), n({
            dismiss: r.dismiss
          }));
        })) : (t(), n({
          value: e
        }));
      }(0);
    });
  }, v.getQueueStep = function () {
    return document.body.getAttribute("data-swal2-queue-step");
  }, v.insertQueueStep = function (n, t) {
    return t && t < m.length ? m.splice(t, 0, n) : m.push(n);
  }, v.deleteQueueStep = function (n) {
    void 0 !== m[n] && m.splice(n, 1);
  }, v.close = v.closePopup = v.closeModal = v.closeToast = function (n) {
    var t = E(),
        e = P();

    if (e) {
      F(e, o.show), Q(e, o.hide), clearTimeout(e.timeout), $() || (sn(), window.onkeydown = b, g = !1);

      var a = function a() {
        t.parentNode && t.parentNode.removeChild(t), F([document.documentElement, document.body], [o.shown, o["no-backdrop"], o["has-input"], o["toast-shown"]]), X() && (null !== C.previousBodyPadding && (document.body.style.paddingRight = C.previousBodyPadding, C.previousBodyPadding = null), function () {
          if (W(document.body, o.iosfix)) {
            var n = parseInt(document.body.style.top, 10);
            F(document.body, o.iosfix), document.body.style.top = "", document.body.scrollTop = -1 * n;
          }
        }());
      };

      an && !W(e, o.noanimation) ? e.addEventListener(an, function n() {
        e.removeEventListener(an, n), W(e, o.hide) && a();
      }) : a(), null !== n && "function" == typeof n && setTimeout(function () {
        n(e);
      });
    }
  }, v.clickConfirm = function () {
    return Y().click();
  }, v.clickCancel = function () {
    return R().click();
  }, v.showLoading = v.enableLoading = function () {
    var n = P();
    n || v(""), n = P();
    var t = Z(),
        e = Y(),
        a = R();
    G(t), G(e), Q([n, t], o.loading), e.disabled = !0, a.disabled = !0, n.setAttribute("data-loading", !0), n.setAttribute("aria-busy", !0), n.focus();
  }, v.isValidParameter = function (t) {
    return n.hasOwnProperty(t) || "extraParams" === t;
  }, v.isDeprecatedParameter = function (n) {
    return -1 !== t.indexOf(n);
  }, v.setDefaults = function (n) {
    if (!n || "object" !== (void 0 === n ? "undefined" : w(n))) return i("the argument for setDefaults() is required and has to be a object");

    for (var t in h(n), n) {
      v.isValidParameter(t) && (f[t] = n[t]);
    }
  }, v.resetDefaults = function () {
    f = u({}, n);
  }, v.adaptInputValidator = function (n) {
    return function (t, e) {
      return n.call(this, t, e).then(function () {}, function (n) {
        return n;
      });
    };
  }, v.DismissReason = Object.freeze({
    cancel: "cancel",
    backdrop: "overlay",
    close: "close",
    esc: "esc",
    timer: "timer"
  }), v.noop = function () {}, v.version = "7.12.15", v["default"] = v, "undefined" != typeof window && "object" === w(window._swalDefaults) && v.setDefaults(window._swalDefaults);

  var C = {
    previousActiveElement: null,
    previousBodyPadding: null
  },
      S = function S() {
    return "undefined" == typeof window || "undefined" == typeof document;
  },
      A = function A(n) {
    var t = E();

    if (t && (t.parentNode.removeChild(t), F([document.documentElement, document.body], [o["no-backdrop"], o["has-input"], o["toast-shown"]])), !S()) {
      var e = document.createElement("div");
      e.className = o.container, e.innerHTML = B, ("string" == typeof n.target ? document.querySelector(n.target) : n.target).appendChild(e);
      var a = P(),
          s = j(),
          r = J(s, o.input),
          l = J(s, o.file),
          c = s.querySelector("." + o.range + " input"),
          p = s.querySelector("." + o.range + " output"),
          w = J(s, o.select),
          u = s.querySelector("." + o.checkbox + " input"),
          d = J(s, o.textarea);
      a.setAttribute("role", n.toast ? "alert" : "dialog"), a.setAttribute("aria-live", n.toast ? "polite" : "assertive"), n.toast || a.setAttribute("aria-modal", "true");

      var f = function f() {
        v.isVisible() && v.resetValidationError();
      };

      return r.oninput = f, l.onchange = f, w.onchange = f, u.onchange = f, d.oninput = f, c.oninput = function () {
        f(), p.value = c.value;
      }, c.onchange = function () {
        f(), c.nextSibling.value = c.value;
      }, a;
    }

    i("SweetAlert2 requires document to initialize");
  },
      B = ('\n <div aria-labelledby="' + o.title + '" aria-describedby="' + o.content + '" class="' + o.popup + '" tabindex="-1">\n   <div class="' + o.header + '">\n     <ul class="' + o.progresssteps + '"></ul>\n     <div class="' + o.icon + " " + a.error + '">\n       <span class="swal2-x-mark"><span class="swal2-x-mark-line-left"></span><span class="swal2-x-mark-line-right"></span></span>\n     </div>\n     <div class="' + o.icon + " " + a.question + '">?</div>\n     <div class="' + o.icon + " " + a.warning + '">!</div>\n     <div class="' + o.icon + " " + a.info + '">i</div>\n     <div class="' + o.icon + " " + a.success + '">\n       <div class="swal2-success-circular-line-left"></div>\n       <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n       <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n       <div class="swal2-success-circular-line-right"></div>\n     </div>\n     <img class="' + o.image + '" />\n     <h2 class="' + o.title + '" id="' + o.title + '"></h2>\n     <button type="button" class="' + o.close + '">×</button>\n   </div>\n   <div class="' + o.content + '">\n     <div id="' + o.content + '"></div>\n     <input class="' + o.input + '" />\n     <input type="file" class="' + o.file + '" />\n     <div class="' + o.range + '">\n       <input type="range" />\n       <output></output>\n     </div>\n     <select class="' + o.select + '"></select>\n     <div class="' + o.radio + '"></div>\n     <label for="' + o.checkbox + '" class="' + o.checkbox + '">\n       <input type="checkbox" />\n     </label>\n     <textarea class="' + o.textarea + '"></textarea>\n     <div class="' + o.validationerror + '" id="' + o.validationerror + '"></div>\n   </div>\n   <div class="' + o.actions + '">\n     <button type="button" class="' + o.confirm + '">OK</button>\n     <button type="button" class="' + o.cancel + '">Cancel</button>\n   </div>\n   <div class="' + o.footer + '">\n   </div>\n </div>\n').replace(/(^|\n)\s*/g, ""),
      E = function E() {
    return document.body.querySelector("." + o.container);
  },
      P = function P() {
    return E() ? E().querySelector("." + o.popup) : null;
  },
      L = function L() {
    return P().querySelectorAll("." + o.icon);
  },
      T = function T(n) {
    return E() ? E().querySelector("." + n) : null;
  },
      z = function z() {
    return T(o.title);
  },
      j = function j() {
    return T(o.content);
  },
      q = function q() {
    return T(o.image);
  },
      V = function V() {
    return T(o.progresssteps);
  },
      O = function O() {
    return T(o.validationerror);
  },
      Y = function Y() {
    return T(o.confirm);
  },
      R = function R() {
    return T(o.cancel);
  },
      N = function N() {
    return c("swal.getButtonsWrapper() is deprecated and will be removed in the next major release, use swal.getActions() instead"), T(o.actions);
  },
      Z = function Z() {
    return T(o.actions);
  },
      D = function D() {
    return T(o.footer);
  },
      H = function H() {
    return T(o.close);
  },
      M = function M() {
    var n = Array.prototype.slice.call(P().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')).sort(function (n, t) {
      return (n = parseInt(n.getAttribute("tabindex"))) > (t = parseInt(t.getAttribute("tabindex"))) ? 1 : n < t ? -1 : 0;
    }),
        t = Array.prototype.slice.call(P().querySelectorAll('button, input:not([type=hidden]), textarea, select, a, [tabindex="0"]'));
    return function (n) {
      for (var t = [], e = 0; e < n.length; e++) {
        -1 === t.indexOf(n[e]) && t.push(n[e]);
      }

      return t;
    }(n.concat(t));
  },
      I = function I(n, t) {
    if (!n) return nn(t);
    if ("object" === (void 0 === n ? "undefined" : w(n))) {
      if (t.innerHTML = "", 0 in n) for (var e = 0; (e in n); e++) {
        t.appendChild(n[e].cloneNode(!0));
      } else t.appendChild(n.cloneNode(!0));
    } else n && (t.innerHTML = n);
    G(t);
  },
      X = function X() {
    return !document.body.classList.contains(o["toast-shown"]);
  },
      $ = function $() {
    return document.body.classList.contains(o["toast-shown"]);
  },
      U = function U() {
    return P().hasAttribute("data-loading");
  },
      W = function W(n, t) {
    return !!n.classList && n.classList.contains(t);
  },
      K = function K(n) {
    if (n.focus(), "file" !== n.type) {
      var t = n.value;
      n.value = "", n.value = t;
    }
  },
      _ = function _(n, t, e) {
    n && t && ("string" == typeof t && (t = t.split(/\s+/).filter(Boolean)), t.forEach(function (t) {
      n.forEach ? n.forEach(function (n) {
        e ? n.classList.add(t) : n.classList.remove(t);
      }) : e ? n.classList.add(t) : n.classList.remove(t);
    }));
  },
      Q = function Q(n, t) {
    _(n, t, !0);
  },
      F = function F(n, t) {
    _(n, t, !1);
  },
      J = function J(n, t) {
    for (var e = 0; e < n.childNodes.length; e++) {
      if (W(n.childNodes[e], t)) return n.childNodes[e];
    }
  },
      G = function G(n) {
    n.style.opacity = "", n.style.display = n.id === o.content ? "block" : "flex";
  },
      nn = function nn(n) {
    n.style.opacity = "", n.style.display = "none";
  },
      tn = function tn(n) {
    for (; n.firstChild;) {
      n.removeChild(n.firstChild);
    }
  },
      en = function en(n) {
    return n && (n.offsetWidth || n.offsetHeight || n.getClientRects().length);
  },
      on = function on(n, t) {
    n.style.removeProperty ? n.style.removeProperty(t) : n.style.removeAttribute(t);
  },
      an = function () {
    if (S()) return !1;
    var n = document.createElement("div"),
        t = {
      WebkitAnimation: "webkitAnimationEnd",
      OAnimation: "oAnimationEnd oanimationend",
      animation: "animationend"
    };

    for (var e in t) {
      if (t.hasOwnProperty(e) && void 0 !== n.style[e]) return t[e];
    }

    return !1;
  }(),
      sn = function sn() {
    if (C.previousActiveElement && C.previousActiveElement.focus) {
      var n = window.scrollX,
          t = window.scrollY;
      C.previousActiveElement.focus(), void 0 !== n && void 0 !== t && window.scrollTo(n, t);
    }
  },
      rn = function rn() {
    if ("ontouchstart" in window || navigator.msMaxTouchPoints) return 0;
    var n = document.createElement("div");
    n.style.width = "50px", n.style.height = "50px", n.style.overflow = "scroll", document.body.appendChild(n);
    var t = n.offsetWidth - n.clientWidth;
    return document.body.removeChild(n), t;
  };

  return function () {
    var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
    if (S()) return !1;
    var t = document.head || document.getElementsByTagName("head")[0],
        e = document.createElement("style");
    e.type = "text/css", t.appendChild(e), e.styleSheet ? e.styleSheet.cssText = n : e.appendChild(document.createTextNode(n));
  }("@-webkit-keyframes swal2-show {\n  0% {\n    -webkit-transform: scale(0.7);\n            transform: scale(0.7); }\n  45% {\n    -webkit-transform: scale(1.05);\n            transform: scale(1.05); }\n  80% {\n    -webkit-transform: scale(0.95);\n            transform: scale(0.95); }\n  100% {\n    -webkit-transform: scale(1);\n            transform: scale(1); } }\n\n@keyframes swal2-show {\n  0% {\n    -webkit-transform: scale(0.7);\n            transform: scale(0.7); }\n  45% {\n    -webkit-transform: scale(1.05);\n            transform: scale(1.05); }\n  80% {\n    -webkit-transform: scale(0.95);\n            transform: scale(0.95); }\n  100% {\n    -webkit-transform: scale(1);\n            transform: scale(1); } }\n\n@-webkit-keyframes swal2-hide {\n  0% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    opacity: 1; }\n  100% {\n    -webkit-transform: scale(0.5);\n            transform: scale(0.5);\n    opacity: 0; } }\n\n@keyframes swal2-hide {\n  0% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    opacity: 1; }\n  100% {\n    -webkit-transform: scale(0.5);\n            transform: scale(0.5);\n    opacity: 0; } }\n\n@-webkit-keyframes swal2-animate-success-line-tip {\n  0% {\n    top: 19px;\n    left: 1px;\n    width: 0; }\n  54% {\n    top: 17px;\n    left: 2px;\n    width: 0; }\n  70% {\n    top: 35px;\n    left: -6px;\n    width: 50px; }\n  84% {\n    top: 48px;\n    left: 21px;\n    width: 17px; }\n  100% {\n    top: 45px;\n    left: 14px;\n    width: 25px; } }\n\n@keyframes swal2-animate-success-line-tip {\n  0% {\n    top: 19px;\n    left: 1px;\n    width: 0; }\n  54% {\n    top: 17px;\n    left: 2px;\n    width: 0; }\n  70% {\n    top: 35px;\n    left: -6px;\n    width: 50px; }\n  84% {\n    top: 48px;\n    left: 21px;\n    width: 17px; }\n  100% {\n    top: 45px;\n    left: 14px;\n    width: 25px; } }\n\n@-webkit-keyframes swal2-animate-success-line-long {\n  0% {\n    top: 54px;\n    right: 46px;\n    width: 0; }\n  65% {\n    top: 54px;\n    right: 46px;\n    width: 0; }\n  84% {\n    top: 35px;\n    right: 0;\n    width: 55px; }\n  100% {\n    top: 38px;\n    right: 8px;\n    width: 47px; } }\n\n@keyframes swal2-animate-success-line-long {\n  0% {\n    top: 54px;\n    right: 46px;\n    width: 0; }\n  65% {\n    top: 54px;\n    right: 46px;\n    width: 0; }\n  84% {\n    top: 35px;\n    right: 0;\n    width: 55px; }\n  100% {\n    top: 38px;\n    right: 8px;\n    width: 47px; } }\n\n@-webkit-keyframes swal2-rotate-success-circular-line {\n  0% {\n    -webkit-transform: rotate(-45deg);\n            transform: rotate(-45deg); }\n  5% {\n    -webkit-transform: rotate(-45deg);\n            transform: rotate(-45deg); }\n  12% {\n    -webkit-transform: rotate(-405deg);\n            transform: rotate(-405deg); }\n  100% {\n    -webkit-transform: rotate(-405deg);\n            transform: rotate(-405deg); } }\n\n@keyframes swal2-rotate-success-circular-line {\n  0% {\n    -webkit-transform: rotate(-45deg);\n            transform: rotate(-45deg); }\n  5% {\n    -webkit-transform: rotate(-45deg);\n            transform: rotate(-45deg); }\n  12% {\n    -webkit-transform: rotate(-405deg);\n            transform: rotate(-405deg); }\n  100% {\n    -webkit-transform: rotate(-405deg);\n            transform: rotate(-405deg); } }\n\n@-webkit-keyframes swal2-animate-error-x-mark {\n  0% {\n    margin-top: 26px;\n    -webkit-transform: scale(0.4);\n            transform: scale(0.4);\n    opacity: 0; }\n  50% {\n    margin-top: 26px;\n    -webkit-transform: scale(0.4);\n            transform: scale(0.4);\n    opacity: 0; }\n  80% {\n    margin-top: -6px;\n    -webkit-transform: scale(1.15);\n            transform: scale(1.15); }\n  100% {\n    margin-top: 0;\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    opacity: 1; } }\n\n@keyframes swal2-animate-error-x-mark {\n  0% {\n    margin-top: 26px;\n    -webkit-transform: scale(0.4);\n            transform: scale(0.4);\n    opacity: 0; }\n  50% {\n    margin-top: 26px;\n    -webkit-transform: scale(0.4);\n            transform: scale(0.4);\n    opacity: 0; }\n  80% {\n    margin-top: -6px;\n    -webkit-transform: scale(1.15);\n            transform: scale(1.15); }\n  100% {\n    margin-top: 0;\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    opacity: 1; } }\n\n@-webkit-keyframes swal2-animate-error-icon {\n  0% {\n    -webkit-transform: rotateX(100deg);\n            transform: rotateX(100deg);\n    opacity: 0; }\n  100% {\n    -webkit-transform: rotateX(0deg);\n            transform: rotateX(0deg);\n    opacity: 1; } }\n\n@keyframes swal2-animate-error-icon {\n  0% {\n    -webkit-transform: rotateX(100deg);\n            transform: rotateX(100deg);\n    opacity: 0; }\n  100% {\n    -webkit-transform: rotateX(0deg);\n            transform: rotateX(0deg);\n    opacity: 1; } }\n\nbody.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast {\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-align: stretch;\n      -ms-flex-align: stretch;\n          align-items: stretch; }\n  body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast .swal2-actions {\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1;\n    -ms-flex-item-align: stretch;\n        align-self: stretch;\n    -webkit-box-pack: end;\n        -ms-flex-pack: end;\n            justify-content: flex-end;\n    height: 2.2em; }\n  body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast .swal2-loading {\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center; }\n  body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast .swal2-input {\n    height: 2em;\n    margin: .3125em auto;\n    font-size: 1em; }\n  body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast .swal2-validationerror {\n    font-size: 1em; }\n\nbody.swal2-toast-shown > .swal2-container {\n  position: fixed;\n  background-color: transparent; }\n  body.swal2-toast-shown > .swal2-container.swal2-shown {\n    background-color: transparent; }\n  body.swal2-toast-shown > .swal2-container.swal2-top {\n    top: 0;\n    right: auto;\n    bottom: auto;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%); }\n  body.swal2-toast-shown > .swal2-container.swal2-top-end, body.swal2-toast-shown > .swal2-container.swal2-top-right {\n    top: 0;\n    right: 0;\n    bottom: auto;\n    left: auto; }\n  body.swal2-toast-shown > .swal2-container.swal2-top-start, body.swal2-toast-shown > .swal2-container.swal2-top-left {\n    top: 0;\n    right: auto;\n    bottom: auto;\n    left: 0; }\n  body.swal2-toast-shown > .swal2-container.swal2-center-start, body.swal2-toast-shown > .swal2-container.swal2-center-left {\n    top: 50%;\n    right: auto;\n    bottom: auto;\n    left: 0;\n    -webkit-transform: translateY(-50%);\n            transform: translateY(-50%); }\n  body.swal2-toast-shown > .swal2-container.swal2-center {\n    top: 50%;\n    right: auto;\n    bottom: auto;\n    left: 50%;\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%); }\n  body.swal2-toast-shown > .swal2-container.swal2-center-end, body.swal2-toast-shown > .swal2-container.swal2-center-right {\n    top: 50%;\n    right: 0;\n    bottom: auto;\n    left: auto;\n    -webkit-transform: translateY(-50%);\n            transform: translateY(-50%); }\n  body.swal2-toast-shown > .swal2-container.swal2-bottom-start, body.swal2-toast-shown > .swal2-container.swal2-bottom-left {\n    top: auto;\n    right: auto;\n    bottom: 0;\n    left: 0; }\n  body.swal2-toast-shown > .swal2-container.swal2-bottom {\n    top: auto;\n    right: auto;\n    bottom: 0;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%); }\n  body.swal2-toast-shown > .swal2-container.swal2-bottom-end, body.swal2-toast-shown > .swal2-container.swal2-bottom-right {\n    top: auto;\n    right: 0;\n    bottom: 0;\n    left: auto; }\n\n.swal2-popup.swal2-toast {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  width: auto;\n  padding: 0.625em;\n  -webkit-box-shadow: 0 0 10px #d9d9d9;\n          box-shadow: 0 0 10px #d9d9d9;\n  overflow-y: hidden; }\n  .swal2-popup.swal2-toast .swal2-header {\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: row;\n            flex-direction: row; }\n  .swal2-popup.swal2-toast .swal2-title {\n    -webkit-box-pack: start;\n        -ms-flex-pack: start;\n            justify-content: flex-start;\n    margin: 0 .6em;\n    font-size: 1em; }\n  .swal2-popup.swal2-toast .swal2-close {\n    position: initial; }\n  .swal2-popup.swal2-toast .swal2-content {\n    -webkit-box-pack: start;\n        -ms-flex-pack: start;\n            justify-content: flex-start;\n    font-size: 1em; }\n  .swal2-popup.swal2-toast .swal2-icon {\n    width: 32px;\n    min-width: 32px;\n    height: 32px;\n    margin: 0; }\n    .swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring {\n      width: 32px;\n      height: 32px; }\n    .swal2-popup.swal2-toast .swal2-icon.swal2-info, .swal2-popup.swal2-toast .swal2-icon.swal2-warning, .swal2-popup.swal2-toast .swal2-icon.swal2-question {\n      font-size: 26px;\n      line-height: 32px; }\n    .swal2-popup.swal2-toast .swal2-icon.swal2-error [class^='swal2-x-mark-line'] {\n      top: 14px;\n      width: 22px; }\n      .swal2-popup.swal2-toast .swal2-icon.swal2-error [class^='swal2-x-mark-line'][class$='left'] {\n        left: 5px; }\n      .swal2-popup.swal2-toast .swal2-icon.swal2-error [class^='swal2-x-mark-line'][class$='right'] {\n        right: 5px; }\n  .swal2-popup.swal2-toast .swal2-actions {\n    height: auto;\n    margin: 0 .3125em; }\n  .swal2-popup.swal2-toast .swal2-styled {\n    margin: 0 .3125em;\n    padding: .3125em .625em;\n    font-size: 1em; }\n    .swal2-popup.swal2-toast .swal2-styled:focus {\n      -webkit-box-shadow: 0 0 0 1px #fff, 0 0 0 2px rgba(50, 100, 150, 0.4);\n              box-shadow: 0 0 0 1px #fff, 0 0 0 2px rgba(50, 100, 150, 0.4); }\n  .swal2-popup.swal2-toast .swal2-success {\n    border-color: #a5dc86; }\n    .swal2-popup.swal2-toast .swal2-success [class^='swal2-success-circular-line'] {\n      position: absolute;\n      width: 32px;\n      height: 45px;\n      -webkit-transform: rotate(45deg);\n              transform: rotate(45deg);\n      border-radius: 50%; }\n      .swal2-popup.swal2-toast .swal2-success [class^='swal2-success-circular-line'][class$='left'] {\n        top: -4px;\n        left: -15px;\n        -webkit-transform: rotate(-45deg);\n                transform: rotate(-45deg);\n        -webkit-transform-origin: 32px 32px;\n                transform-origin: 32px 32px;\n        border-radius: 64px 0 0 64px; }\n      .swal2-popup.swal2-toast .swal2-success [class^='swal2-success-circular-line'][class$='right'] {\n        top: -4px;\n        left: 15px;\n        -webkit-transform-origin: 0 32px;\n                transform-origin: 0 32px;\n        border-radius: 0 64px 64px 0; }\n    .swal2-popup.swal2-toast .swal2-success .swal2-success-ring {\n      width: 32px;\n      height: 32px; }\n    .swal2-popup.swal2-toast .swal2-success .swal2-success-fix {\n      top: 0;\n      left: 7px;\n      width: 7px;\n      height: 43px; }\n    .swal2-popup.swal2-toast .swal2-success [class^='swal2-success-line'] {\n      height: 5px; }\n      .swal2-popup.swal2-toast .swal2-success [class^='swal2-success-line'][class$='tip'] {\n        top: 18px;\n        left: 3px;\n        width: 12px; }\n      .swal2-popup.swal2-toast .swal2-success [class^='swal2-success-line'][class$='long'] {\n        top: 15px;\n        right: 3px;\n        width: 22px; }\n  .swal2-popup.swal2-toast.swal2-show {\n    -webkit-animation: showSweetToast .5s;\n            animation: showSweetToast .5s; }\n  .swal2-popup.swal2-toast.swal2-hide {\n    -webkit-animation: hideSweetToast .2s forwards;\n            animation: hideSweetToast .2s forwards; }\n  .swal2-popup.swal2-toast .swal2-animate-success-icon .swal2-success-line-tip {\n    -webkit-animation: animate-toast-success-tip .75s;\n            animation: animate-toast-success-tip .75s; }\n  .swal2-popup.swal2-toast .swal2-animate-success-icon .swal2-success-line-long {\n    -webkit-animation: animate-toast-success-long .75s;\n            animation: animate-toast-success-long .75s; }\n\n@-webkit-keyframes showSweetToast {\n  0% {\n    -webkit-transform: translateY(-10px) rotateZ(2deg);\n            transform: translateY(-10px) rotateZ(2deg);\n    opacity: 0; }\n  33% {\n    -webkit-transform: translateY(0) rotateZ(-2deg);\n            transform: translateY(0) rotateZ(-2deg);\n    opacity: .5; }\n  66% {\n    -webkit-transform: translateY(5px) rotateZ(2deg);\n            transform: translateY(5px) rotateZ(2deg);\n    opacity: .7; }\n  100% {\n    -webkit-transform: translateY(0) rotateZ(0);\n            transform: translateY(0) rotateZ(0);\n    opacity: 1; } }\n\n@keyframes showSweetToast {\n  0% {\n    -webkit-transform: translateY(-10px) rotateZ(2deg);\n            transform: translateY(-10px) rotateZ(2deg);\n    opacity: 0; }\n  33% {\n    -webkit-transform: translateY(0) rotateZ(-2deg);\n            transform: translateY(0) rotateZ(-2deg);\n    opacity: .5; }\n  66% {\n    -webkit-transform: translateY(5px) rotateZ(2deg);\n            transform: translateY(5px) rotateZ(2deg);\n    opacity: .7; }\n  100% {\n    -webkit-transform: translateY(0) rotateZ(0);\n            transform: translateY(0) rotateZ(0);\n    opacity: 1; } }\n\n@-webkit-keyframes hideSweetToast {\n  0% {\n    opacity: 1; }\n  33% {\n    opacity: .5; }\n  100% {\n    -webkit-transform: rotateZ(1deg);\n            transform: rotateZ(1deg);\n    opacity: 0; } }\n\n@keyframes hideSweetToast {\n  0% {\n    opacity: 1; }\n  33% {\n    opacity: .5; }\n  100% {\n    -webkit-transform: rotateZ(1deg);\n            transform: rotateZ(1deg);\n    opacity: 0; } }\n\n@-webkit-keyframes animate-toast-success-tip {\n  0% {\n    top: 9px;\n    left: 1px;\n    width: 0; }\n  54% {\n    top: 2px;\n    left: 2px;\n    width: 0; }\n  70% {\n    top: 10px;\n    left: -4px;\n    width: 26px; }\n  84% {\n    top: 17px;\n    left: 12px;\n    width: 8px; }\n  100% {\n    top: 18px;\n    left: 3px;\n    width: 12px; } }\n\n@keyframes animate-toast-success-tip {\n  0% {\n    top: 9px;\n    left: 1px;\n    width: 0; }\n  54% {\n    top: 2px;\n    left: 2px;\n    width: 0; }\n  70% {\n    top: 10px;\n    left: -4px;\n    width: 26px; }\n  84% {\n    top: 17px;\n    left: 12px;\n    width: 8px; }\n  100% {\n    top: 18px;\n    left: 3px;\n    width: 12px; } }\n\n@-webkit-keyframes animate-toast-success-long {\n  0% {\n    top: 26px;\n    right: 22px;\n    width: 0; }\n  65% {\n    top: 20px;\n    right: 15px;\n    width: 0; }\n  84% {\n    top: 15px;\n    right: 0;\n    width: 18px; }\n  100% {\n    top: 15px;\n    right: 3px;\n    width: 22px; } }\n\n@keyframes animate-toast-success-long {\n  0% {\n    top: 26px;\n    right: 22px;\n    width: 0; }\n  65% {\n    top: 20px;\n    right: 15px;\n    width: 0; }\n  84% {\n    top: 15px;\n    right: 0;\n    width: 18px; }\n  100% {\n    top: 15px;\n    right: 3px;\n    width: 22px; } }\n\nhtml.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown),\nbody.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) {\n  height: auto;\n  overflow-y: hidden; }\n\nbody.swal2-no-backdrop .swal2-shown {\n  top: auto;\n  right: auto;\n  bottom: auto;\n  left: auto;\n  background-color: transparent; }\n  body.swal2-no-backdrop .swal2-shown > .swal2-modal {\n    -webkit-box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.4); }\n  body.swal2-no-backdrop .swal2-shown.swal2-top {\n    top: 0;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%); }\n  body.swal2-no-backdrop .swal2-shown.swal2-top-start, body.swal2-no-backdrop .swal2-shown.swal2-top-left {\n    top: 0;\n    left: 0; }\n  body.swal2-no-backdrop .swal2-shown.swal2-top-end, body.swal2-no-backdrop .swal2-shown.swal2-top-right {\n    top: 0;\n    right: 0; }\n  body.swal2-no-backdrop .swal2-shown.swal2-center {\n    top: 50%;\n    left: 50%;\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%); }\n  body.swal2-no-backdrop .swal2-shown.swal2-center-start, body.swal2-no-backdrop .swal2-shown.swal2-center-left {\n    top: 50%;\n    left: 0;\n    -webkit-transform: translateY(-50%);\n            transform: translateY(-50%); }\n  body.swal2-no-backdrop .swal2-shown.swal2-center-end, body.swal2-no-backdrop .swal2-shown.swal2-center-right {\n    top: 50%;\n    right: 0;\n    -webkit-transform: translateY(-50%);\n            transform: translateY(-50%); }\n  body.swal2-no-backdrop .swal2-shown.swal2-bottom {\n    bottom: 0;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%); }\n  body.swal2-no-backdrop .swal2-shown.swal2-bottom-start, body.swal2-no-backdrop .swal2-shown.swal2-bottom-left {\n    bottom: 0;\n    left: 0; }\n  body.swal2-no-backdrop .swal2-shown.swal2-bottom-end, body.swal2-no-backdrop .swal2-shown.swal2-bottom-right {\n    right: 0;\n    bottom: 0; }\n\n.swal2-container {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  padding: 10px;\n  background-color: transparent;\n  z-index: 10600;\n  overflow-x: hidden;\n  -webkit-overflow-scrolling: touch; }\n  .swal2-container.swal2-top {\n    -webkit-box-align: start;\n        -ms-flex-align: start;\n            align-items: flex-start; }\n  .swal2-container.swal2-top-start, .swal2-container.swal2-top-left {\n    -webkit-box-align: start;\n        -ms-flex-align: start;\n            align-items: flex-start;\n    -webkit-box-pack: start;\n        -ms-flex-pack: start;\n            justify-content: flex-start; }\n  .swal2-container.swal2-top-end, .swal2-container.swal2-top-right {\n    -webkit-box-align: start;\n        -ms-flex-align: start;\n            align-items: flex-start;\n    -webkit-box-pack: end;\n        -ms-flex-pack: end;\n            justify-content: flex-end; }\n  .swal2-container.swal2-center {\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center; }\n  .swal2-container.swal2-center-start, .swal2-container.swal2-center-left {\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: start;\n        -ms-flex-pack: start;\n            justify-content: flex-start; }\n  .swal2-container.swal2-center-end, .swal2-container.swal2-center-right {\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: end;\n        -ms-flex-pack: end;\n            justify-content: flex-end; }\n  .swal2-container.swal2-bottom {\n    -webkit-box-align: end;\n        -ms-flex-align: end;\n            align-items: flex-end; }\n  .swal2-container.swal2-bottom-start, .swal2-container.swal2-bottom-left {\n    -webkit-box-align: end;\n        -ms-flex-align: end;\n            align-items: flex-end;\n    -webkit-box-pack: start;\n        -ms-flex-pack: start;\n            justify-content: flex-start; }\n  .swal2-container.swal2-bottom-end, .swal2-container.swal2-bottom-right {\n    -webkit-box-align: end;\n        -ms-flex-align: end;\n            align-items: flex-end;\n    -webkit-box-pack: end;\n        -ms-flex-pack: end;\n            justify-content: flex-end; }\n  .swal2-container.swal2-grow-fullscreen > .swal2-modal {\n    display: -webkit-box !important;\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1;\n    -ms-flex-item-align: stretch;\n        align-self: stretch;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center; }\n  .swal2-container.swal2-grow-row > .swal2-modal {\n    display: -webkit-box !important;\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1;\n    -ms-flex-line-pack: center;\n        align-content: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center; }\n  .swal2-container.swal2-grow-column {\n    -webkit-box-flex: 1;\n        -ms-flex: 1;\n            flex: 1;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column; }\n    .swal2-container.swal2-grow-column.swal2-top, .swal2-container.swal2-grow-column.swal2-center, .swal2-container.swal2-grow-column.swal2-bottom {\n      -webkit-box-align: center;\n          -ms-flex-align: center;\n              align-items: center; }\n    .swal2-container.swal2-grow-column.swal2-top-start, .swal2-container.swal2-grow-column.swal2-center-start, .swal2-container.swal2-grow-column.swal2-bottom-start, .swal2-container.swal2-grow-column.swal2-top-left, .swal2-container.swal2-grow-column.swal2-center-left, .swal2-container.swal2-grow-column.swal2-bottom-left {\n      -webkit-box-align: start;\n          -ms-flex-align: start;\n              align-items: flex-start; }\n    .swal2-container.swal2-grow-column.swal2-top-end, .swal2-container.swal2-grow-column.swal2-center-end, .swal2-container.swal2-grow-column.swal2-bottom-end, .swal2-container.swal2-grow-column.swal2-top-right, .swal2-container.swal2-grow-column.swal2-center-right, .swal2-container.swal2-grow-column.swal2-bottom-right {\n      -webkit-box-align: end;\n          -ms-flex-align: end;\n              align-items: flex-end; }\n    .swal2-container.swal2-grow-column > .swal2-modal {\n      display: -webkit-box !important;\n      display: -ms-flexbox !important;\n      display: flex !important;\n      -webkit-box-flex: 1;\n          -ms-flex: 1;\n              flex: 1;\n      -ms-flex-line-pack: center;\n          align-content: center;\n      -webkit-box-pack: center;\n          -ms-flex-pack: center;\n              justify-content: center; }\n  .swal2-container:not(.swal2-top):not(.swal2-top-start):not(.swal2-top-end):not(.swal2-top-left):not(.swal2-top-right):not(.swal2-center-start):not(.swal2-center-end):not(.swal2-center-left):not(.swal2-center-right):not(.swal2-bottom):not(.swal2-bottom-start):not(.swal2-bottom-end):not(.swal2-bottom-left):not(.swal2-bottom-right) > .swal2-modal {\n    margin: auto; }\n  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n    .swal2-container .swal2-modal {\n      margin: 0 !important; } }\n  .swal2-container.swal2-fade {\n    -webkit-transition: background-color .1s;\n    transition: background-color .1s; }\n  .swal2-container.swal2-shown {\n    background-color: rgba(0, 0, 0, 0.4); }\n\n.swal2-popup {\n  display: none;\n  position: relative;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: column;\n          flex-direction: column;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  width: 32em;\n  max-width: 100%;\n  padding: 1.25em;\n  border-radius: 0.3125em;\n  background: #fff;\n  font-family: inherit;\n  font-size: 1rem;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box; }\n  .swal2-popup:focus {\n    outline: none; }\n  .swal2-popup.swal2-loading {\n    overflow-y: hidden; }\n  .swal2-popup .swal2-header {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center; }\n  .swal2-popup .swal2-title {\n    display: block;\n    position: relative;\n    max-width: 100%;\n    margin: 0 0 0.4em;\n    padding: 0;\n    color: #595959;\n    font-size: 1.875em;\n    font-weight: 600;\n    text-align: center;\n    text-transform: none;\n    word-wrap: break-word; }\n  .swal2-popup .swal2-actions {\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    margin: 1.25em auto 0; }\n    .swal2-popup .swal2-actions:not(.swal2-loading) .swal2-styled[disabled] {\n      opacity: .4; }\n    .swal2-popup .swal2-actions:not(.swal2-loading) .swal2-styled:hover {\n      background-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0, 0, 0, 0.1)), to(rgba(0, 0, 0, 0.1)));\n      background-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1)); }\n    .swal2-popup .swal2-actions:not(.swal2-loading) .swal2-styled:active {\n      background-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0, 0, 0, 0.2)), to(rgba(0, 0, 0, 0.2)));\n      background-image: linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2)); }\n    .swal2-popup .swal2-actions.swal2-loading .swal2-styled.swal2-confirm {\n      width: 2.5em;\n      height: 2.5em;\n      margin: .46875em;\n      padding: 0;\n      border: .25em solid transparent;\n      border-radius: 100%;\n      border-color: transparent;\n      background-color: transparent !important;\n      color: transparent;\n      cursor: default;\n      -webkit-box-sizing: border-box;\n              box-sizing: border-box;\n      -webkit-animation: swal2-rotate-loading 1.5s linear 0s infinite normal;\n              animation: swal2-rotate-loading 1.5s linear 0s infinite normal;\n      -webkit-user-select: none;\n         -moz-user-select: none;\n          -ms-user-select: none;\n              user-select: none; }\n    .swal2-popup .swal2-actions.swal2-loading .swal2-styled.swal2-cancel {\n      margin-right: 30px;\n      margin-left: 30px; }\n    .swal2-popup .swal2-actions.swal2-loading :not(.swal2-styled).swal2-confirm::after {\n      display: inline-block;\n      width: 15px;\n      height: 15px;\n      margin-left: 5px;\n      border: 3px solid #999999;\n      border-radius: 50%;\n      border-right-color: transparent;\n      -webkit-box-shadow: 1px 1px 1px #fff;\n              box-shadow: 1px 1px 1px #fff;\n      content: '';\n      -webkit-animation: swal2-rotate-loading 1.5s linear 0s infinite normal;\n              animation: swal2-rotate-loading 1.5s linear 0s infinite normal; }\n  .swal2-popup .swal2-styled {\n    margin: 0 .3125em;\n    padding: .625em 2em;\n    font-weight: 500;\n    -webkit-box-shadow: none;\n            box-shadow: none; }\n    .swal2-popup .swal2-styled:not([disabled]) {\n      cursor: pointer; }\n    .swal2-popup .swal2-styled.swal2-confirm {\n      border: 0;\n      border-radius: 0.25em;\n      background-color: #3085d6;\n      color: #fff;\n      font-size: 1.0625em; }\n    .swal2-popup .swal2-styled.swal2-cancel {\n      border: 0;\n      border-radius: 0.25em;\n      background-color: #aaa;\n      color: #fff;\n      font-size: 1.0625em; }\n    .swal2-popup .swal2-styled:focus {\n      outline: none;\n      -webkit-box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(50, 100, 150, 0.4);\n              box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(50, 100, 150, 0.4); }\n    .swal2-popup .swal2-styled::-moz-focus-inner {\n      border: 0; }\n  .swal2-popup .swal2-footer {\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    margin: 1.25em 0 0;\n    padding-top: 1em;\n    border-top: 1px solid #eee;\n    color: #545454;\n    font-size: 1em; }\n  .swal2-popup .swal2-image {\n    max-width: 100%;\n    margin: 1.25em auto; }\n  .swal2-popup .swal2-close {\n    position: absolute;\n    top: 0;\n    right: 0;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    width: 1.2em;\n    min-width: 1.2em;\n    height: 1.2em;\n    margin: 0;\n    padding: 0;\n    -webkit-transition: color 0.1s ease-out;\n    transition: color 0.1s ease-out;\n    border: none;\n    border-radius: 0;\n    background: transparent;\n    color: #cccccc;\n    font-family: serif;\n    font-size: calc(2.5em - 0.25em);\n    line-height: 1.2em;\n    cursor: pointer; }\n    .swal2-popup .swal2-close:hover {\n      -webkit-transform: none;\n              transform: none;\n      color: #f27474; }\n  .swal2-popup > .swal2-input,\n  .swal2-popup > .swal2-file,\n  .swal2-popup > .swal2-textarea,\n  .swal2-popup > .swal2-select,\n  .swal2-popup > .swal2-radio,\n  .swal2-popup > .swal2-checkbox {\n    display: none; }\n  .swal2-popup .swal2-content {\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    margin: 0;\n    padding: 0;\n    color: #545454;\n    font-size: 1.125em;\n    font-weight: 300;\n    line-height: normal;\n    word-wrap: break-word; }\n  .swal2-popup #swal2-content {\n    text-align: center; }\n  .swal2-popup .swal2-input,\n  .swal2-popup .swal2-file,\n  .swal2-popup .swal2-textarea,\n  .swal2-popup .swal2-select,\n  .swal2-popup .swal2-radio,\n  .swal2-popup .swal2-checkbox {\n    margin: 1em auto; }\n  .swal2-popup .swal2-input,\n  .swal2-popup .swal2-file,\n  .swal2-popup .swal2-textarea {\n    width: 100%;\n    -webkit-transition: border-color .3s, -webkit-box-shadow .3s;\n    transition: border-color .3s, -webkit-box-shadow .3s;\n    transition: border-color .3s, box-shadow .3s;\n    transition: border-color .3s, box-shadow .3s, -webkit-box-shadow .3s;\n    border: 1px solid #d9d9d9;\n    border-radius: 0.1875em;\n    font-size: 1.125em;\n    -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.06);\n            box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.06);\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box; }\n    .swal2-popup .swal2-input.swal2-inputerror,\n    .swal2-popup .swal2-file.swal2-inputerror,\n    .swal2-popup .swal2-textarea.swal2-inputerror {\n      border-color: #f27474 !important;\n      -webkit-box-shadow: 0 0 2px #f27474 !important;\n              box-shadow: 0 0 2px #f27474 !important; }\n    .swal2-popup .swal2-input:focus,\n    .swal2-popup .swal2-file:focus,\n    .swal2-popup .swal2-textarea:focus {\n      border: 1px solid #b4dbed;\n      outline: none;\n      -webkit-box-shadow: 0 0 3px #c4e6f5;\n              box-shadow: 0 0 3px #c4e6f5; }\n    .swal2-popup .swal2-input::-webkit-input-placeholder,\n    .swal2-popup .swal2-file::-webkit-input-placeholder,\n    .swal2-popup .swal2-textarea::-webkit-input-placeholder {\n      color: #cccccc; }\n    .swal2-popup .swal2-input:-ms-input-placeholder,\n    .swal2-popup .swal2-file:-ms-input-placeholder,\n    .swal2-popup .swal2-textarea:-ms-input-placeholder {\n      color: #cccccc; }\n    .swal2-popup .swal2-input::-ms-input-placeholder,\n    .swal2-popup .swal2-file::-ms-input-placeholder,\n    .swal2-popup .swal2-textarea::-ms-input-placeholder {\n      color: #cccccc; }\n    .swal2-popup .swal2-input::placeholder,\n    .swal2-popup .swal2-file::placeholder,\n    .swal2-popup .swal2-textarea::placeholder {\n      color: #cccccc; }\n  .swal2-popup .swal2-range input {\n    width: 80%; }\n  .swal2-popup .swal2-range output {\n    width: 20%;\n    font-weight: 600;\n    text-align: center; }\n  .swal2-popup .swal2-range input,\n  .swal2-popup .swal2-range output {\n    height: 2.625em;\n    margin: 1em auto;\n    padding: 0;\n    font-size: 1.125em;\n    line-height: 2.625em; }\n  .swal2-popup .swal2-input {\n    height: 2.625em;\n    padding: 0.75em; }\n    .swal2-popup .swal2-input[type='number'] {\n      max-width: 10em; }\n  .swal2-popup .swal2-file {\n    font-size: 1.125em; }\n  .swal2-popup .swal2-textarea {\n    height: 6.75em;\n    padding: 0.75em; }\n  .swal2-popup .swal2-select {\n    min-width: 50%;\n    max-width: 100%;\n    padding: .375em .625em;\n    color: #545454;\n    font-size: 1.125em; }\n  .swal2-popup .swal2-radio,\n  .swal2-popup .swal2-checkbox {\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center; }\n    .swal2-popup .swal2-radio label,\n    .swal2-popup .swal2-checkbox label {\n      margin: 0 .6em;\n      font-size: 1.125em; }\n    .swal2-popup .swal2-radio input,\n    .swal2-popup .swal2-checkbox input {\n      margin: 0 .4em; }\n  .swal2-popup .swal2-validationerror {\n    display: none;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    padding: 0.625em;\n    background: #f0f0f0;\n    color: #666666;\n    font-size: 1em;\n    font-weight: 300;\n    overflow: hidden; }\n    .swal2-popup .swal2-validationerror::before {\n      display: inline-block;\n      width: 1.5em;\n      height: 1.5em;\n      margin: 0 .625em;\n      border-radius: 50%;\n      background-color: #f27474;\n      color: #fff;\n      font-weight: 600;\n      line-height: 1.5em;\n      text-align: center;\n      content: '!';\n      zoom: normal; }\n\n@supports (-ms-accelerator: true) {\n  .swal2-range input {\n    width: 100% !important; }\n  .swal2-range output {\n    display: none; } }\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .swal2-range input {\n    width: 100% !important; }\n  .swal2-range output {\n    display: none; } }\n\n.swal2-icon {\n  position: relative;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  width: 80px;\n  height: 80px;\n  margin: 1.25em auto 1.875em;\n  border: 4px solid transparent;\n  border-radius: 50%;\n  line-height: 80px;\n  cursor: default;\n  -webkit-box-sizing: content-box;\n          box-sizing: content-box;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  zoom: normal; }\n  .swal2-icon.swal2-error {\n    border-color: #f27474; }\n    .swal2-icon.swal2-error .swal2-x-mark {\n      position: relative;\n      -webkit-box-flex: 1;\n          -ms-flex-positive: 1;\n              flex-grow: 1; }\n    .swal2-icon.swal2-error [class^='swal2-x-mark-line'] {\n      display: block;\n      position: absolute;\n      top: 37px;\n      width: 47px;\n      height: 5px;\n      border-radius: 2px;\n      background-color: #f27474; }\n      .swal2-icon.swal2-error [class^='swal2-x-mark-line'][class$='left'] {\n        left: 17px;\n        -webkit-transform: rotate(45deg);\n                transform: rotate(45deg); }\n      .swal2-icon.swal2-error [class^='swal2-x-mark-line'][class$='right'] {\n        right: 16px;\n        -webkit-transform: rotate(-45deg);\n                transform: rotate(-45deg); }\n  .swal2-icon.swal2-warning, .swal2-icon.swal2-info, .swal2-icon.swal2-question {\n    margin: .333333em auto .5em;\n    font-family: inherit;\n    font-size: 3.75em; }\n  .swal2-icon.swal2-warning {\n    border-color: #facea8;\n    color: #f8bb86; }\n  .swal2-icon.swal2-info {\n    border-color: #9de0f6;\n    color: #3fc3ee; }\n  .swal2-icon.swal2-question {\n    border-color: #c9dae1;\n    color: #87adbd; }\n  .swal2-icon.swal2-success {\n    border-color: #a5dc86; }\n    .swal2-icon.swal2-success [class^='swal2-success-circular-line'] {\n      position: absolute;\n      width: 60px;\n      height: 120px;\n      -webkit-transform: rotate(45deg);\n              transform: rotate(45deg);\n      border-radius: 50%; }\n      .swal2-icon.swal2-success [class^='swal2-success-circular-line'][class$='left'] {\n        top: -7px;\n        left: -33px;\n        -webkit-transform: rotate(-45deg);\n                transform: rotate(-45deg);\n        -webkit-transform-origin: 60px 60px;\n                transform-origin: 60px 60px;\n        border-radius: 120px 0 0 120px; }\n      .swal2-icon.swal2-success [class^='swal2-success-circular-line'][class$='right'] {\n        top: -11px;\n        left: 30px;\n        -webkit-transform: rotate(-45deg);\n                transform: rotate(-45deg);\n        -webkit-transform-origin: 0 60px;\n                transform-origin: 0 60px;\n        border-radius: 0 120px 120px 0; }\n    .swal2-icon.swal2-success .swal2-success-ring {\n      position: absolute;\n      top: -4px;\n      left: -4px;\n      width: 80px;\n      height: 80px;\n      border: 4px solid rgba(165, 220, 134, 0.3);\n      border-radius: 50%;\n      z-index: 2;\n      -webkit-box-sizing: content-box;\n              box-sizing: content-box; }\n    .swal2-icon.swal2-success .swal2-success-fix {\n      position: absolute;\n      top: 8px;\n      left: 26px;\n      width: 7px;\n      height: 90px;\n      -webkit-transform: rotate(-45deg);\n              transform: rotate(-45deg);\n      z-index: 1; }\n    .swal2-icon.swal2-success [class^='swal2-success-line'] {\n      display: block;\n      position: absolute;\n      height: 5px;\n      border-radius: 2px;\n      background-color: #a5dc86;\n      z-index: 2; }\n      .swal2-icon.swal2-success [class^='swal2-success-line'][class$='tip'] {\n        top: 46px;\n        left: 14px;\n        width: 25px;\n        -webkit-transform: rotate(45deg);\n                transform: rotate(45deg); }\n      .swal2-icon.swal2-success [class^='swal2-success-line'][class$='long'] {\n        top: 38px;\n        right: 8px;\n        width: 47px;\n        -webkit-transform: rotate(-45deg);\n                transform: rotate(-45deg); }\n\n.swal2-progresssteps {\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  margin: 0 0 1.25em;\n  padding: 0;\n  font-weight: 600; }\n  .swal2-progresssteps li {\n    display: inline-block;\n    position: relative; }\n  .swal2-progresssteps .swal2-progresscircle {\n    width: 2em;\n    height: 2em;\n    border-radius: 2em;\n    background: #3085d6;\n    color: #fff;\n    line-height: 2em;\n    text-align: center;\n    z-index: 20; }\n    .swal2-progresssteps .swal2-progresscircle:first-child {\n      margin-left: 0; }\n    .swal2-progresssteps .swal2-progresscircle:last-child {\n      margin-right: 0; }\n    .swal2-progresssteps .swal2-progresscircle.swal2-activeprogressstep {\n      background: #3085d6; }\n      .swal2-progresssteps .swal2-progresscircle.swal2-activeprogressstep ~ .swal2-progresscircle {\n        background: #add8e6; }\n      .swal2-progresssteps .swal2-progresscircle.swal2-activeprogressstep ~ .swal2-progressline {\n        background: #add8e6; }\n  .swal2-progresssteps .swal2-progressline {\n    width: 2.5em;\n    height: .4em;\n    margin: 0 -1px;\n    background: #3085d6;\n    z-index: 10; }\n\n[class^='swal2'] {\n  -webkit-tap-highlight-color: transparent; }\n\n.swal2-show {\n  -webkit-animation: swal2-show 0.3s;\n          animation: swal2-show 0.3s; }\n  .swal2-show.swal2-noanimation {\n    -webkit-animation: none;\n            animation: none; }\n\n.swal2-hide {\n  -webkit-animation: swal2-hide 0.15s forwards;\n          animation: swal2-hide 0.15s forwards; }\n  .swal2-hide.swal2-noanimation {\n    -webkit-animation: none;\n            animation: none; }\n\n[dir='rtl'] .swal2-close {\n  right: auto;\n  left: 0; }\n\n.swal2-animate-success-icon .swal2-success-line-tip {\n  -webkit-animation: swal2-animate-success-line-tip 0.75s;\n          animation: swal2-animate-success-line-tip 0.75s; }\n\n.swal2-animate-success-icon .swal2-success-line-long {\n  -webkit-animation: swal2-animate-success-line-long 0.75s;\n          animation: swal2-animate-success-line-long 0.75s; }\n\n.swal2-animate-success-icon .swal2-success-circular-line-right {\n  -webkit-animation: swal2-rotate-success-circular-line 4.25s ease-in;\n          animation: swal2-rotate-success-circular-line 4.25s ease-in; }\n\n.swal2-animate-error-icon {\n  -webkit-animation: swal2-animate-error-icon 0.5s;\n          animation: swal2-animate-error-icon 0.5s; }\n  .swal2-animate-error-icon .swal2-x-mark {\n    -webkit-animation: swal2-animate-error-x-mark 0.5s;\n            animation: swal2-animate-error-x-mark 0.5s; }\n\n@-webkit-keyframes swal2-rotate-loading {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@keyframes swal2-rotate-loading {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n"), v;
}), "undefined" != typeof window && window.Sweetalert2 && (window.sweetAlert = window.swal = window.Sweetalert2);

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('/Component', ['exports', 'jquery'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('jquery'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.jQuery);
    global.Component = mod.exports;
  }
})(this, function (exports, _jquery) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _jquery2 = babelHelpers.interopRequireDefault(_jquery);

  if (typeof Object.assign === 'undefined') {
    Object.assign = _jquery2["default"].extend;
  }

  var Component = function () {
    function Component() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      babelHelpers.classCallCheck(this, Component);
      this.$el = options.$el ? options.$el : (0, _jquery2["default"])(document);
      this.el = this.$el[0];
      delete options.$el;
      this.options = options;
      this.isProcessed = false;
    }

    babelHelpers.createClass(Component, [{
      key: 'initialize',
      value: function initialize() {// Initialize the Component
      }
    }, {
      key: 'process',
      value: function process() {// Bind the Event on the Component
      }
    }, {
      key: 'run',
      value: function run() {
        // run Component
        if (!this.isProcessed) {
          this.initialize();
          this.process();
        }

        this.isProcessed = true;
      }
    }, {
      key: 'triggerResize',
      value: function triggerResize() {
        if (document.createEvent) {
          var ev = document.createEvent('Event');
          ev.initEvent('resize', true, true);
          window.dispatchEvent(ev);
        } else {
          element = document.documentElement;
          var event = document.createEventObject();
          element.fireEvent('onresize', event);
        }
      }
    }]);
    return Component;
  }();

  exports["default"] = Component;
});

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('/Plugin', ['exports', 'jquery'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('jquery'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.jQuery);
    global.Plugin = mod.exports;
  }
})(this, function (exports, _jquery) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.pluginFactory = exports.getDefaults = exports.getPlugin = exports.getPluginAPI = exports.Plugin = undefined;

  var _jquery2 = babelHelpers.interopRequireDefault(_jquery);

  var plugins = {};
  var apis = {};

  var Plugin = function () {
    function Plugin($el) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      babelHelpers.classCallCheck(this, Plugin);
      this.name = this.getName();
      this.$el = $el;
      this.options = options;
      this.isRendered = false;
    }

    babelHelpers.createClass(Plugin, [{
      key: 'getName',
      value: function getName() {
        return 'plugin';
      }
    }, {
      key: 'render',
      value: function render() {
        if (_jquery2["default"].fn[this.name]) {
          this.$el[this.name](this.options);
        } else {
          return false;
        }
      }
    }, {
      key: 'initialize',
      value: function initialize() {
        if (this.isRendered) {
          return false;
        }

        this.render();
        this.isRendered = true;
      }
    }], [{
      key: 'getDefaults',
      value: function getDefaults() {
        return {};
      }
    }, {
      key: 'register',
      value: function register(name, obj) {
        if (typeof obj === 'undefined') {
          return;
        }

        plugins[name] = obj;

        if (typeof obj.api !== 'undefined') {
          Plugin.registerApi(name, obj);
        }
      }
    }, {
      key: 'registerApi',
      value: function registerApi(name, obj) {
        var api = obj.api();

        if (typeof api === 'string') {
          var _api = obj.api().split('|');

          var event = _api[0] + ('.plugin.' + name);
          var func = _api[1] || 'render';

          var callback = function callback(e) {
            var $el = (0, _jquery2["default"])(this);
            var plugin = $el.data('pluginInstance');

            if (!plugin) {
              plugin = new obj($el, _jquery2["default"].extend(true, {}, getDefaults(name), $el.data()));
              plugin.initialize();
              $el.data('pluginInstance', plugin);
            }

            plugin[func](e);
          };

          apis[name] = function (selector, context) {
            if (context) {
              (0, _jquery2["default"])(context).off(event);
              (0, _jquery2["default"])(context).on(event, selector, callback);
            } else {
              (0, _jquery2["default"])(selector).on(event, callback);
            }
          };
        } else if (typeof api === 'function') {
          apis[name] = api;
        }
      }
    }]);
    return Plugin;
  }();

  function getPluginAPI(name) {
    if (typeof name === 'undefined') {
      return apis;
    } else {
      return apis[name];
    }
  }

  function getPlugin(name) {
    if (typeof plugins[name] !== 'undefined') {
      return plugins[name];
    } else {
      console.warn('Plugin:' + name + ' has no warpped class.');
      return false;
    }
  }

  function getDefaults(name) {
    var PluginClass = getPlugin(name);

    if (PluginClass) {
      return PluginClass.getDefaults();
    } else {
      return {};
    }
  }

  function pluginFactory(name, $el) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var PluginClass = getPlugin(name);

    if (PluginClass && typeof PluginClass.api === 'undefined') {
      return new PluginClass($el, _jquery2["default"].extend(true, {}, getDefaults(name), options));
    } else if (_jquery2["default"].fn[name]) {
      var plugin = new Plugin($el, options);

      plugin.getName = function () {
        return name;
      };

      plugin.name = name;
      return plugin;
    } else if (typeof PluginClass.api !== 'undefined') {
      // console.log('Plugin:' + name + ' use api render.');
      return false;
    } else {
      console.warn('Plugin:' + name + ' script is not loaded.');
      return false;
    }
  }

  exports["default"] = Plugin;
  exports.Plugin = Plugin;
  exports.getPluginAPI = getPluginAPI;
  exports.getPlugin = getPlugin;
  exports.getDefaults = getDefaults;
  exports.pluginFactory = pluginFactory;
});

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('/Base', ['exports', 'jquery', 'Component', 'Plugin'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('jquery'), require('Component'), require('Plugin'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.jQuery, global.Component, global.Plugin);
    global.Base = mod.exports;
  }
})(this, function (exports, _jquery, _Component2, _Plugin) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _jquery2 = babelHelpers.interopRequireDefault(_jquery);

  var _Component3 = babelHelpers.interopRequireDefault(_Component2);

  var Base = function (_Component) {
    babelHelpers.inherits(Base, _Component);

    function Base() {
      babelHelpers.classCallCheck(this, Base);
      return babelHelpers.possibleConstructorReturn(this, (Base.__proto__ || Object.getPrototypeOf(Base)).apply(this, arguments));
    }

    babelHelpers.createClass(Base, [{
      key: 'initializePlugins',
      value: function initializePlugins() {
        var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        (0, _jquery2["default"])('[data-plugin]', context || this.$el).each(function () {
          var $this = (0, _jquery2["default"])(this),
              name = $this.data('plugin'),
              plugin = (0, _Plugin.pluginFactory)(name, $this, $this.data());

          if (plugin) {
            plugin.initialize();
          }
        });
      }
    }, {
      key: 'initializePluginAPIs',
      value: function initializePluginAPIs() {
        var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;
        var apis = (0, _Plugin.getPluginAPI)();

        for (var name in apis) {
          (0, _Plugin.getPluginAPI)(name)('[data-plugin=' + name + ']', context);
        }
      }
    }]);
    return Base;
  }(_Component3["default"]);

  exports["default"] = Base;
});

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('/Config', ['exports'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.Config = mod.exports;
  }
})(this, function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var values = {
    fontFamily: 'Noto Sans, sans-serif',
    primaryColor: 'blue',
    assets: '../assets'
  };

  function get() {
    var data = values;

    var callback = function callback(data, name) {
      return data[name];
    };

    for (var _len = arguments.length, names = Array(_len), _key = 0; _key < _len; _key++) {
      names[_key] = arguments[_key];
    }

    for (var i = 0; i < names.length; i++) {
      var name = names[i];
      data = callback(data, name);
    }

    return data;
  }

  function set(name, value) {
    if (typeof name === 'string' && typeof value !== 'undefined') {
      values[name] = value;
    } else if ((typeof name === 'undefined' ? 'undefined' : babelHelpers["typeof"](name)) === 'object') {
      values = $.extend(true, {}, values, name);
    }
  }

  function getColor(name, level) {
    if (name === 'primary') {
      name = get('primaryColor');

      if (!name) {
        name = 'red';
      }
    }

    if (typeof values.colors === 'undefined') {
      return null;
    }

    if (typeof values.colors[name] !== 'undefined') {
      if (level && typeof values.colors[name][level] !== 'undefined') {
        return values.colors[name][level];
      }

      if (typeof level === 'undefined') {
        return values.colors[name];
      }
    }

    return null;
  }

  function colors(name, level) {
    return getColor(name, level);
  }

  exports.get = get;
  exports.set = set;
  exports.getColor = getColor;
  exports.colors = colors;
});

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('/Section/Menubar', ['exports', 'jquery', 'Component'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('jquery'), require('Component'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.jQuery, global.Component);
    global.SectionMenubar = mod.exports;
  }
})(this, function (exports, _jquery, _Component2) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _jquery2 = babelHelpers.interopRequireDefault(_jquery);

  var _Component3 = babelHelpers.interopRequireDefault(_Component2);

  var $BODY = (0, _jquery2["default"])('body');
  var $HTML = (0, _jquery2["default"])('html');

  var Scrollable = function () {
    function Scrollable($el) {
      babelHelpers.classCallCheck(this, Scrollable);
      this.$el = $el;
      this["native"] = false;
      this.api = null;
      this.init();
    }

    babelHelpers.createClass(Scrollable, [{
      key: 'init',
      value: function init() {
        if ($BODY.is('.site-menubar-native')) {
          this["native"] = true;
          return;
        }

        this.api = this.$el.asScrollable({
          namespace: 'scrollable',
          skin: 'scrollable-inverse',
          direction: 'vertical',
          contentSelector: '>',
          containerSelector: '>'
        }).data('asScrollable');
      }
    }, {
      key: 'update',
      value: function update() {
        if (this.api) {
          this.api.update();
        }
      }
    }, {
      key: 'enable',
      value: function enable() {
        if (this["native"]) {
          return;
        }

        if (!this.api) {
          this.init();
        }

        if (this.api) {
          this.api.enable();
        }
      }
    }, {
      key: 'disable',
      value: function disable() {
        if (this.api) {
          this.api.disable();
        }
      }
    }]);
    return Scrollable;
  }();

  var Menubar = function (_Component) {
    babelHelpers.inherits(Menubar, _Component);

    function Menubar() {
      var _ref;

      babelHelpers.classCallCheck(this, Menubar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var _this = babelHelpers.possibleConstructorReturn(this, (_ref = Menubar.__proto__ || Object.getPrototypeOf(Menubar)).call.apply(_ref, [this].concat(args)));

      _this.setupMenu();

      _this.$menuBody = _this.$el.children('.mm-panels'); // state

      _this.type = 'fold'; // unfold, fold, open, hide;

      return _this;
    }

    babelHelpers.createClass(Menubar, [{
      key: 'initialize',
      value: function initialize() {
        if (this.$menuBody.length > 0) {
          this.initialized = true;
        } else {
          this.initialized = false;
          return;
        }

        this.scrollable = new Scrollable(this.$menuBody);
        $HTML.removeClass('css-menubar').addClass('js-menubar');
        this.change(this.type);
      }
    }, {
      key: 'setupMenu',
      value: function setupMenu() {
        if (typeof _jquery2["default"].fn.mmenu !== 'undefined') {
          this.$el.mmenu({
            offCanvas: false,
            navbars: [{
              position: 'bottom',
              content: [// '<div class="site-menubar-footer">\n              <a href="javascript: void(0);" class="fold-show" data-placement="top" data-toggle="tooltip" data-original-title="Settings">\n                <span class="icon wb-settings" aria-hidden="true"></span>\n              </a>\n              <a href="javascript: void(0);" data-placement="top" data-toggle="tooltip" data-original-title="Lock">\n                <span class="icon wb-eye-close" aria-hidden="true"></span>\n              </a>\n              <a href="javascript: void(0);" data-placement="top" data-toggle="tooltip" data-original-title="Logout">\n                <span class="icon wb-power" aria-hidden="true"></span>\n              </a>\n            </div>'
              ]
            }]
          });
        }
      }
    }, {
      key: 'getMenuApi',
      value: function getMenuApi() {
        return this.$el.data('mmenu');
      }
    }, {
      key: 'update',
      value: function update() {
        this.scrollable.update();
      }
    }, {
      key: 'change',
      value: function change(type) {
        if (this.initialized) {
          this.reset();
          this[type]();
        }
      }
    }, {
      key: 'animate',
      value: function animate(doing) {
        var _this2 = this;

        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
        $BODY.addClass('site-menubar-changing');
        doing.call(this);
        this.$el.trigger('changing.site.menubar');
        setTimeout(function () {
          callback.call(_this2);
          $BODY.removeClass('site-menubar-changing');

          _this2.update();

          _this2.$el.trigger('changed.site.menubar');
        }, 500);
      }
    }, {
      key: 'hoverTrigger',
      value: function hoverTrigger() {
        var _this3 = this;

        this.$el.on('mouseenter', function () {
          $BODY.addClass('site-menubar-hover');
          setTimeout(function () {
            _this3.scrollable.enable();
          }, 500);
        }).on('mouseleave', function () {
          $BODY.removeClass('site-menubar-hover');

          var api = _this3.getMenuApi();

          if (api) {
            api.openPanel((0, _jquery2["default"])('#mm-0'));
          }

          setTimeout(function () {
            _this3.scrollable.disable();
          }, 500);
        });
      }
    }, {
      key: 'hoverTriggerOff',
      value: function hoverTriggerOff() {
        this.$el.off('mouseenter');
        this.$el.off('mouseleave');
      }
    }, {
      key: 'reset',
      value: function reset() {
        $BODY.removeClass('site-menubar-hide site-menubar-open site-menubar-fold site-menubar-unfold');
        $HTML.removeClass('disable-scrolling');
      }
    }, {
      key: 'open',
      value: function open() {
        this.animate(function () {
          $BODY.addClass('site-menubar-open site-menubar-unfold');
          $HTML.addClass('disable-scrolling');
        }, function () {
          this.scrollable.enable();
        });
        this.type = 'open';
      }
    }, {
      key: 'hide',
      value: function hide() {
        this.animate(function () {
          $BODY.addClass('site-menubar-hide site-menubar-unfold');
        }, function () {
          this.scrollable.enable();
        });
        this.type = 'hide';
      }
    }, {
      key: 'unfold',
      value: function unfold() {
        this.animate(function () {
          $BODY.addClass('site-menubar-unfold');
          this.hoverTriggerOff();
        }, function () {
          this.scrollable.enable();
          this.triggerResize();
        });
        this.type = 'unfold';
      }
    }, {
      key: 'fold',
      value: function fold() {
        this.scrollable.disable();
        this.animate(function () {
          $BODY.addClass('site-menubar-fold');
          this.hoverTrigger();
        }, function () {
          this.triggerResize();
        });
        this.type = 'fold';
      }
    }]);
    return Menubar;
  }(_Component3["default"]);

  exports["default"] = Menubar;
});

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('/Section/Sidebar', ['exports', 'jquery', 'Base', 'Plugin'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('jquery'), require('Base'), require('Plugin'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.jQuery, global.Base, global.Plugin);
    global.SectionSidebar = mod.exports;
  }
})(this, function (exports, _jquery, _Base2, _Plugin) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _jquery2 = babelHelpers.interopRequireDefault(_jquery);

  var _Base3 = babelHelpers.interopRequireDefault(_Base2);

  var Sidebar = function (_Base) {
    babelHelpers.inherits(Sidebar, _Base);

    function Sidebar() {
      babelHelpers.classCallCheck(this, Sidebar);
      return babelHelpers.possibleConstructorReturn(this, (Sidebar.__proto__ || Object.getPrototypeOf(Sidebar)).apply(this, arguments));
    }

    babelHelpers.createClass(Sidebar, [{
      key: 'process',
      value: function process() {
        if (typeof _jquery2["default"].slidePanel === 'undefined') {
          return;
        }

        var sidebar = this;
        (0, _jquery2["default"])(document).on('click', '[data-toggle="site-sidebar"]', function () {
          var $this = (0, _jquery2["default"])(this);
          var direction = 'right';

          if ((0, _jquery2["default"])('body').hasClass('site-menubar-flipped')) {
            direction = 'left';
          }

          var options = _jquery2["default"].extend({}, (0, _Plugin.getDefaults)('slidePanel'), {
            direction: direction,
            skin: 'site-sidebar',
            dragTolerance: 80,
            template: function template(options) {
              return '<div class="' + options.classes.base + ' ' + options.classes.base + '-' + options.direction + '">\n\t    <div class="' + options.classes.content + ' site-sidebar-content"></div>\n\t    <div class="slidePanel-handler"></div>\n\t    </div>';
            },
            afterLoad: function afterLoad() {
              var self = this;
              this.$panel.find('.tab-pane').asScrollable({
                namespace: 'scrollable',
                contentSelector: '> div',
                containerSelector: '> div'
              });
              sidebar.initializePlugins(self.$panel);
              this.$panel.on('shown.bs.tab', function () {
                self.$panel.find('.tab-pane.active').asScrollable('update');
              });
            },
            beforeShow: function beforeShow() {
              if (!$this.hasClass('active')) {
                $this.addClass('active');
              }
            },
            afterHide: function afterHide() {
              if ($this.hasClass('active')) {
                $this.removeClass('active');
              }
            }
          });

          if ($this.hasClass('active')) {
            _jquery2["default"].slidePanel.hide();
          } else {
            var url = $this.data('url');

            if (!url) {
              url = $this.attr('href');
              url = url && url.replace(/.*(?=#[^\s]*$)/, '');
            }

            _jquery2["default"].slidePanel.show({
              url: url
            }, options);
          }
        });
        (0, _jquery2["default"])(document).on('click', '[data-toggle="show-chat"]', function () {
          (0, _jquery2["default"])('#conversation').addClass('active');
        });
        (0, _jquery2["default"])(document).on('click', '[data-toggle="close-chat"]', function () {
          (0, _jquery2["default"])('#conversation').removeClass('active');
        });
      }
    }]);
    return Sidebar;
  }(_Base3["default"]);

  exports["default"] = Sidebar;
});

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('/Section/PageAside', ['exports', 'jquery', 'Component'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('jquery'), require('Component'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.jQuery, global.Component);
    global.SectionPageAside = mod.exports;
  }
})(this, function (exports, _jquery, _Component2) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _jquery2 = babelHelpers.interopRequireDefault(_jquery);

  var _Component3 = babelHelpers.interopRequireDefault(_Component2);

  var $BODY = (0, _jquery2["default"])('body');

  var PageAside = function (_Component) {
    babelHelpers.inherits(PageAside, _Component);

    function PageAside() {
      var _ref;

      babelHelpers.classCallCheck(this, PageAside);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var _this = babelHelpers.possibleConstructorReturn(this, (_ref = PageAside.__proto__ || Object.getPrototypeOf(PageAside)).call.apply(_ref, [this].concat(args)));

      _this.$scroll = _this.$el.find('.page-aside-scroll');
      _this.scrollable = _this.$scroll.asScrollable({
        namespace: 'scrollable',
        contentSelector: '> [data-role=\'content\']',
        containerSelector: '> [data-role=\'container\']'
      }).data('asScrollable');
      return _this;
    }

    babelHelpers.createClass(PageAside, [{
      key: 'process',
      value: function process() {
        var _this2 = this;

        if ($BODY.is('.page-aside-fixed') || $BODY.is('.page-aside-scroll')) {
          this.$el.on('transitionend', function () {
            _this2.scrollable.update();
          });
        }

        Breakpoints.on('change', function () {
          var current = Breakpoints.current().name;

          if (!$BODY.is('.page-aside-fixed') && !$BODY.is('.page-aside-scroll')) {
            if (current === 'xs') {
              _this2.scrollable.enable();

              _this2.$el.on('transitionend', function () {
                _this2.scrollable.update();
              });
            } else {
              _this2.$el.off('transitionend');

              _this2.scrollable.update();
            }
          }
        });
        (0, _jquery2["default"])(document).on('click.pageAsideScroll', '.page-aside-switch', function () {
          var isOpen = _this2.$el.hasClass('open');

          if (isOpen) {
            _this2.$el.removeClass('open');
          } else {
            _this2.scrollable.update();

            _this2.$el.addClass('open');
          }
        });
        (0, _jquery2["default"])(document).on('click.pageAsideScroll', '[data-toggle="collapse"]', function (e) {
          var $trigger = (0, _jquery2["default"])(e.target);

          if (!$trigger.is('[data-toggle="collapse"]')) {
            $trigger = $trigger.parents('[data-toggle="collapse"]');
          }

          var href = void 0;
          var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '');
          var $target = (0, _jquery2["default"])(target);

          if ($target.attr('id') === 'site-navbar-collapse') {
            _this2.scrollable.update();
          }
        });
      }
    }]);
    return PageAside;
  }(_Component3["default"]);

  exports["default"] = PageAside;
});

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('/Section/GridMenu', ['exports', 'jquery', 'Component'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('jquery'), require('Component'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.jQuery, global.Component);
    global.SectionGridMenu = mod.exports;
  }
})(this, function (exports, _jquery, _Component2) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _jquery2 = babelHelpers.interopRequireDefault(_jquery);

  var _Component3 = babelHelpers.interopRequireDefault(_Component2);

  var $BODY = (0, _jquery2["default"])('body');
  var $HTML = (0, _jquery2["default"])('html');

  var Scrollable = function () {
    function Scrollable($el) {
      babelHelpers.classCallCheck(this, Scrollable);
      this.$el = $el;
      this.api = null;
      this.init();
    }

    babelHelpers.createClass(Scrollable, [{
      key: 'init',
      value: function init() {
        this.api = this.$el.asScrollable({
          namespace: 'scrollable',
          skin: 'scrollable-inverse',
          direction: 'vertical',
          contentSelector: '>',
          containerSelector: '>'
        }).data('asScrollable');
      }
    }, {
      key: 'update',
      value: function update() {
        if (this.api) {
          this.api.update();
        }
      }
    }, {
      key: 'enable',
      value: function enable() {
        if (!this.api) {
          this.init();
        }

        if (this.api) {
          this.api.enable();
        }
      }
    }, {
      key: 'disable',
      value: function disable() {
        if (this.api) {
          this.api.disable();
        }
      }
    }]);
    return Scrollable;
  }();

  var GridMenu = function (_Component) {
    babelHelpers.inherits(GridMenu, _Component);

    function GridMenu() {
      var _ref;

      babelHelpers.classCallCheck(this, GridMenu);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var _this = babelHelpers.possibleConstructorReturn(this, (_ref = GridMenu.__proto__ || Object.getPrototypeOf(GridMenu)).call.apply(_ref, [this].concat(args)));

      _this.isOpened = false;
      _this.scrollable = new Scrollable(_this.$el);
      return _this;
    }

    babelHelpers.createClass(GridMenu, [{
      key: 'open',
      value: function open() {
        this.animate(function () {
          this.$el.addClass('active');
          (0, _jquery2["default"])('[data-toggle="gridmenu"]').addClass('active').attr('aria-expanded', true);
          $BODY.addClass('site-gridmenu-active');
          $HTML.addClass('disable-scrolling');
        }, function () {
          this.scrollable.enable();
        });
        this.isOpened = true;
      }
    }, {
      key: 'close',
      value: function close() {
        this.animate(function () {
          this.$el.removeClass('active');
          (0, _jquery2["default"])('[data-toggle="gridmenu"]').addClass('active').attr('aria-expanded', true);
          $BODY.removeClass('site-gridmenu-active');
          $HTML.removeClass('disable-scrolling');
        }, function () {
          this.scrollable.disable();
        });
        this.isOpened = false;
      }
    }, {
      key: 'toggle',
      value: function toggle(opened) {
        if (opened) {
          this.open();
        } else {
          this.close();
        }
      }
    }, {
      key: 'animate',
      value: function animate(doing, callback) {
        var _this2 = this;

        doing.call(this);
        this.$el.trigger('changing.site.gridmenu');
        setTimeout(function () {
          callback.call(_this2);

          _this2.$el.trigger('changed.site.gridmenu');
        }, 500);
      }
    }]);
    return GridMenu;
  }(_Component3["default"]);

  exports["default"] = GridMenu;
});

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('/Site', ['exports', 'jquery', 'Base', 'Menubar', 'Sidebar', 'PageAside', 'GridMenu'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('jquery'), require('Base'), require('Menubar'), require('Sidebar'), require('PageAside'), require('GridMenu'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.jQuery, global.Base, global.SectionMenubar, global.SectionSidebar, global.SectionPageAside, global.SectionGridMenu);
    global.Site = mod.exports;
  }
})(this, function (exports, _jquery, _Base2, _Menubar, _Sidebar, _PageAside, _GridMenu) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getInstance = exports.run = exports.Site = undefined;

  var _jquery2 = babelHelpers.interopRequireDefault(_jquery);

  var _Base3 = babelHelpers.interopRequireDefault(_Base2);

  var _Menubar2 = babelHelpers.interopRequireDefault(_Menubar);

  var _Sidebar2 = babelHelpers.interopRequireDefault(_Sidebar);

  var _PageAside2 = babelHelpers.interopRequireDefault(_PageAside);

  var _GridMenu2 = babelHelpers.interopRequireDefault(_GridMenu);

  var DOC = document;
  var $DOC = (0, _jquery2["default"])(document);
  var $BODY = (0, _jquery2["default"])('body');

  var Site = function (_Base) {
    babelHelpers.inherits(Site, _Base);

    function Site() {
      babelHelpers.classCallCheck(this, Site);
      return babelHelpers.possibleConstructorReturn(this, (Site.__proto__ || Object.getPrototypeOf(Site)).apply(this, arguments));
    }

    babelHelpers.createClass(Site, [{
      key: 'initialize',
      value: function initialize() {
        var _this2 = this;

        this.startLoading();
        this.initializePluginAPIs();
        this.initializePlugins();
        this.initComponents();
        setTimeout(function () {
          _this2.setDefaultState();
        }, 500);
      }
    }, {
      key: 'process',
      value: function process() {
        this.polyfillIEWidth();
        this.initBootstrap();
        this.setupMenubar();
        this.setupFullScreen();
        this.setupMegaNavbar();
        this.setupTour();
        this.setupNavbarCollpase();
        this.setupGridMenu(); // //Dropdown menu setup
        // //===================

        this.$el.on('click', '.dropdown-menu-media', function (e) {
          e.stopPropagation();
        });
      }
    }, {
      key: '_getDefaultMeunbarType',
      value: function _getDefaultMeunbarType() {
        var breakpoint = this.getCurrentBreakpoint(),
            type = false;

        if ($BODY.data('autoMenubar') === false || $BODY.is('.site-menubar-keep')) {
          if ($BODY.hasClass('site-menubar-fold')) {
            type = 'fold';
          } else if ($BODY.hasClass('site-menubar-unfold')) {
            type = 'unfold';
          }
        }

        switch (breakpoint) {
          case 'lg':
          case 'md':
          case 'sm':
            type = type || 'fold';
            break;

          case 'xs':
            type = 'hide';
            break;
        }

        return type;
      }
    }, {
      key: 'menubarType',
      value: function menubarType(type) {
        //Remover esse return em caso de problemas com a navbar
        return;

        var toggle = function toggle($el) {
          $el.toggleClass('hided', !(type === 'open'));
          $el.toggleClass('unfolded', !(type === 'fold'));
        };

        (0, _jquery2["default"])('[data-toggle="menubar"]').each(function () {
          var $this = (0, _jquery2["default"])(this);
          var $hamburger = (0, _jquery2["default"])(this).find('.hamburger');

          if ($hamburger.length > 0) {
            toggle($hamburger);
          } else {
            toggle($this);
          }
        });
      }
    }, {
      key: 'initComponents',
      value: function initComponents() {
        this.menubar = new _Menubar2["default"]({
          $el: (0, _jquery2["default"])('.site-menubar')
        });
        this.gridmenu = new _GridMenu2["default"]({
          $el: (0, _jquery2["default"])('.site-gridmenu')
        });
        this.sidebar = new _Sidebar2["default"]();
        var $aside = (0, _jquery2["default"])('.page-aside');

        if ($aside.length > 0) {
          this.aside = new _PageAside2["default"]({
            $el: $aside
          });
          this.aside.run();
        }

        this.menubar.run();
        this.gridmenu.run();
      }
    }, {
      key: 'setDefaultState',
      value: function setDefaultState() {
        this.menubar.change(this._getDefaultMeunbarType());
      }
    }, {
      key: 'getCurrentBreakpoint',
      value: function getCurrentBreakpoint() {
        var bp = Breakpoints.current();
        return bp ? bp.name : 'lg';
      }
    }, {
      key: 'initBootstrap',
      value: function initBootstrap() {
        // Tooltip setup
        // =============
        $DOC.tooltip({
          selector: '[data-tooltip=true]',
          container: 'body'
        });
        (0, _jquery2["default"])('[data-toggle="tooltip"]').tooltip();
        (0, _jquery2["default"])('[data-toggle="popover"]').popover();
      }
    }, {
      key: 'polyfillIEWidth',
      value: function polyfillIEWidth() {
        if (navigator.userAgent.match(/IEMobile\/10\.0/)) {
          var msViewportStyle = DOC.createElement('style');
          msViewportStyle.appendChild(DOC.createTextNode('@-ms-viewport{width:auto!important}'));
          DOC.querySelector('head').appendChild(msViewportStyle);
        }
      }
    }, {
      key: 'setupGridMenu',
      value: function setupGridMenu() {
        var self = this;
        $DOC.on('click', '[data-toggle="gridmenu"]', function () {
          var $this = (0, _jquery2["default"])(this);
          var isOpened = self.gridmenu.isOpened;

          if (isOpened) {
            $this.addClass('active').attr('aria-expanded', true);
          } else {
            $this.removeClass('active').attr('aria-expanded', false);
          }

          self.gridmenu.toggle(!isOpened);
        });
      }
    }, {
      key: 'setupFullScreen',
      value: function setupFullScreen() {
        if (typeof screenfull !== 'undefined') {
          $DOC.on('click', '[data-toggle="fullscreen"]', function () {
            if (screenfull.enabled) {
              screenfull.toggle();
            }

            return false;
          });

          if (screenfull.enabled) {
            DOC.addEventListener(screenfull.raw.fullscreenchange, function () {
              (0, _jquery2["default"])('[data-toggle="fullscreen"]').toggleClass('active', screenfull.isFullscreen);
            });
          }
        }
      }
    }, {
      key: 'setupMegaNavbar',
      value: function setupMegaNavbar() {
        $DOC.on('click', '.navbar-mega .dropdown-menu', function (e) {
          e.stopPropagation();
        }).on('show.bs.dropdown', function (e) {
          var $target = (0, _jquery2["default"])(e.target);
          var $trigger = e.relatedTarget ? (0, _jquery2["default"])(e.relatedTarget) : $target.children('[data-toggle="dropdown"]');
          var animation = $trigger.data('animation');

          if (animation) {
            var $menu = $target.children('.dropdown-menu');
            $menu.addClass('animation-' + animation).one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
              $menu.removeClass('animation-' + animation);
            });
          }
        }).on('shown.bs.dropdown', function (e) {
          var $menu = (0, _jquery2["default"])(e.target).find('.dropdown-menu-media > .list-group');

          if ($menu.length > 0) {
            var api = $menu.data('asScrollable');

            if (api) {
              api.update();
            } else {
              $menu.asScrollable({
                namespace: 'scrollable',
                contentSelector: '> [data-role=\'content\']',
                containerSelector: '> [data-role=\'container\']'
              });
            }
          }
        });
      }
    }, {
      key: 'setupMenubar',
      value: function setupMenubar() {
        var _this3 = this;

        (0, _jquery2["default"])(document).on('click', '[data-toggle="menubar"]', function () {
          var type = _this3.menubar.type;

          switch (type) {
            case 'fold':
              type = 'unfold';
              break;

            case 'unfold':
              type = 'fold';
              break;

            case 'open':
              type = 'hide';
              break;

            case 'hide':
              type = 'open';
              break;
            // no default
          }

          _this3.menubar.change(type);

          _this3.menubarType(type);

          return false;
        });
        Breakpoints.on('change', function () {
          _this3.menubar.type = _this3._getDefaultMeunbarType();

          _this3.menubar.change(_this3.menubar.type);
        });
      }
    }, {
      key: 'setupNavbarCollpase',
      value: function setupNavbarCollpase() {
        (0, _jquery2["default"])(document).on('click', "[data-target='#site-navbar-collapse']", function (e) {
          var $trigger = (0, _jquery2["default"])(this);
          var isClose = $trigger.hasClass('collapsed');
          $BODY.addClass("site-navbar-collapsing");
          $BODY.toggleClass("site-navbar-collapse-show", !isClose);
          setTimeout(function () {
            $BODY.removeClass("site-navbar-collapsing");
          }, 350);
        });
      }
    }, {
      key: 'startLoading',
      value: function startLoading() {
        if (typeof _jquery2["default"].fn.animsition === 'undefined') {
          return false;
        } // let loadingType = 'default';


        $BODY.animsition({
          inClass: 'fade-in',
          inDuration: 10,
          loading: false,
          loadingClass: 'loader-overlay',
          loadingParentElement: 'html',
          loadingInner: '\n      <div class="loader-content">\n        <div class="loader-index">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>',
          onLoadEvent: true
        });
      }
    }, {
      key: 'setupTour',
      value: function setupTour(flag) {
        if (typeof this.tour === 'undefined') {
          if (typeof introJs === 'undefined') {
            return;
          }

          var overflow = (0, _jquery2["default"])('body').css('overflow'),
              self = this,
              tourOptions = Config.get('tour');
          this.tour = introJs();
          this.tour.onbeforechange(function () {
            (0, _jquery2["default"])('body').css('overflow', 'hidden');
          });
          this.tour.oncomplete(function () {
            (0, _jquery2["default"])('body').css('overflow', overflow);
          });
          this.tour.onexit(function () {
            (0, _jquery2["default"])('body').css('overflow', overflow);
          });
          this.tour.setOptions(tourOptions);
          (0, _jquery2["default"])('.site-tour-trigger').on('click', function () {
            self.tour.start();
          });
        } // if (window.localStorage && window.localStorage.getItem('startTour') && (flag !== true)) {
        //   return;
        // } else {
        //   this.tour.start();
        //   window.localStorage.setItem('startTour', true);
        // }

      }
    }]);
    return Site;
  }(_Base3["default"]);

  var instance = null;

  function getInstance() {
    if (!instance) {
      instance = new Site();
    }

    return instance;
  }

  function run() {
    var site = getInstance();
    site.run();
  }

  exports["default"] = Site;
  exports.Site = Site;
  exports.run = run;
  exports.getInstance = getInstance;
});

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define('/dashboard/v1', ['jquery', 'Site'], factory);
  } else if (typeof exports !== "undefined") {
    factory(require('jquery'), require('Site'));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.jQuery, global.Site);
    global.dashboardV1 = mod.exports;
  }
})(this, function (_jquery, _Site) {
  'use strict';

  var _jquery2 = babelHelpers.interopRequireDefault(_jquery);

  (0, _jquery2["default"])(document).ready(function ($$$1) {
    (0, _Site.run)(); // Widget Linearea Color
    // ---------------------
    // (function () {
    //   var timeline_labels = [];
    //   var timeline_data1 = [];
    //   var timeline_data2 = [];
    //   var timeline_data3 = [];
    //   var totalPoints = 20;
    //   var updateInterval = 2000;
    //   var now = new Date().getTime();
    //   function GetData() {
    //     timeline_labels.shift();
    //     timeline_data1.shift();
    //     timeline_data2.shift();
    //     timeline_data3.shift();
    //     while (timeline_data1.length < totalPoints) {
    //       var x = Math.random() * 100 + 800;
    //       var y = Math.random() * 100 + 400;
    //       var z = Math.random() * 100 + 200;
    //       timeline_labels.push(now += updateInterval);
    //       timeline_data1.push(x);
    //       timeline_data2.push(y);
    //       timeline_data3.push(z);
    //     }
    //   }
    //   var timlelineData = {
    //     labels: timeline_labels,
    //     series: [timeline_data1, timeline_data2, timeline_data3]
    //   };
    //   var timlelineData = {
    //     labels: timeline_labels,
    //     series: [timeline_data1, timeline_data2, timeline_data3]
    //   };
    //   var timelineOptions = {
    //     low: 0,
    //     showArea: true,
    //     showPoint: false,
    //     showLine: false,
    //     fullWidth: true,
    //     chartPadding: {
    //       top: 0,
    //       right: 0,
    //       bottom: 0,
    //       left: 0
    //     },
    //     axisX: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     axisY: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     }
    //     // plugins: [Chartist.plugins.tooltip()]
    //   };
    //   // new Chartist.Line("#widgetLineareaColor .ct-chart", timlelineData, timelineOptions);
    //   function update() {
    //     // GetData();
    //     // new Chartist.Line("#widgetLineareaColor .ct-chart", timlelineData, timelineOptions);
    //     // setTimeout(update, updateInterval);
    //   }
    //   update();
    // })();
    // Widget Stacked Bar
    // ------------------
    // (function () {
    //   var timeline_labels = [];
    //   var timeline_data1 = [];
    //   var timeline_data2 = [];
    //   var totalPoints = 30;
    //   var updateInterval = 2500;
    //   var now = new Date().getTime();
    //   function GetData() {
    //     timeline_labels.shift();
    //     timeline_data1.shift();
    //     timeline_data2.shift();
    //     while (timeline_data1.length < totalPoints) {
    //       var x = Math.floor(Math.random() * 100) + 800;
    //       var y = Math.floor(Math.random() * 100) + 600;
    //       timeline_labels.push(now += updateInterval);
    //       timeline_data1.push(x);
    //       timeline_data2.push(y);
    //     }
    //   }
    //   var timlelineData = {
    //     labels: timeline_labels,
    //     series: [timeline_data1, timeline_data2]
    //   };
    //   var timlelineData = {
    //     labels: timeline_labels,
    //     series: [timeline_data1, timeline_data2]
    //   };
    //   var timelineOptions = {
    //     stackBars: true,
    //     fullWidth: true,
    //     seriesBarDistance: 0,
    //     chartPadding: {
    //       top: 0,
    //       right: 30,
    //       bottom: 30,
    //       left: 20
    //     },
    //     axisX: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     axisY: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     plugins: [
    //       // Chartist.plugins.tooltip()
    //     ]
    //   };
    //   // new Chartist.Bar("#widgetStackedBar .ct-chart", timlelineData, timelineOptions);
    //   function update() {
    //     // GetData();
    //     // new Chartist.Bar("#widgetStackedBar .ct-chart", timlelineData, timelineOptions);
    //     // setTimeout(update, updateInterval);
    //   }
    //   update();
    // })();
    // Widget Statistic
    // ----------------
    // (function () {
    //   (function () {
    //     var defaults = Plugin.getDefaults('vectorMap');
    //     var options = $$$1.extend({}, defaults, {
    //       map: "au_mill",
    //       markers: [{
    //         latLng: [-33.55, 150.53],
    //         name: '1,512 Visits'
    //       }, {
    //         latLng: [-37.5, 144.58],
    //         name: '940 Visits'
    //       }, {
    //         latLng: [-31.58, 115.49],
    //         name: '340 Visits'
    //       }],
    //       markerStyle: {
    //         initial: {
    //           r: 6,
    //           fill: Config.colors("blue-grey", 600),
    //           stroke: Config.colors("blue-grey", 600),
    //           "stroke-width": 6,
    //           "stroke-opacity": 0.6
    //         },
    //         hover: {
    //           r: 10,
    //           fill: Config.colors("blue-grey", 500),
    //           "stroke-width": 0
    //         }
    //       }
    //     }, true);
    //     $$$1('#widgetJvmap').vectorMap(options);
    //   })();
    // })();
    // Widget Linepoint
    // ----------------
    // (function () {
    //   new Chartist.Line("#widgetLinepoint .ct-chart", {
    //     labels: ['1', '2', '3', '4', '5', '6', '7', '8'],
    //     series: [[1, 1.5, 0.5, 2, 1, 2.5, 1.5, 2]]
    //   }, {
    //     low: 0,
    //     showArea: false,
    //     showPoint: true,
    //     showLine: true,
    //     fullWidth: true,
    //     lineSmooth: false,
    //     chartPadding: {
    //       top: 10,
    //       right: -4,
    //       bottom: 10,
    //       left: -4
    //     },
    //     axisX: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     axisY: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     plugins: [Chartist.plugins.tooltip()]
    //   });
    // })();
    // Widget Sale Bar
    // ---------------
    // (function () {
    //   new Chartist.Bar("#widgetSaleBar .ct-chart", {
    //     labels: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'Q'],
    //     series: [[50, 90, 100, 90, 110, 100, 120, 130, 115, 95, 80, 85, 100, 140, 130, 120]]
    //   }, {
    //     low: 0,
    //     fullWidth: true,
    //     chartPadding: {
    //       top: 0,
    //       right: 20,
    //       bottom: 30,
    //       left: 20
    //     },
    //     axisX: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     axisY: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     plugins: [Chartist.plugins.tooltip()]
    //   });
    // })();
    // Widget Overall Views
    // --------------------
    // (function () {
    //   new Chartist.Bar("#widgetOverallViews .small-bar-one", {
    //     labels: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],
    //     series: [[120, 60, 100, 50, 40, 120, 80, 130]]
    //   }, {
    //     low: 0,
    //     fullWidth: true,
    //     chartPadding: {
    //       top: -10,
    //       right: 0,
    //       bottom: 0,
    //       left: 0
    //     },
    //     axisX: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     axisY: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     plugins: [Chartist.plugins.tooltip()]
    //   });
    //   new Chartist.Bar("#widgetOverallViews .small-bar-two", {
    //     labels: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],
    //     series: [[50, 90, 30, 90, 130, 40, 120, 90]]
    //   }, {
    //     low: 0,
    //     fullWidth: true,
    //     chartPadding: {
    //       top: -10,
    //       right: 0,
    //       bottom: 0,
    //       left: 0
    //     },
    //     axisX: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     axisY: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     plugins: [Chartist.plugins.tooltip()]
    //   });
    //   new Chartist.Line("#widgetOverallViews .line-chart", {
    //     labels: ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'],
    //     series: [[20, 50, 70, 110, 100, 200, 230], [50, 80, 140, 130, 150, 110, 160]]
    //   }, {
    //     low: 0,
    //     showArea: false,
    //     showPoint: false,
    //     showLine: true,
    //     lineSmooth: false,
    //     fullWidth: true,
    //     chartPadding: {
    //       top: 0,
    //       right: 10,
    //       bottom: 0,
    //       left: 10
    //     },
    //     axisX: {
    //       showLabel: true,
    //       showGrid: false,
    //       offset: 30
    //     },
    //     axisY: {
    //       showLabel: true,
    //       showGrid: true,
    //       offset: 30
    //     },
    //     plugins: [Chartist.plugins.tooltip()]
    //   });
    // })();
    // Widget Timeline
    // ---------------
    // (function () {
    //   var timeline_labels = [];
    //   var timeline_data1 = [];
    //   var timeline_data2 = [];
    //   var totalPoints = 20;
    //   var updateInterval = 1000;
    //   var now = new Date().getTime();
    //   function GetData() {
    //     timeline_labels.shift();
    //     timeline_data1.shift();
    //     timeline_data2.shift();
    //     while (timeline_data1.length < totalPoints) {
    //       var x = Math.random() * 100 + 800;
    //       var y = Math.random() * 100 + 400;
    //       timeline_labels.push(now += updateInterval);
    //       timeline_data1.push(x);
    //       timeline_data2.push(y);
    //     }
    //   }
    //   var timlelineData = {
    //     labels: timeline_labels,
    //     series: [timeline_data1, timeline_data2]
    //   };
    //   var timelineOptions = {
    //     low: 0,
    //     showArea: true,
    //     showPoint: false,
    //     showLine: false,
    //     fullWidth: true,
    //     chartPadding: {
    //       top: 0,
    //       right: 0,
    //       bottom: 0,
    //       left: 0
    //     },
    //     axisX: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     axisY: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     plugins: [Chartist.plugins.tooltip()]
    //   };
    //   new Chartist.Line("#widgetTimeline .ct-chart", timlelineData, timelineOptions);
    //   function update() {
    //     GetData();
    //     new Chartist.Line("#widgetTimeline .ct-chart", timlelineData, timelineOptions);
    //     setTimeout(update, updateInterval);
    //   }
    //   update();
    // })();
    // (function () {
    //   var snow = new Skycons({
    //     "color": Config.colors("blue-grey", 500)
    //   });
    //   snow.set(document.getElementById("widgetSnow"), "snow");
    //   snow.play();
    //   var sunny = new Skycons({
    //     "color": Config.colors("blue-grey", 700)
    //   });
    //   sunny.set(document.getElementById("widgetSunny"), "clear-day");
    //   sunny.play();
    // })();
    // Widget Linepoint
    // ----------------
    // (function () {
    //   new Chartist.Line("#widgetLinepointDate .ct-chart", {
    //     labels: ['1', '2', '3', '4', '5', '6', '7', '8'],
    //     series: [[36, 45, 28, 19, 39, 46, 35, 13]]
    //   }, {
    //     low: 0,
    //     showArea: false,
    //     showPoint: true,
    //     showLine: true,
    //     fullWidth: true,
    //     lineSmooth: false,
    //     chartPadding: {
    //       top: 5,
    //       right: -4,
    //       bottom: 10,
    //       left: -4
    //     },
    //     axisX: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     axisY: {
    //       showLabel: false,
    //       showGrid: false,
    //       offset: 0
    //     },
    //     plugins: [Chartist.plugins.tooltip()]
    //   });
    // })();
  });
});
/**!
 * Sortable
 * @author	RubaXa   <trash@rubaxa.org>
 * @license MIT
 */


(function sortableModule(factory) {
  "use strict";

  if (typeof define === "function" && define.amd) {
    define(factory);
  } else if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = factory();
  } else {
    /* jshint sub:true */
    window["Sortable"] = factory();
  }
})(function sortableFactory() {
  "use strict";

  if (typeof window === "undefined" || !window.document) {
    return function sortableError() {
      throw new Error("Sortable.js requires a window with a document");
    };
  }

  var dragEl,
      parentEl,
      ghostEl,
      cloneEl,
      rootEl,
      nextEl,
      lastDownEl,
      scrollEl,
      scrollParentEl,
      scrollCustomFn,
      lastEl,
      lastCSS,
      lastParentCSS,
      oldIndex,
      newIndex,
      activeGroup,
      putSortable,
      autoScroll = {},
      tapEvt,
      touchEvt,
      moved,

  /** @const */
  R_SPACE = /\s+/g,
      R_FLOAT = /left|right|inline/,
      expando = 'Sortable' + new Date().getTime(),
      win = window,
      document = win.document,
      parseInt = win.parseInt,
      setTimeout = win.setTimeout,
      $ = win.jQuery || win.Zepto,
      Polymer = win.Polymer,
      captureMode = false,
      passiveMode = false,
      supportDraggable = ('draggable' in document.createElement('div')),
      supportCssPointerEvents = function (el) {
    // false when IE11
    if (!!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\.|msie)/i)) {
      return false;
    }

    el = document.createElement('x');
    el.style.cssText = 'pointer-events:auto';
    return el.style.pointerEvents === 'auto';
  }(),
      _silent = false,
      abs = Math.abs,
      min = Math.min,
      savedInputChecked = [],
      touchDragOverListeners = [],
      _autoScroll = _throttle(function (
  /**Event*/
  evt,
  /**Object*/
  options,
  /**HTMLElement*/
  rootEl) {
    // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
    if (rootEl && options.scroll) {
      var _this = rootEl[expando],
          el,
          rect,
          sens = options.scrollSensitivity,
          speed = options.scrollSpeed,
          x = evt.clientX,
          y = evt.clientY,
          winWidth = window.innerWidth,
          winHeight = window.innerHeight,
          vx,
          vy,
          scrollOffsetX,
          scrollOffsetY; // Delect scrollEl

      if (scrollParentEl !== rootEl) {
        scrollEl = options.scroll;
        scrollParentEl = rootEl;
        scrollCustomFn = options.scrollFn;

        if (scrollEl === true) {
          scrollEl = rootEl;

          do {
            if (scrollEl.offsetWidth < scrollEl.scrollWidth || scrollEl.offsetHeight < scrollEl.scrollHeight) {
              break;
            }
            /* jshint boss:true */

          } while (scrollEl = scrollEl.parentNode);
        }
      }

      if (scrollEl) {
        el = scrollEl;
        rect = scrollEl.getBoundingClientRect();
        vx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);
        vy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);
      }

      if (!(vx || vy)) {
        vx = (winWidth - x <= sens) - (x <= sens);
        vy = (winHeight - y <= sens) - (y <= sens);
        /* jshint expr:true */

        (vx || vy) && (el = win);
      }

      if (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {
        autoScroll.el = el;
        autoScroll.vx = vx;
        autoScroll.vy = vy;
        clearInterval(autoScroll.pid);

        if (el) {
          autoScroll.pid = setInterval(function () {
            scrollOffsetY = vy ? vy * speed : 0;
            scrollOffsetX = vx ? vx * speed : 0;

            if ('function' === typeof scrollCustomFn) {
              return scrollCustomFn.call(_this, scrollOffsetX, scrollOffsetY, evt);
            }

            if (el === win) {
              win.scrollTo(win.pageXOffset + scrollOffsetX, win.pageYOffset + scrollOffsetY);
            } else {
              el.scrollTop += scrollOffsetY;
              el.scrollLeft += scrollOffsetX;
            }
          }, 24);
        }
      }
    }
  }, 30),
      _prepareGroup = function _prepareGroup(options) {
    function toFn(value, pull) {
      if (value === void 0 || value === true) {
        value = group.name;
      }

      if (typeof value === 'function') {
        return value;
      } else {
        return function (to, from) {
          var fromGroup = from.options.group.name;
          return pull ? value : value && (value.join ? value.indexOf(fromGroup) > -1 : fromGroup == value);
        };
      }
    }

    var group = {};
    var originalGroup = options.group;

    if (!originalGroup || _typeof2(originalGroup) != 'object') {
      originalGroup = {
        name: originalGroup
      };
    }

    group.name = originalGroup.name;
    group.checkPull = toFn(originalGroup.pull, true);
    group.checkPut = toFn(originalGroup.put);
    group.revertClone = originalGroup.revertClone;
    options.group = group;
  }; // Detect support a passive mode


  try {
    window.addEventListener('test', null, Object.defineProperty({}, 'passive', {
      get: function get() {
        // `false`, because everything starts to work incorrectly and instead of d'n'd,
        // begins the page has scrolled.
        passiveMode = false;
        captureMode = {
          capture: false,
          passive: passiveMode
        };
      }
    }));
  } catch (err) {}
  /**
   * @class  Sortable
   * @param  {HTMLElement}  el
   * @param  {Object}       [options]
   */


  function Sortable(el, options) {
    if (!(el && el.nodeType && el.nodeType === 1)) {
      throw 'Sortable: `el` must be HTMLElement, and not ' + {}.toString.call(el);
    }

    this.el = el; // root element

    this.options = options = _extend({}, options); // Export instance

    el[expando] = this; // Default options

    var defaults = {
      group: Math.random(),
      sort: true,
      disabled: false,
      store: null,
      handle: null,
      scroll: true,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      draggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',
      ghostClass: 'sortable-ghost',
      chosenClass: 'sortable-chosen',
      dragClass: 'sortable-drag',
      ignore: 'a, img',
      filter: null,
      preventOnFilter: true,
      animation: 0,
      setData: function setData(dataTransfer, dragEl) {
        dataTransfer.setData('Text', dragEl.textContent);
      },
      dropBubble: false,
      dragoverBubble: false,
      dataIdAttr: 'data-id',
      delay: 0,
      forceFallback: false,
      fallbackClass: 'sortable-fallback',
      fallbackOnBody: false,
      fallbackTolerance: 0,
      fallbackOffset: {
        x: 0,
        y: 0
      },
      supportPointer: Sortable.supportPointer !== false
    }; // Set default options

    for (var name in defaults) {
      !(name in options) && (options[name] = defaults[name]);
    }

    _prepareGroup(options); // Bind all private methods


    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    } // Setup drag mode


    this.nativeDraggable = options.forceFallback ? false : supportDraggable; // Bind events

    _on(el, 'mousedown', this._onTapStart);

    _on(el, 'touchstart', this._onTapStart);

    options.supportPointer && _on(el, 'pointerdown', this._onTapStart);

    if (this.nativeDraggable) {
      _on(el, 'dragover', this);

      _on(el, 'dragenter', this);
    }

    touchDragOverListeners.push(this._onDragOver); // Restore sorting

    options.store && this.sort(options.store.get(this));
  }

  Sortable.prototype =
  /** @lends Sortable.prototype */
  {
    constructor: Sortable,
    _onTapStart: function _onTapStart(
    /** Event|TouchEvent */
    evt) {
      var _this = this,
          el = this.el,
          options = this.options,
          preventOnFilter = options.preventOnFilter,
          type = evt.type,
          touch = evt.touches && evt.touches[0],
          target = (touch || evt).target,
          originalTarget = evt.target.shadowRoot && evt.path && evt.path[0] || target,
          filter = options.filter,
          startIndex;

      _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.


      if (dragEl) {
        return;
      }

      if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
        return; // only left button or enabled
      } // cancel dnd if original target is content editable


      if (originalTarget.isContentEditable) {
        return;
      }

      target = _closest(target, options.draggable, el);

      if (!target) {
        return;
      }

      if (lastDownEl === target) {
        // Ignoring duplicate `down`
        return;
      } // Get the index of the dragged element within its parent


      startIndex = _index(target, options.draggable); // Check filter

      if (typeof filter === 'function') {
        if (filter.call(this, evt, target, this)) {
          _dispatchEvent(_this, originalTarget, 'filter', target, el, el, startIndex);

          preventOnFilter && evt.preventDefault();
          return; // cancel dnd
        }
      } else if (filter) {
        filter = filter.split(',').some(function (criteria) {
          criteria = _closest(originalTarget, criteria.trim(), el);

          if (criteria) {
            _dispatchEvent(_this, criteria, 'filter', target, el, el, startIndex);

            return true;
          }
        });

        if (filter) {
          preventOnFilter && evt.preventDefault();
          return; // cancel dnd
        }
      }

      if (options.handle && !_closest(originalTarget, options.handle, el)) {
        return;
      } // Prepare `dragstart`


      this._prepareDragStart(evt, touch, target, startIndex);
    },
    _prepareDragStart: function _prepareDragStart(
    /** Event */
    evt,
    /** Touch */
    touch,
    /** HTMLElement */
    target,
    /** Number */
    startIndex) {
      var _this = this,
          el = _this.el,
          options = _this.options,
          ownerDocument = el.ownerDocument,
          dragStartFn;

      if (target && !dragEl && target.parentNode === el) {
        tapEvt = evt;
        rootEl = el;
        dragEl = target;
        parentEl = dragEl.parentNode;
        nextEl = dragEl.nextSibling;
        lastDownEl = target;
        activeGroup = options.group;
        oldIndex = startIndex;
        this._lastX = (touch || evt).clientX;
        this._lastY = (touch || evt).clientY;
        dragEl.style['will-change'] = 'all';

        dragStartFn = function dragStartFn() {
          // Delayed drag has been triggered
          // we can re-enable the events: touchmove/mousemove
          _this._disableDelayedDrag(); // Make the element draggable


          dragEl.draggable = _this.nativeDraggable; // Chosen item

          _toggleClass(dragEl, options.chosenClass, true); // Bind the events: dragstart/dragend


          _this._triggerDragStart(evt, touch); // Drag start event


          _dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex);
        }; // Disable "draggable"


        options.ignore.split(',').forEach(function (criteria) {
          _find(dragEl, criteria.trim(), _disableDraggable);
        });

        _on(ownerDocument, 'mouseup', _this._onDrop);

        _on(ownerDocument, 'touchend', _this._onDrop);

        _on(ownerDocument, 'touchcancel', _this._onDrop);

        _on(ownerDocument, 'selectstart', _this);

        options.supportPointer && _on(ownerDocument, 'pointercancel', _this._onDrop);

        if (options.delay) {
          // If the user moves the pointer or let go the click or touch
          // before the delay has been reached:
          // disable the delayed drag
          _on(ownerDocument, 'mouseup', _this._disableDelayedDrag);

          _on(ownerDocument, 'touchend', _this._disableDelayedDrag);

          _on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);

          _on(ownerDocument, 'mousemove', _this._disableDelayedDrag);

          _on(ownerDocument, 'touchmove', _this._disableDelayedDrag);

          options.supportPointer && _on(ownerDocument, 'pointermove', _this._disableDelayedDrag);
          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
        } else {
          dragStartFn();
        }
      }
    },
    _disableDelayedDrag: function _disableDelayedDrag() {
      var ownerDocument = this.el.ownerDocument;
      clearTimeout(this._dragStartTimer);

      _off(ownerDocument, 'mouseup', this._disableDelayedDrag);

      _off(ownerDocument, 'touchend', this._disableDelayedDrag);

      _off(ownerDocument, 'touchcancel', this._disableDelayedDrag);

      _off(ownerDocument, 'mousemove', this._disableDelayedDrag);

      _off(ownerDocument, 'touchmove', this._disableDelayedDrag);

      _off(ownerDocument, 'pointermove', this._disableDelayedDrag);
    },
    _triggerDragStart: function _triggerDragStart(
    /** Event */
    evt,
    /** Touch */
    touch) {
      touch = touch || (evt.pointerType == 'touch' ? evt : null);

      if (touch) {
        // Touch device support
        tapEvt = {
          target: dragEl,
          clientX: touch.clientX,
          clientY: touch.clientY
        };

        this._onDragStart(tapEvt, 'touch');
      } else if (!this.nativeDraggable) {
        this._onDragStart(tapEvt, true);
      } else {
        _on(dragEl, 'dragend', this);

        _on(rootEl, 'dragstart', this._onDragStart);
      }

      try {
        if (document.selection) {
          // Timeout neccessary for IE9
          _nextTick(function () {
            document.selection.empty();
          });
        } else {
          window.getSelection().removeAllRanges();
        }
      } catch (err) {}
    },
    _dragStarted: function _dragStarted() {
      if (rootEl && dragEl) {
        var options = this.options; // Apply effect

        _toggleClass(dragEl, options.ghostClass, true);

        _toggleClass(dragEl, options.dragClass, false);

        Sortable.active = this; // Drag start event

        _dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex);
      } else {
        this._nulling();
      }
    },
    _emulateDragOver: function _emulateDragOver() {
      if (touchEvt) {
        if (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY) {
          return;
        }

        this._lastX = touchEvt.clientX;
        this._lastY = touchEvt.clientY;

        if (!supportCssPointerEvents) {
          _css(ghostEl, 'display', 'none');
        }

        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        var parent = target;
        var i = touchDragOverListeners.length;

        if (target && target.shadowRoot) {
          target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
          parent = target;
        }

        if (parent) {
          do {
            if (parent[expando]) {
              while (i--) {
                touchDragOverListeners[i]({
                  clientX: touchEvt.clientX,
                  clientY: touchEvt.clientY,
                  target: target,
                  rootEl: parent
                });
              }

              break;
            }

            target = parent; // store last element
          }
          /* jshint boss:true */
          while (parent = parent.parentNode);
        }

        if (!supportCssPointerEvents) {
          _css(ghostEl, 'display', '');
        }
      }
    },
    _onTouchMove: function _onTouchMove(
    /**TouchEvent*/
    evt) {
      if (tapEvt) {
        var options = this.options,
            fallbackTolerance = options.fallbackTolerance,
            fallbackOffset = options.fallbackOffset,
            touch = evt.touches ? evt.touches[0] : evt,
            dx = touch.clientX - tapEvt.clientX + fallbackOffset.x,
            dy = touch.clientY - tapEvt.clientY + fallbackOffset.y,
            translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)'; // only set the status to dragging, when we are actually dragging

        if (!Sortable.active) {
          if (fallbackTolerance && min(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY)) < fallbackTolerance) {
            return;
          }

          this._dragStarted();
        } // as well as creating the ghost element on the document body


        this._appendGhost();

        moved = true;
        touchEvt = touch;

        _css(ghostEl, 'webkitTransform', translate3d);

        _css(ghostEl, 'mozTransform', translate3d);

        _css(ghostEl, 'msTransform', translate3d);

        _css(ghostEl, 'transform', translate3d);

        evt.preventDefault();
      }
    },
    _appendGhost: function _appendGhost() {
      if (!ghostEl) {
        var rect = dragEl.getBoundingClientRect(),
            css = _css(dragEl),
            options = this.options,
            ghostRect;

        ghostEl = dragEl.cloneNode(true);

        _toggleClass(ghostEl, options.ghostClass, false);

        _toggleClass(ghostEl, options.fallbackClass, true);

        _toggleClass(ghostEl, options.dragClass, true);

        _css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));

        _css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));

        _css(ghostEl, 'width', rect.width);

        _css(ghostEl, 'height', rect.height);

        _css(ghostEl, 'opacity', '0.8');

        _css(ghostEl, 'position', 'fixed');

        _css(ghostEl, 'zIndex', '100000');

        _css(ghostEl, 'pointerEvents', 'none');

        options.fallbackOnBody && document.body.appendChild(ghostEl) || rootEl.appendChild(ghostEl); // Fixing dimensions.

        ghostRect = ghostEl.getBoundingClientRect();

        _css(ghostEl, 'width', rect.width * 2 - ghostRect.width);

        _css(ghostEl, 'height', rect.height * 2 - ghostRect.height);
      }
    },
    _onDragStart: function _onDragStart(
    /**Event*/
    evt,
    /**boolean*/
    useFallback) {
      var _this = this;

      var dataTransfer = evt.dataTransfer;
      var options = _this.options;

      _this._offUpEvents();

      if (activeGroup.checkPull(_this, _this, dragEl, evt)) {
        cloneEl = _clone(dragEl);
        cloneEl.draggable = false;
        cloneEl.style['will-change'] = '';

        _css(cloneEl, 'display', 'none');

        _toggleClass(cloneEl, _this.options.chosenClass, false); // #1143: IFrame support workaround


        _this._cloneId = _nextTick(function () {
          rootEl.insertBefore(cloneEl, dragEl);

          _dispatchEvent(_this, rootEl, 'clone', dragEl);
        });
      }

      _toggleClass(dragEl, options.dragClass, true);

      if (useFallback) {
        if (useFallback === 'touch') {
          // Bind touch events
          _on(document, 'touchmove', _this._onTouchMove);

          _on(document, 'touchend', _this._onDrop);

          _on(document, 'touchcancel', _this._onDrop);

          if (options.supportPointer) {
            _on(document, 'pointermove', _this._onTouchMove);

            _on(document, 'pointerup', _this._onDrop);
          }
        } else {
          // Old brwoser
          _on(document, 'mousemove', _this._onTouchMove);

          _on(document, 'mouseup', _this._onDrop);
        }

        _this._loopId = setInterval(_this._emulateDragOver, 50);
      } else {
        if (dataTransfer) {
          dataTransfer.effectAllowed = 'move';
          options.setData && options.setData.call(_this, dataTransfer, dragEl);
        }

        _on(document, 'drop', _this); // #1143: Бывает элемент с IFrame внутри блокирует `drop`,
        // поэтому если вызвался `mouseover`, значит надо отменять весь d'n'd.
        // Breaking Chrome 62+
        // _on(document, 'mouseover', _this);


        _this._dragStartId = _nextTick(_this._dragStarted);
      }
    },
    _onDragOver: function _onDragOver(
    /**Event*/
    evt) {
      var el = this.el,
          target,
          dragRect,
          targetRect,
          revert,
          options = this.options,
          group = options.group,
          activeSortable = Sortable.active,
          isOwner = activeGroup === group,
          isMovingBetweenSortable = false,
          canSort = options.sort;

      if (evt.preventDefault !== void 0) {
        evt.preventDefault();
        !options.dragoverBubble && evt.stopPropagation();
      }

      if (dragEl.animated) {
        return;
      }

      moved = true;

      if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list
      : putSortable === this || (activeSortable.lastPullMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt)) && (evt.rootEl === void 0 || evt.rootEl === this.el) // touch fallback
      ) {
        // Smart auto-scrolling
        _autoScroll(evt, options, this.el);

        if (_silent) {
          return;
        }

        target = _closest(evt.target, options.draggable, el);
        dragRect = dragEl.getBoundingClientRect();

        if (putSortable !== this) {
          putSortable = this;
          isMovingBetweenSortable = true;
        }

        if (revert) {
          _cloneHide(activeSortable, true);

          parentEl = rootEl; // actualization

          if (cloneEl || nextEl) {
            rootEl.insertBefore(dragEl, cloneEl || nextEl);
          } else if (!canSort) {
            rootEl.appendChild(dragEl);
          }

          return;
        }

        if (el.children.length === 0 || el.children[0] === ghostEl || el === evt.target && _ghostIsLast(el, evt)) {
          //assign target only if condition is true
          if (el.children.length !== 0 && el.children[0] !== ghostEl && el === evt.target) {
            target = el.lastElementChild;
          }

          if (target) {
            if (target.animated) {
              return;
            }

            targetRect = target.getBoundingClientRect();
          }

          _cloneHide(activeSortable, isOwner);

          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt) !== false) {
            if (!dragEl.contains(el)) {
              el.appendChild(dragEl);
              parentEl = el; // actualization
            }

            this._animate(dragRect, dragEl);

            target && this._animate(targetRect, target);
          }
        } else if (target && !target.animated && target !== dragEl && target.parentNode[expando] !== void 0) {
          if (lastEl !== target) {
            lastEl = target;
            lastCSS = _css(target);
            lastParentCSS = _css(target.parentNode);
          }

          targetRect = target.getBoundingClientRect();
          var width = targetRect.right - targetRect.left,
              height = targetRect.bottom - targetRect.top,
              floating = R_FLOAT.test(lastCSS.cssFloat + lastCSS.display) || lastParentCSS.display == 'flex' && lastParentCSS['flex-direction'].indexOf('row') === 0,
              isWide = target.offsetWidth > dragEl.offsetWidth,
              isLong = target.offsetHeight > dragEl.offsetHeight,
              halfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5,
              nextSibling = target.nextElementSibling,
              after = false;

          if (floating) {
            var elTop = dragEl.offsetTop,
                tgTop = target.offsetTop;

            if (elTop === tgTop) {
              after = target.previousElementSibling === dragEl && !isWide || halfway && isWide;
            } else if (target.previousElementSibling === dragEl || dragEl.previousElementSibling === target) {
              after = (evt.clientY - targetRect.top) / height > 0.5;
            } else {
              after = tgTop > elTop;
            }
          } else if (!isMovingBetweenSortable) {
            after = nextSibling !== dragEl && !isLong || halfway && isLong;
          }

          var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

          if (moveVector !== false) {
            if (moveVector === 1 || moveVector === -1) {
              after = moveVector === 1;
            }

            _silent = true;
            setTimeout(_unsilent, 30);

            _cloneHide(activeSortable, isOwner);

            if (!dragEl.contains(el)) {
              if (after && !nextSibling) {
                el.appendChild(dragEl);
              } else {
                target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
              }
            }

            parentEl = dragEl.parentNode; // actualization

            this._animate(dragRect, dragEl);

            this._animate(targetRect, target);
          }
        }
      }
    },
    _animate: function _animate(prevRect, target) {
      var ms = this.options.animation;

      if (ms) {
        var currentRect = target.getBoundingClientRect();

        if (prevRect.nodeType === 1) {
          prevRect = prevRect.getBoundingClientRect();
        }

        _css(target, 'transition', 'none');

        _css(target, 'transform', 'translate3d(' + (prevRect.left - currentRect.left) + 'px,' + (prevRect.top - currentRect.top) + 'px,0)');

        target.offsetWidth; // repaint

        _css(target, 'transition', 'all ' + ms + 'ms');

        _css(target, 'transform', 'translate3d(0,0,0)');

        clearTimeout(target.animated);
        target.animated = setTimeout(function () {
          _css(target, 'transition', '');

          _css(target, 'transform', '');

          target.animated = false;
        }, ms);
      }
    },
    _offUpEvents: function _offUpEvents() {
      var ownerDocument = this.el.ownerDocument;

      _off(document, 'touchmove', this._onTouchMove);

      _off(document, 'pointermove', this._onTouchMove);

      _off(ownerDocument, 'mouseup', this._onDrop);

      _off(ownerDocument, 'touchend', this._onDrop);

      _off(ownerDocument, 'pointerup', this._onDrop);

      _off(ownerDocument, 'touchcancel', this._onDrop);

      _off(ownerDocument, 'pointercancel', this._onDrop);

      _off(ownerDocument, 'selectstart', this);
    },
    _onDrop: function _onDrop(
    /**Event*/
    evt) {
      var el = this.el,
          options = this.options;
      clearInterval(this._loopId);
      clearInterval(autoScroll.pid);
      clearTimeout(this._dragStartTimer);

      _cancelNextTick(this._cloneId);

      _cancelNextTick(this._dragStartId); // Unbind events


      _off(document, 'mouseover', this);

      _off(document, 'mousemove', this._onTouchMove);

      if (this.nativeDraggable) {
        _off(document, 'drop', this);

        _off(el, 'dragstart', this._onDragStart);
      }

      this._offUpEvents();

      if (evt) {
        if (moved) {
          evt.preventDefault();
          !options.dropBubble && evt.stopPropagation();
        }

        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

        if (rootEl === parentEl || Sortable.active.lastPullMode !== 'clone') {
          // Remove clone
          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
        }

        if (dragEl) {
          if (this.nativeDraggable) {
            _off(dragEl, 'dragend', this);
          }

          _disableDraggable(dragEl);

          dragEl.style['will-change'] = ''; // Remove class's

          _toggleClass(dragEl, this.options.ghostClass, false);

          _toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event


          _dispatchEvent(this, rootEl, 'unchoose', dragEl, parentEl, rootEl, oldIndex);

          if (rootEl !== parentEl) {
            newIndex = _index(dragEl, options.draggable);

            if (newIndex >= 0) {
              // Add event
              _dispatchEvent(null, parentEl, 'add', dragEl, parentEl, rootEl, oldIndex, newIndex); // Remove event


              _dispatchEvent(this, rootEl, 'remove', dragEl, parentEl, rootEl, oldIndex, newIndex); // drag from one list and drop into another


              _dispatchEvent(null, parentEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex);

              _dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex);
            }
          } else {
            if (dragEl.nextSibling !== nextEl) {
              // Get the index of the dragged element within its parent
              newIndex = _index(dragEl, options.draggable);

              if (newIndex >= 0) {
                // drag & drop within the same list
                _dispatchEvent(this, rootEl, 'update', dragEl, parentEl, rootEl, oldIndex, newIndex);

                _dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex);
              }
            }
          }

          if (Sortable.active) {
            /* jshint eqnull:true */
            if (newIndex == null || newIndex === -1) {
              newIndex = oldIndex;
            }

            _dispatchEvent(this, rootEl, 'end', dragEl, parentEl, rootEl, oldIndex, newIndex); // Save sorting


            this.save();
          }
        }
      }

      this._nulling();
    },
    _nulling: function _nulling() {
      rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = scrollEl = scrollParentEl = tapEvt = touchEvt = moved = newIndex = lastEl = lastCSS = putSortable = activeGroup = Sortable.active = null;
      savedInputChecked.forEach(function (el) {
        el.checked = true;
      });
      savedInputChecked.length = 0;
    },
    handleEvent: function handleEvent(
    /**Event*/
    evt) {
      switch (evt.type) {
        case 'drop':
        case 'dragend':
          this._onDrop(evt);

          break;

        case 'dragover':
        case 'dragenter':
          if (dragEl) {
            this._onDragOver(evt);

            _globalDragOver(evt);
          }

          break;

        case 'mouseover':
          this._onDrop(evt);

          break;

        case 'selectstart':
          evt.preventDefault();
          break;
      }
    },

    /**
     * Serializes the item into an array of string.
     * @returns {String[]}
     */
    toArray: function toArray() {
      var order = [],
          el,
          children = this.el.children,
          i = 0,
          n = children.length,
          options = this.options;

      for (; i < n; i++) {
        el = children[i];

        if (_closest(el, options.draggable, this.el)) {
          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
        }
      }

      return order;
    },

    /**
     * Sorts the elements according to the array.
     * @param  {String[]}  order  order of the items
     */
    sort: function sort(order) {
      var items = {},
          rootEl = this.el;
      this.toArray().forEach(function (id, i) {
        var el = rootEl.children[i];

        if (_closest(el, this.options.draggable, rootEl)) {
          items[id] = el;
        }
      }, this);
      order.forEach(function (id) {
        if (items[id]) {
          rootEl.removeChild(items[id]);
          rootEl.appendChild(items[id]);
        }
      });
    },

    /**
     * Save the current sorting
     */
    save: function save() {
      var store = this.options.store;
      store && store.set(this);
    },

    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param   {HTMLElement}  el
     * @param   {String}       [selector]  default: `options.draggable`
     * @returns {HTMLElement|null}
     */
    closest: function closest(el, selector) {
      return _closest(el, selector || this.options.draggable, this.el);
    },

    /**
     * Set/get option
     * @param   {string} name
     * @param   {*}      [value]
     * @returns {*}
     */
    option: function option(name, value) {
      var options = this.options;

      if (value === void 0) {
        return options[name];
      } else {
        options[name] = value;

        if (name === 'group') {
          _prepareGroup(options);
        }
      }
    },

    /**
     * Destroy
     */
    destroy: function destroy() {
      var el = this.el;
      el[expando] = null;

      _off(el, 'mousedown', this._onTapStart);

      _off(el, 'touchstart', this._onTapStart);

      _off(el, 'pointerdown', this._onTapStart);

      if (this.nativeDraggable) {
        _off(el, 'dragover', this);

        _off(el, 'dragenter', this);
      } // Remove draggable attributes


      Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
        el.removeAttribute('draggable');
      });
      touchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);

      this._onDrop();

      this.el = el = null;
    }
  };

  function _cloneHide(sortable, state) {
    if (sortable.lastPullMode !== 'clone') {
      state = true;
    }

    if (cloneEl && cloneEl.state !== state) {
      _css(cloneEl, 'display', state ? 'none' : '');

      if (!state) {
        if (cloneEl.state) {
          if (sortable.options.group.revertClone) {
            rootEl.insertBefore(cloneEl, nextEl);

            sortable._animate(dragEl, cloneEl);
          } else {
            rootEl.insertBefore(cloneEl, dragEl);
          }
        }
      }

      cloneEl.state = state;
    }
  }

  function _closest(
  /**HTMLElement*/
  el,
  /**String*/
  selector,
  /**HTMLElement*/
  ctx) {
    if (el) {
      ctx = ctx || document;

      do {
        if (selector === '>*' && el.parentNode === ctx || _matches(el, selector)) {
          return el;
        }
        /* jshint boss:true */

      } while (el = _getParentOrHost(el));
    }

    return null;
  }

  function _getParentOrHost(el) {
    var parent = el.host;
    return parent && parent.nodeType ? parent : el.parentNode;
  }

  function _globalDragOver(
  /**Event*/
  evt) {
    if (evt.dataTransfer) {
      evt.dataTransfer.dropEffect = 'move';
    }

    evt.preventDefault();
  }

  function _on(el, event, fn) {
    el.addEventListener(event, fn, captureMode);
  }

  function _off(el, event, fn) {
    el.removeEventListener(event, fn, captureMode);
  }

  function _toggleClass(el, name, state) {
    if (el) {
      if (el.classList) {
        el.classList[state ? 'add' : 'remove'](name);
      } else {
        var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
        el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
      }
    }
  }

  function _css(el, prop, val) {
    var style = el && el.style;

    if (style) {
      if (val === void 0) {
        if (document.defaultView && document.defaultView.getComputedStyle) {
          val = document.defaultView.getComputedStyle(el, '');
        } else if (el.currentStyle) {
          val = el.currentStyle;
        }

        return prop === void 0 ? val : val[prop];
      } else {
        if (!(prop in style)) {
          prop = '-webkit-' + prop;
        }

        style[prop] = val + (typeof val === 'string' ? '' : 'px');
      }
    }
  }

  function _find(ctx, tagName, iterator) {
    if (ctx) {
      var list = ctx.getElementsByTagName(tagName),
          i = 0,
          n = list.length;

      if (iterator) {
        for (; i < n; i++) {
          iterator(list[i], i);
        }
      }

      return list;
    }

    return [];
  }

  function _dispatchEvent(sortable, rootEl, name, targetEl, toEl, fromEl, startIndex, newIndex) {
    sortable = sortable || rootEl[expando];
    var evt = document.createEvent('Event'),
        options = sortable.options,
        onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);
    evt.initEvent(name, true, true);
    evt.to = toEl || rootEl;
    evt.from = fromEl || rootEl;
    evt.item = targetEl || rootEl;
    evt.clone = cloneEl;
    evt.oldIndex = startIndex;
    evt.newIndex = newIndex;
    rootEl.dispatchEvent(evt);

    if (options[onName]) {
      options[onName].call(sortable, evt);
    }
  }

  function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {
    var evt,
        sortable = fromEl[expando],
        onMoveFn = sortable.options.onMove,
        retVal;
    evt = document.createEvent('Event');
    evt.initEvent('move', true, true);
    evt.to = toEl;
    evt.from = fromEl;
    evt.dragged = dragEl;
    evt.draggedRect = dragRect;
    evt.related = targetEl || toEl;
    evt.relatedRect = targetRect || toEl.getBoundingClientRect();
    evt.willInsertAfter = willInsertAfter;
    fromEl.dispatchEvent(evt);

    if (onMoveFn) {
      retVal = onMoveFn.call(sortable, evt, originalEvt);
    }

    return retVal;
  }

  function _disableDraggable(el) {
    el.draggable = false;
  }

  function _unsilent() {
    _silent = false;
  }
  /** @returns {HTMLElement|false} */


  function _ghostIsLast(el, evt) {
    var lastEl = el.lastElementChild,
        rect = lastEl.getBoundingClientRect(); // 5 — min delta
    // abs — нельзя добавлять, а то глюки при наведении сверху

    return evt.clientY - (rect.top + rect.height) > 5 || evt.clientX - (rect.left + rect.width) > 5;
  }
  /**
   * Generate id
   * @param   {HTMLElement} el
   * @returns {String}
   * @private
   */


  function _generateId(el) {
    var str = el.tagName + el.className + el.src + el.href + el.textContent,
        i = str.length,
        sum = 0;

    while (i--) {
      sum += str.charCodeAt(i);
    }

    return sum.toString(36);
  }
  /**
   * Returns the index of an element within its parent for a selected set of
   * elements
   * @param  {HTMLElement} el
   * @param  {selector} selector
   * @return {number}
   */


  function _index(el, selector) {
    var index = 0;

    if (!el || !el.parentNode) {
      return -1;
    }

    while (el && (el = el.previousElementSibling)) {
      if (el.nodeName.toUpperCase() !== 'TEMPLATE' && (selector === '>*' || _matches(el, selector))) {
        index++;
      }
    }

    return index;
  }

  function _matches(
  /**HTMLElement*/
  el,
  /**String*/
  selector) {
    if (el) {
      selector = selector.split('.');
      var tag = selector.shift().toUpperCase(),
          re = new RegExp('\\s(' + selector.join('|') + ')(?=\\s)', 'g');
      return (tag === '' || el.nodeName.toUpperCase() == tag) && (!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length);
    }

    return false;
  }

  function _throttle(callback, ms) {
    var args, _this;

    return function () {
      if (args === void 0) {
        args = arguments;
        _this = this;
        setTimeout(function () {
          if (args.length === 1) {
            callback.call(_this, args[0]);
          } else {
            callback.apply(_this, args);
          }

          args = void 0;
        }, ms);
      }
    };
  }

  function _extend(dst, src) {
    if (dst && src) {
      for (var key in src) {
        if (src.hasOwnProperty(key)) {
          dst[key] = src[key];
        }
      }
    }

    return dst;
  }

  function _clone(el) {
    if (Polymer && Polymer.dom) {
      return Polymer.dom(el).cloneNode(true);
    } else if ($) {
      return $(el).clone(true)[0];
    } else {
      return el.cloneNode(true);
    }
  }

  function _saveInputCheckedState(root) {
    var inputs = root.getElementsByTagName('input');
    var idx = inputs.length;

    while (idx--) {
      var el = inputs[idx];
      el.checked && savedInputChecked.push(el);
    }
  }

  function _nextTick(fn) {
    return setTimeout(fn, 0);
  }

  function _cancelNextTick(id) {
    return clearTimeout(id);
  } // Fixed #973:


  _on(document, 'touchmove', function (evt) {
    if (Sortable.active) {
      evt.preventDefault();
    }
  }); // Export utils


  Sortable.utils = {
    on: _on,
    off: _off,
    css: _css,
    find: _find,
    is: function is(el, selector) {
      return !!_closest(el, selector, el);
    },
    extend: _extend,
    throttle: _throttle,
    closest: _closest,
    toggleClass: _toggleClass,
    clone: _clone,
    index: _index,
    nextTick: _nextTick,
    cancelNextTick: _cancelNextTick
  };
  /**
   * Create sortable instance
   * @param {HTMLElement}  el
   * @param {Object}      [options]
   */

  Sortable.create = function (el, options) {
    return new Sortable(el, options);
  }; // Export


  Sortable.version = '1.7.0';
  return Sortable;
});

eval(function (p, a, c, k, _e2, d) {
  _e2 = function e(c) {
    return (c < a ? '' : _e2(parseInt(c / a))) + ((c = c % a) > 35 ? String.fromCharCode(c + 29) : c.toString(36));
  };

  while (c--) {
    if (k[c]) p = p.replace(new RegExp('\\b' + _e2(c) + '\\b', 'g'), k[c]);
  }

  return p;
}('(m($){18 W=2v.4T,D=2v.4S,F=2v.4R,u=2v.4Q;m V(){C $("<4P/>")};$.N=m(T,c){18 O=$(T),1F,A=V(),1k=V(),I=V().r(V()).r(V()).r(V()),B=V().r(V()).r(V()).r(V()),E=$([]),1K,G,l,17={v:0,l:0},Q,M,1l,1g={v:0,l:0},12=0,1J="1H",2k,2j,1t,1s,S,1B,1A,2o,2n,14,1Q,a,b,j,g,f={a:0,b:0,j:0,g:0,H:0,L:0},2u=R.4O,1M=4N.4M,$p,d,i,o,w,h,2p;m 1n(x){C x+17.v-1g.v};m 1m(y){C y+17.l-1g.l};m 1b(x){C x-17.v+1g.v};m 1a(y){C y-17.l+1g.l};m 1z(3J){C 3J.4L-1g.v};m 1y(3I){C 3I.4K-1g.l};m 13(32){18 1i=32||1t,1h=32||1s;C{a:u(f.a*1i),b:u(f.b*1h),j:u(f.j*1i),g:u(f.g*1h),H:u(f.j*1i)-u(f.a*1i),L:u(f.g*1h)-u(f.b*1h)}};m 23(a,b,j,g,31){18 1i=31||1t,1h=31||1s;f={a:u(a/1i||0),b:u(b/1h||0),j:u(j/1i||0),g:u(g/1h||0)};f.H=f.j-f.a;f.L=f.g-f.b};m 1f(){9(!1F||!O.H()){C}17={v:u(O.2t().v),l:u(O.2t().l)};Q=O.2Y();M=O.3H();17.l+=(O.30()-M)>>1;17.v+=(O.2q()-Q)>>1;1B=u(c.4J/1t)||0;1A=u(c.4I/1s)||0;2o=u(F(c.4H/1t||1<<24,Q));2n=u(F(c.4G/1s||1<<24,M));9($().4F=="1.3.2"&&1J=="21"&&!2u["4E"]){17.l+=D(R.1q.2r,2u.2r);17.v+=D(R.1q.2s,2u.2s)}1g=/1H|4D/.1c(1l.q("1p"))?{v:u(1l.2t().v)-1l.2s(),l:u(1l.2t().l)-1l.2r()}:1J=="21"?{v:$(R).2s(),l:$(R).2r()}:{v:0,l:0};G=1n(0);l=1m(0);9(f.j>Q||f.g>M){1U()}};m 1V(3F){9(!1Q){C}A.q({v:1n(f.a),l:1m(f.b)}).r(1k).H(w=f.H).L(h=f.L);1k.r(I).r(E).q({v:0,l:0});I.H(D(w-I.2q()+I.2Y(),0)).L(D(h-I.30()+I.3H(),0));$(B[0]).q({v:G,l:l,H:f.a,L:M});$(B[1]).q({v:G+f.a,l:l,H:w,L:f.b});$(B[2]).q({v:G+f.j,l:l,H:Q-f.j,L:M});$(B[3]).q({v:G+f.a,l:l+f.g,H:w,L:M-f.g});w-=E.2q();h-=E.30();2O(E.3f){15 8:$(E[4]).q({v:w>>1});$(E[5]).q({v:w,l:h>>1});$(E[6]).q({v:w>>1,l:h});$(E[7]).q({l:h>>1});15 4:E.3G(1,3).q({v:w});E.3G(2,4).q({l:h})}9(3F!==Y){9($.N.2Z!=2R){$(R).U($.N.2z,$.N.2Z)}9(c.1T){$(R)[$.N.2z]($.N.2Z=2R)}}9(1j&&I.2q()-I.2Y()==2){I.q("3E",0);3x(m(){I.q("3E","4C")},0)}};m 22(3D){1f();1V(3D);a=1n(f.a);b=1m(f.b);j=1n(f.j);g=1m(f.g)};m 27(2X,2w){c.1P?2X.4B(c.1P,2w):2X.1r()};m 1d(2W){18 x=1b(1z(2W))-f.a,y=1a(1y(2W))-f.b;9(!2p){1f();2p=11;A.1G("4A",m(){2p=Y})}S="";9(c.2D){9(y<=c.1W){S="n"}X{9(y>=f.L-c.1W){S="s"}}9(x<=c.1W){S+="w"}X{9(x>=f.H-c.1W){S+="e"}}}A.q("2V",S?S+"-19":c.26?"4z":"");9(1K){1K.4y()}};m 2S(4x){$("1q").q("2V","");9(c.4w||f.H*f.L==0){27(A.r(B),m(){$(J).1r()})}$(R).U("P",2l);A.P(1d);c.2f(T,13())};m 2C(1X){9(1X.3z!=1){C Y}1f();9(S){$("1q").q("2V",S+"-19");a=1n(f[/w/.1c(S)?"j":"a"]);b=1m(f[/n/.1c(S)?"g":"b"]);$(R).P(2l).1G("1x",2S);A.U("P",1d)}X{9(c.26){2k=G+f.a-1z(1X);2j=l+f.b-1y(1X);A.U("P",1d);$(R).P(2T).1G("1x",m(){c.2f(T,13());$(R).U("P",2T);A.P(1d)})}X{O.1O(1X)}}C Y};m 1w(3C){9(14){9(3C){j=D(G,F(G+Q,a+W(g-b)*14*(j>a||-1)));g=u(D(l,F(l+M,b+W(j-a)/14*(g>b||-1))));j=u(j)}X{g=D(l,F(l+M,b+W(j-a)/14*(g>b||-1)));j=u(D(G,F(G+Q,a+W(g-b)*14*(j>a||-1))));g=u(g)}}};m 1U(){a=F(a,G+Q);b=F(b,l+M);9(W(j-a)<1B){j=a-1B*(j<a||-1);9(j<G){a=G+1B}X{9(j>G+Q){a=G+Q-1B}}}9(W(g-b)<1A){g=b-1A*(g<b||-1);9(g<l){b=l+1A}X{9(g>l+M){b=l+M-1A}}}j=D(G,F(j,G+Q));g=D(l,F(g,l+M));1w(W(j-a)<W(g-b)*14);9(W(j-a)>2o){j=a-2o*(j<a||-1);1w()}9(W(g-b)>2n){g=b-2n*(g<b||-1);1w(11)}f={a:1b(F(a,j)),j:1b(D(a,j)),b:1a(F(b,g)),g:1a(D(b,g)),H:W(j-a),L:W(g-b)};1V();c.2g(T,13())};m 2l(2U){j=/w|e|^$/.1c(S)||14?1z(2U):1n(f.j);g=/n|s|^$/.1c(S)||14?1y(2U):1m(f.g);1U();C Y};m 1v(3B,3A){j=(a=3B)+f.H;g=(b=3A)+f.L;$.2c(f,{a:1b(a),b:1a(b),j:1b(j),g:1a(g)});1V();c.2g(T,13())};m 2T(2m){a=D(G,F(2k+1z(2m),G+Q-f.H));b=D(l,F(2j+1y(2m),l+M-f.L));1v(a,b);2m.4v();C Y};m 2h(){$(R).U("P",2h);1f();j=a;g=b;1U();S="";9(!B.2y(":4u")){A.r(B).1r().2E(c.1P||0)}1Q=11;$(R).U("1x",1N).P(2l).1G("1x",2S);A.U("P",1d);c.3y(T,13())};m 1N(){$(R).U("P",2h).U("1x",1N);27(A.r(B));23(1b(a),1a(b),1b(a),1a(b));9(!(J 4t $.N)){c.2g(T,13());c.2f(T,13())}};m 2A(2i){9(2i.3z!=1||B.2y(":4s")){C Y}1f();2k=a=1z(2i);2j=b=1y(2i);$(R).P(2h).1x(1N);C Y};m 2B(){22(Y)};m 2x(){1F=11;25(c=$.2c({1S:"4r",26:11,20:"1q",2D:11,1W:10,3w:m(){},3y:m(){},2g:m(){},2f:m(){}},c));A.r(B).q({3b:""});9(c.2F){1Q=11;1f();1V();A.r(B).1r().2E(c.1P||0)}3x(m(){c.3w(T,13())},0)};18 2R=m(16){18 k=c.1T,d,t,2N=16.4q;d=!1L(k.2P)&&(16.2e||16.3t.2e)?k.2P:!1L(k.2a)&&16.3u?k.2a:!1L(k.2b)&&16.3v?k.2b:!1L(k.2Q)?k.2Q:10;9(k.2Q=="19"||(k.2b=="19"&&16.3v)||(k.2a=="19"&&16.3u)||(k.2P=="19"&&(16.2e||16.3t.2e))){2O(2N){15 37:d=-d;15 39:t=D(a,j);a=F(a,j);j=D(t+d,a);1w();1u;15 38:d=-d;15 40:t=D(b,g);b=F(b,g);g=D(t+d,b);1w(11);1u;3s:C}1U()}X{a=F(a,j);b=F(b,g);2O(2N){15 37:1v(D(a-d,G),b);1u;15 38:1v(a,D(b-d,l));1u;15 39:1v(a+F(d,Q-1b(j)),b);1u;15 40:1v(a,b+F(d,M-1a(g)));1u;3s:C}}C Y};m 1R(3r,2M){3p(18 2d 4p 2M){9(c[2d]!==1Y){3r.q(2M[2d],c[2d])}}};m 25(K){9(K.20){(1l=$(K.20)).2G(A.r(B))}$.2c(c,K);1f();9(K.2L!=3q){E.1o();E=$([]);i=K.2L?K.2L=="4o"?4:8:0;3g(i--){E=E.r(V())}E.29(c.1S+"-4n").q({1p:"1H",36:0,1I:12+1||1});9(!4m(E.q("H"))>=0){E.H(5).L(5)}9(o=c.2K){E.q({2K:o,2H:"3m"})}1R(E,{3n:"2J-28",3l:"2I-28",3o:"1e"})}1t=c.4l/Q||1;1s=c.4k/M||1;9(K.a!=3q){23(K.a,K.b,K.j,K.g);K.2F=!K.1r}9(K.1T){c.1T=$.2c({2b:1,2a:"19"},K.1T)}B.29(c.1S+"-4j");1k.29(c.1S+"-4i");3p(i=0;i++<4;){$(I[i-1]).29(c.1S+"-2J"+i)}1R(1k,{4h:"2I-28",4g:"1e"});1R(I,{3o:"1e",2K:"2J-H"});1R(B,{4f:"2I-28",4e:"1e"});9(o=c.3n){$(I[0]).q({2H:"3m",3k:o})}9(o=c.3l){$(I[1]).q({2H:"4d",3k:o})}A.2G(1k.r(I).r(1K)).2G(E);9(1j){9(o=(B.q("3j")||"").3i(/1e=(\\d+)/)){B.q("1e",o[1]/1Z)}9(o=(I.q("3j")||"").3i(/1e=(\\d+)/)){I.q("1e",o[1]/1Z)}}9(K.1r){27(A.r(B))}X{9(K.2F&&1F){1Q=11;A.r(B).2E(c.1P||0);22()}}14=(d=(c.4c||"").4b(/:/))[0]/d[1];O.r(B).U("1O",2A);9(c.1E||c.1D===Y){A.U("P",1d).U("1O",2C);$(3h).U("19",2B)}X{9(c.1D||c.1E===Y){9(c.2D||c.26){A.P(1d).1O(2C)}$(3h).19(2B)}9(!c.4a){O.r(B).1O(2A)}}c.1D=c.1E=1Y};J.1o=m(){25({1E:11});A.r(B).1o()};J.49=m(){C c};J.33=25;J.48=13;J.47=23;J.46=1N;J.45=22;18 1j=(/44 ([\\w.]+)/i.43(1M)||[])[1],3c=/42/i.1c(1M),3d=/41/i.1c(1M)&&!/3Z/i.1c(1M);$p=O;3g($p.3f){12=D(12,!1L($p.q("z-3e"))?$p.q("z-3e"):12);9($p.q("1p")=="21"){1J="21"}$p=$p.20(":3Y(1q)")}12=c.1I||12;9(1j){O.3X("3W","3V")}$.N.2z=1j||3d?"3U":"3T";9(3c){1K=V().q({H:"1Z%",L:"1Z%",1p:"1H",1I:12+2||2})}A.r(B).q({3b:"3a",1p:1J,3S:"3a",1I:12||"0"});A.q({1I:12+2||2});1k.r(I).q({1p:"1H",36:0});T.35||T.3R=="35"||!O.2y("3Q")?2x():O.1G("3P",2x);9(!1F&&1j&&1j>=7){T.34=T.34}};$.2w.N=m(Z){Z=Z||{};J.3O(m(){9($(J).1C("N")){9(Z.1o){$(J).1C("N").1o();$(J).3N("N")}X{$(J).1C("N").33(Z)}}X{9(!Z.1o){9(Z.1D===1Y&&Z.1E===1Y){Z.1D=11}$(J).1C("N",3M $.N(J,Z))}}});9(Z.3L){C $(J).1C("N")}C J}})(3K);', 62, 304, '|||||||||if|x1|y1|_7|||_23|y2|||x2||top|function||||css|add|||_4|left|||||_a|_d|return|_2|_e|_3|_10|width|_c|this|_55|height|_13|imgAreaSelect|_8|mousemove|_12|document|_1c|_6|unbind|_5|_1|else|false|_58||true|_16|_2c|_21|case|_50|_11|var|resize|_29|_28|test|_3a|opacity|_30|_15|sy|sx|_35|_b|_14|_27|_26|remove|position|body|hide|_1b|_1a|break|_45|_42|mouseup|evY|evX|_1e|_1d|data|enable|disable|_9|one|absolute|zIndex|_17|_f|isNaN|ua|_4a|mousedown|fadeSpeed|_22|_51|classPrefix|keys|_31|_32|resizeMargin|_40|undefined|100|parent|fixed|_36|_2e||_4f|movable|_38|color|addClass|ctrl|shift|extend|_54|altKey|onSelectEnd|onSelectChange|_49|_4c|_19|_18|_3e|_48|_20|_1f|_25|outerWidth|scrollTop|scrollLeft|offset|_24|Math|fn|_4e|is|keyPress|_4b|_4d|_3f|resizable|fadeIn|show|append|borderStyle|background|border|borderWidth|handles|_53|key|switch|alt|arrows|_34|_3c|_41|_44|cursor|_3b|_39|innerWidth|onKeyPress|outerHeight|_2f|_2d|setOptions|src|complete|fontSize||||hidden|visibility|_56|_57|index|length|while|window|match|filter|borderColor|borderColor2|solid|borderColor1|borderOpacity|for|null|_52|default|originalEvent|ctrlKey|shiftKey|onInit|setTimeout|onSelectStart|which|_47|_46|_43|_37|margin|_33|slice|innerHeight|_2b|_2a|jQuery|instance|new|removeData|each|load|img|readyState|overflow|keypress|keydown|on|unselectable|attr|not|chrome||webkit|opera|exec|msie|update|cancelSelection|setSelection|getSelection|getOptions|persistent|split|aspectRatio|dashed|outerOpacity|outerColor|selectionOpacity|selectionColor|selection|outer|imageHeight|imageWidth|parseInt|handle|corners|in|keyCode|imgareaselect|animated|instanceof|visible|preventDefault|autoHide|_3d|toggle|move|mouseout|fadeOut|auto|relative|getBoundingClientRect|jquery|maxHeight|maxWidth|minHeight|minWidth|pageY|pageX|userAgent|navigator|documentElement|div|round|min|max|abs'.split('|')));
$(document).ready(function () {
  $('.mm-panels.scrollable.scrollable-inverse.scrollable-vertical').css('scrollbar-width', 'none');
  $('.mm-panels.scrollable.scrollable-inverse.scrollable-vertical').removeClass('scrollable scrollable-inverse scrollable-vertical');
  $(".mm-panels").css('scrollbar-width', 'none');
  $('.init-operation-container').on('click', '.redirect-to-accounts', function (e) {
    e.preventDefault();
    var url_data = $(this).attr('data-url-value');
    redirectToAccounts(url_data);
  });
  $('.redirect-to-accounts').on('click', function (e) {
    e.preventDefault();
    var url_data = $(this).attr('data-url-value');
    redirectToAccounts(url_data);
  });
  var newRegisterStepAux;
  window.onresize = changeNewRegisterLayoutOnWindowResize;
  $('.new-register-open-modal-btn').on('click', function () {
    $('.new-register-navbar-open-modal-container').fadeOut('slow');
    setStepContainer();
    $('.new-register-overlay').fadeIn();
  });
  $('.close-modal').on('click', function () {
    $('.new-register-overlay').fadeOut(400, function () {
      changeNewRegisterLayoutOnWindowResize();
    });
  });
  $('#new-register-steps-actions').on('click', '.close-modal', function () {
    if (getNewRegisterStep() == '4') {
      $('#new-register-steps-container').fadeOut(400, function () {
        changeNewRegisterLayoutOnWindowResize();
      });
      $('#new-register-firt-page').fadeIn();
    } else {
      $('.new-register-overlay').fadeOut(400, function () {
        changeNewRegisterLayoutOnWindowResize();
      });
    }
  });
  $('.extra-informations-user').on('click', function () {
    $('#new-register-firt-page').hide();
    $('.modal-top-btn').hide();
    setStepButton(getNewRegisterStep());
    $('#new-register-steps-container').show();
  });
  $('#new-register-step-container input[type=text]').on('input', function () {
    setStepButton(getNewRegisterStep());

    if ($(this).val()) {
      setNewRegisterSavedItem($(this).attr('id'), $(this).val());
    } else {
      removeNewRegisterSavedItem($(this).attr('id'));
    }
  });
  $('#new-register-step-container input[type=checkbox]').change(function () {
    setStepButton(getNewRegisterStep());
  });
  $('.step-1-option').on('click', function () {
    if ($(this).hasClass('option-selected')) {
      $(this).removeClass('option-selected');
      $(this).attr('data-step-1-selected', '0');
      removeNewRegisterSavedItem($(this).attr('id'));
    } else {
      $(this).addClass('option-selected');
      $(this).attr('data-step-1-selected', '1');
      setNewRegisterSavedItem($(this).attr('id'), 'true');
    }

    setStepButton(getNewRegisterStep());
  });
  $(".step-2-checkbox-option input[type='checkbox']").on('click', function () {
    if ($(this).is(":checked")) {
      setNewRegisterSavedItem($(this).attr('id'), 'true');
    } else {
      removeNewRegisterSavedItem($(this).attr('id'));
    }
  });
  $("input[name='step-2-other-ecommerce-check']").on('change', function () {
    step2CheckboxOnChange($(this), $("input[name='step-2-other-ecommerce']"));
  });
  $("input[name='step-2-know-cloudfox-check']").on('change', function () {
    step2CheckboxOnChange($(this), $("input[name='step-2-know-cloudfox']"));
  });
  $("input[name='step-2-other-ecommerce']").on('input', function () {
    if (!$(this).val()) {
      removeNewRegisterSavedItem($(this).attr('id'));
    } else {
      setNewRegisterSavedItem($(this).attr('id'), $(this).val());
    }
  });
  $("input[name='step-2-know-cloudfox']").on('input', function () {
    if (!$(this).val()) {
      removeNewRegisterSavedItem($(this).attr('id'));
    } else {
      setNewRegisterSavedItem($(this).attr('id'), $(this).val());
    }
  });
  $("input[name='step-3-sales-site-check']").change(function () {
    var input = $("input[name='step-3-sales-site']");

    if ($(this).is(":checked")) {
      input.val('');
      input.attr('disabled', true);
      input.removeClass('input-invalid input-valid');
      setNewRegisterSavedItem($(this).attr('id'), 'true');
      removeNewRegisterSavedItem(input.attr('id'));
    } else {
      input.removeAttr('disabled');
      input.addClass('input-invalid');
      removeNewRegisterSavedItem($(this).attr('id'));
    }
  });
  $("input[name='step-3-gateway-check']").change(function () {
    var input = $("input[name='step-3-gateway']");

    if ($(this).is(":checked")) {
      input.val('');
      input.attr('disabled', true);
      input.removeClass('input-invalid input-valid');
      setNewRegisterSavedItem($(this).attr('id'), 'true');
      removeNewRegisterSavedItem(input.attr('id'));
    } else {
      input.removeAttr('disabled');
      input.addClass('input-invalid');
      removeNewRegisterSavedItem($(this).attr('id'));
    }
  });
  $('.new-register-input-validation').on('blur input', function () {
    if (!$(this).val()) {
      $(this).removeClass('input-valid');
      $(this).addClass('input-invalid');
    } else {
      $(this).removeClass('input-invalid');
      $(this).addClass('input-valid');
    }
  });
  $('#new-register-previous-step').on('click', function () {
    var step = parseInt(getNewRegisterStep());

    if (step === 1) {
      $('#new-register-firt-page').show();
      $('.modal-top-btn').show();
      $('#new-register-steps-container').hide();
      return;
    }

    $('#new-register-step-' + step + '-container').removeClass('d-flex flex-column');
    step--;
    setNewRegisterStep(step.toString());
    changeProgressBar(step, 'prev');
    setStepButton(step);
    $('#new-register-step-' + step + '-container').addClass('d-flex flex-column');
  });
  $('#new-register-next-step').on('click', function () {
    var lastStep = parseInt(getNewRegisterStep());
    var step = lastStep + 1;

    if (step === 4) {
      saveNewRegisterData();
      return;
    }

    setNewRegisterStep(step.toString());
    $('#new-register-step-' + lastStep + '-container').removeClass('d-flex flex-column');
    changeProgressBar(step, 'next');
    setStepButton(step);
    $('#new-register-step-' + step + '-container').addClass('d-flex flex-column');
  });
  var monthRevenueInput = document.getElementById('new-register-range');

  if (monthRevenueInput) {
    monthRevenueInput.style.backgroundSize = (monthRevenueInput.value - monthRevenueInput.min) * 100 / (monthRevenueInput.max - monthRevenueInput.min) + '% 100%';
  }

  function handleInputRangeChange(e) {
    setInputRangeOnInput(e.target);
  }

  if (monthRevenueInput) {
    monthRevenueInput.addEventListener('input', handleInputRangeChange);
  }

  loadNewRegisterSavedData();
});

function redirectToAccounts(url_data) {
  $.ajax({
    method: 'GET',
    url: '/send-authenticated',
    headers: {
      'Authorization': $('meta[name="access-token"]').attr('content'),
      'Accept': 'application/json'
    },
    error: function error(response) {
      errorAjaxResponse(response);
    },
    success: function success(response) {
      var url = response.url;

      if (url_data) {
        url = url + url_data;
      }

      window.location.href = url;
    }
  });
}

function stringToMoney(string) {
  var currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'BRL';
  var value = parseInt(string, 10);
  return value.toLocaleString('pt-br', {
    style: 'currency',
    currency: currency
  });
}

function scrollCustom(div) {
  var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var scroll = 0;
  var scrollDiv = 0;
  var valuePadding = 0;
  var heightAdjust = 0;
  $(div).css('padding-right', '12px');
  $(div).append('<div class="scrollbox"></div>');
  $(div).append('<div class="scrollbox-bar"></div>');
  $(div).on('wheel', function (event) {
    if (event.originalEvent.deltaY !== 0) {
      if (padding == true) {
        valuePadding = 40;
      }

      if (type == 'modal-body') {
        heightAdjust = 20;
      }

      var heightDivScroll = $(div).height() + valuePadding;
      var heightDivScrollTotal = $(div).children(":first").height() + valuePadding;
      var heightCalculateScroll = (heightDivScroll - 60) / 20 * 2;
      var heightCalculateTotal = (heightDivScrollTotal - heightDivScroll) / 20 * 2;

      if (event.originalEvent.deltaY < 0) {
        // wheeled up
        if (scroll > heightCalculateScroll) {
          scroll -= heightCalculateScroll;
          scrollDiv -= heightCalculateTotal;
        } else if (scroll == heightCalculateScroll || scroll > 0) {
          scroll = 0;
          scrollDiv = 0;
        }
      } else {
        // wheeled down
        var sumScroll = scroll + heightCalculateScroll;

        if (sumScroll <= heightDivScroll - 60) {
          scroll += heightCalculateScroll;
          scrollDiv += heightCalculateTotal;
        } else {
          scroll = heightDivScroll - 60;
          scrollDiv = heightDivScrollTotal - heightDivScroll;
        }
      }

      $(div).find('.scrollbox-bar').css('top', scroll + 'px');
      $(div).children(":first").css('margin-top', '-' + scrollDiv + 'px');
    }
  });
}

function scrollCustomX(div) {
  var addScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var changePosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if ($(div).find('.scrollbox').length == 0 && $(div).find('.scrollbox-bar').length == 0) {
    $(div).css('padding-bottom', '12px');
    $(div).append('<div class="scrollbox"></div>');
    $(div).append('<div class="scrollbox-bar"></div>');
  }

  if ($(div).find('.scrollbox').length > 0 && $(div).find('.scrollbox-bar').length > 0) {
    var scroll = changePosition ? $(div).find('.scrollbox-bar').css('left').replace('px', '') : 0;
    var scrollDiv = changePosition ? $(div).children(":first").css('margin-left').replace('px', '') : 0;
  }

  $(div).on('wheel', function (event) {
    if (event.originalEvent.deltaY !== 0) {
      var widthDivScroll = $(div).width();
      var widthDivScrollTotal = $(div).children(":first").width() - 12;
      var widthtCalculateScroll = (widthDivScroll - 60) / 20 * 2;
      var widthCalculateTotal = (widthDivScrollTotal - widthDivScroll) / 20 * 2;

      if (event.originalEvent.deltaY < 0) {
        // wheeled left
        if (scroll > widthtCalculateScroll) {
          scroll -= widthtCalculateScroll;
          scrollDiv -= widthCalculateTotal;
        } else if (scroll == widthtCalculateScroll || scroll > 0) {
          scroll = 0;
          scrollDiv = 0;
        }
      } else {
        // wheeled right
        var sumScroll = scroll + widthtCalculateScroll;

        if (sumScroll <= widthDivScroll - 60) {
          scroll += widthtCalculateScroll;
          scrollDiv += widthCalculateTotal;
        } else {
          scroll = widthDivScroll - 60;
          scrollDiv = widthDivScrollTotal - widthDivScroll;
        }
      }

      $(div).find('.scrollbox-bar').css('left', scroll + 'px');
      $(div).children(":first").css('margin-left', '-' + scrollDiv + 'px');
    }
  });
}

function alertCustom(type, message) {
  swal({
    position: 'bottom',
    type: type,
    toast: 'true',
    title: message,
    showConfirmButton: false,
    timer: 6000
  });
}

$(document).ajaxStart(function (event, jqXHR, ajaxOptions, data) {
  $("#loader").addClass("loader").fadeIn('slow');
  $("#loaderCard").addClass("loader").fadeIn('slow');
});
$(document).ajaxError(function (event, jqXHR, ajaxOptions, data) {
  $("#loader").removeClass('loader').fadeOut('slow');
  $("#loaderCard").removeClass('loader').fadeOut('slow');
});
$(document).ajaxSuccess(function (event, jqXHR, ajaxOptions, data) {
  $(".loaderCard").removeClass('loaderCard').fadeOut('slow');
});
$(".table").addClass('table-striped');

function loading(elementId, loaderClass) {
  if (loaderClass == '') {
    $(elementId).html('');
    $(elementId).append('<div class="loading"></div>');
  } else if (loaderClass == '#loaderCard') {
    $(elementId).append('<a class="loaderCard"></a>');
  }
}

function loadingOnScreen() {
  $('#loadingOnScreen').append("<div class=\"sirius-loading\">\n            <img style=\"height: 125px; width: 125px\" src=\"/build/global/img/logos/2021/svg/icon-sirius.svg\"\n                 class=\"img-responsive\"/>\n        </div>").fadeIn();
  $('body').css('overflow-y', 'hidden');
}

function loadingOnChart(target) {
  $(target).fadeIn().append("<div style=\"z-index: 100; border-radius: 16px; position: absolute;\" class=\"sirius-loading\">\n            <img style=\"height: 125px; width: 125px;\" src=\"/build/global/img/logos/2021/svg/icon-sirius.svg\"\n                 class=\"img-responsive\"/>\n        </div>");
}

function loadingOnAccountsHealth(target) {
  $(target).fadeIn().append("<div style=\"z-index: 100; border-radius: 16px; position: absolute;\" class=\"sirius-loading d-flex justify-content-center align-items-center align-self-center\">\n            <img style=\"height: 125px; width: 125px; top: auto;\" src=\"/build/global/img/logos/2021/svg/icon-sirius.svg\"\n                 class=\"img-responsive\"/>\n        </div>");
}

function loadingOnChartRemove(target) {
  $(target).fadeOut(function () {
    $(target).html('');
  });
}

function loadingOnAccountsHealthRemove(target) {
  //$(target).fadeOut(function () {
  //    $(target).html('');
  //});
  $(target).remove();
}

function loadOnAnyEllipsis(target) {
  var remove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  //cleanup
  target = $(target);
  $('.loader-any-container-ellipsis').fadeOut();
  target.parent().find('.loader-any-container-ellipsis').remove();

  if (!remove) {
    //create elements
    var container = $('<div class="loader-any-container-ellipsis"></div>');
    var loader = $('<span class="ellipsis-anim"><span>.</span><span>.</span><span>.</span></span>'); //apply styles or use default

    options.styles = options.styles ? options.styles : {};
    options.styles.container = options.styles.container ? options.styles.container : {};
    options.styles.container.minWidth = options.styles.container.minWidth ? options.styles.container.minWidth : $(target).css('width');
    options.styles.container.minHeight = options.styles.container.minHeight ? options.styles.container.minHeight : $(window.top).height() * 0.7; //70% of visible window area

    container.css(options.styles.container);

    if (options.styles.loader) {
      loader.css(options.styles.loader);
    } //add loader to container


    container.append(loader); //add loader to screen

    target.hide();

    if (options.insertBefore) {
      container.insertBefore(target.parent().find(options.insertBefore));
    } else {
      target.parent().append(container);
    }
  } else {
    // show target again with fix to Bootstrap tabs
    if (!target.hasClass('tab-pane') || target.hasClass('tab-pane') && target.hasClass('active')) {
      $(target).fadeIn();
    }
  }
}

function heightAnimate(element, height) {
  var curHeight = element.height(); // Get Default Height

  var autoHeight = element.css('height', 'auto').height(); // Get Auto Height

  element.height(curHeight); // Reset to Default Height

  element.stop().animate({
    height: autoHeight
  }, time); // Animate to Auto Height
}

function loadingOnScreenRemove() {
  window.setTimeout(function () {
    $('#loadingOnScreen').fadeOut(function () {
      $(this).html('');
      $('body').css('overflow-y', 'unset');
    });
  }, 2000);
  $('.page-header').fadeIn();
  $('#btn-modal').fadeIn();
}

function loadOnNotification(whereToLoad) {
  $(whereToLoad).html('');
  $(whereToLoad).append("<div class='loading' style='width:346px; height:150px'>" + "<span class='loaderNotification' >" + "</span>" + "</div>");
}

function loadOnModal(whereToLoad) {
  $(whereToLoad).children().hide('fast');
  $('#modal-title').html('Carregando...');
  $(whereToLoad).append("<div id='loaderModal' class='loadinModal'><div class='loaderModal'></div></div>");
  $('#loadingOnScreen').append("<div class='blockScreen'></div>");
}

function loadModalPlaceholderLoading(modal, whereToLoad, htmlLoad) {
  if (whereToLoad) {
    $(modal).find(whereToLoad).children().fadeOut('fast');
    $(modal).find(whereToLoad).append(htmlLoad);
  } else {
    $(modal).find('.modal-title').html('Carregando...');
    $(modal).find('.modal-body').children().fadeOut('fast');
    $(modal).find('.modal-footer').fadeOut('fast');
    $(modal).find('.modal-body').append(htmlLoad);
  }
}

function loadOnModalNewLayout(modal, whereToLoad) {
  $(modal).find('.modal-body').removeClass('show');

  if (whereToLoad) {
    $(modal).find(whereToLoad).children().fadeOut('fast');
    $(modal).find(whereToLoad).append("<div id='loaderModal' class='loadingModal' style='height: 80px; position: relative;'><div class='loaderModal' style='position: absolute;'></div></div>");
  } else {
    $(modal).find('.modal-title').html('Carregando...');
    $(modal).find('.modal-body').children().fadeOut('fast');
    $(modal).find('.modal-footer').fadeOut('fast');
    $(modal).find('.modal-body').append("<div id='loaderModal' class='loadingModal' style='height: 80px; position: relative;'><div class='loaderModal' style='position: absolute;'></div></div>");
  }

  $(modal).modal('show');
}

function loadOnModalRemove(modal) {
  $(modal).find('.modal-body').addClass('show');
  $(modal).find('.ph-item').fadeOut(3000, function () {
    this.remove();
  });
  $(modal).find('.modal-body').children().fadeIn(3000);
  $(modal).find('.modal-footer').fadeIn(3000);
}

function loadOnTable(whereToLoad, tableReference) {
  $(whereToLoad).html('');
  $(tableReference).removeClass('table-striped');
  $(whereToLoad).append("<tr id='loaderLine'>" + "<td colspan='12' align='center' class='loadingTable' style='height:100px'>" + "<a id='loader' class='loaderTable'></a>" + "</td>" + "</tr>");
}

function loadOnAny(target) {
  var remove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  //cleanup
  target = $(target);
  target.parent().find('.loader-any-container').remove();

  if (!remove) {
    //create elements
    var container = $('<div class="loader-any-container"></div>');
    var loader = $('<span class="loader-any"></span>'); //apply styles or use default

    options.styles = options.styles ? options.styles : {};
    options.styles.container = options.styles.container ? options.styles.container : {};
    options.styles.container.minWidth = options.styles.container.minWidth ? options.styles.container.minWidth : $(target).css('width');
    options.styles.container.minHeight = options.styles.container.minHeight ? options.styles.container.minHeight : $(window.top).height() * 0.7; //70% of visible window area

    container.css(options.styles.container);

    if (options.styles.loader) {
      loader.css(options.styles.loader);
    } //add message load


    if (options.message) {
      container.append("<p class='mb-30'>".concat(options.message, "</p>"));
      container.addClass('d-flex').addClass('flex-column');
    } //add loader to container


    container.append(loader); //add loader to screen

    target.hide();

    if (options.insertBefore) {
      container.insertBefore(target.parent().find(options.insertBefore));
    } else {
      target.parent().append(container);
    }
  } else {
    // show target again with fix to Bootstrap tabs
    if (!target.hasClass('tab-pane') || target.hasClass('tab-pane') && target.hasClass('active')) {
      $(target).fadeIn();
    }
  }
}

function modalClear(modalBody) {
  $(modalBody).html('');
}

function messageSwalSuccess(swalType, swalTitle, swalHtml, swalCloseButton, swalConfirmButton, swalFooter) {
  swal({
    type: swalType,
    title: swalTitle,
    html: swalHtml,
    showCloseButton: swalCloseButton,
    showConfirmButton: swalConfirmButton,
    footer: swalFooter
  });
}

$(document).ajaxComplete(function (jqXHR, textStatus) {
  switch (textStatus.status) {
    case 200:
      break;

    case 401:
      window.location.href = "/";
      break;

    case 404:
      break;

    case 500:
      break;

    case 413:
      alertCustom('error', 'O tamanho do arquivo é maior que o limite máximo.');
      break;

    case 422:
      break;

    case 419:
      window.location.href = "/";
      break;
  }
});
$('.mm-panels.scrollable.scrollable-inverse.scrollable-vertical.is-enabled').attr('overflow', 'hidden');

function pagination(response, model, callback) {
  console.log('here');
  var paginationContainer = "#pagination-" + model;
  $(paginationContainer).html("");
  var currentPage = response.meta.current_page;
  var lastPage = response.meta.last_page;

  if (lastPage === 1) {
    return false;
  }

  var first_page = "<button class='btn nav-btn first_page'>1</button>";
  $(paginationContainer).append(first_page);

  if (currentPage === 1) {
    $(paginationContainer + ' .first_page').attr('disabled', true).addClass('nav-btn').addClass('active');
  }

  $(paginationContainer + ' .first_page').on("click", function () {
    console.log($(this).html() + ' -1111');
    callback('?page=1');
  });

  for (var x = 3; x > 0; x--) {
    if (currentPage - x <= 1) {
      continue;
    }

    $(paginationContainer).append("<button class='btn nav-btn page_".concat(currentPage - x, "'>").concat(currentPage - x, "</button>"));
    $(paginationContainer + " .page_" + (currentPage - x)).on("click", function () {
      console.log($(this).html() + ' 00000');
      callback('?page=' + $(this).html());
    });
  }

  if (currentPage !== 1 && currentPage !== lastPage) {
    var current_page = "<button class='btn nav-btn active current_page'>".concat(currentPage, "</button>");
    $(paginationContainer).append(current_page);
    $(paginationContainer + " .current_page").attr('disabled', true).addClass('nav-btn').addClass('active');
  }

  for (var _x = 1; _x < 4; _x++) {
    if (currentPage + _x >= lastPage) {
      continue;
    }

    $(paginationContainer).append("<button class='btn nav-btn page_".concat(currentPage + _x, "'>").concat(currentPage + _x, "</button>"));
    $(paginationContainer + " .page_" + (currentPage + _x)).on("click", function () {
      console.log($(this).html() + ' 1111');
      callback('?page=' + $(this).html());
    });
  }

  if (lastPage !== 1) {
    var last_page = "<button class='btn nav-btn last_page'>".concat(lastPage, "</button>");
    $(paginationContainer).append(last_page);

    if (currentPage === lastPage) {
      $(paginationContainer + ' .last_page').attr('disabled', true).addClass('nav-btn').addClass('active');
    }

    $(paginationContainer + ' .last_page').on("click", function () {
      console.log($(this).html() + ' 2222');
      callback('?page=' + lastPage);
    });
  }

  $('table').addClass('table-striped');
}

function copyToClipboard(elem) {
  // create hidden text element, if it doesn't already exist
  var targetId = "_hiddenCopyText_";
  var isInput = elem.tagName === "INPUT" || elem.tagName === "TEXTAREA";
  var origSelectionStart, origSelectionEnd;
  console.log(elem.tagName);

  if (isInput) {
    // can just use the original source element for the selection and copy
    target = elem;
    origSelectionStart = elem.selectionStart;
    origSelectionEnd = elem.selectionEnd;
  } else {
    // must use a temporary form element for the selection and copy
    target = document.getElementById(targetId);

    if (!target) {
      var target = document.createElement("textarea");
      target.style.position = "absolute";
      target.style.left = "-9999px";
      target.style.top = "0";
      target.id = targetId;
      document.body.appendChild(target);
    }

    target.textContent = elem.textContent;
  } // select the content


  var currentFocus = document.activeElement;
  target.focus();
  target.setSelectionRange(0, target.value.length); // copy the selection

  var succeed;

  try {
    succeed = document.execCommand("copy");
  } catch (e) {
    succeed = false;
  } // restore original focus


  if (currentFocus && typeof currentFocus.focus === "function") {
    currentFocus.focus();
  }

  if (isInput) {
    // restore prior selection
    elem.setSelectionRange(origSelectionStart, origSelectionEnd);
  } else {
    // clear temporary content
    target.textContent = "";
  }

  console.log(target);
  return succeed;
}

function errorAjaxResponse(response) {
  if (response.responseJSON) {
    var errors = response.responseJSON.errors ? response.responseJSON.errors : {};
    errors = Object.values(errors).join('\n');

    if (response.status === 422 || response.status === 404 || response.status === 403 && !isEmpty(errors)) {
      alertCustom('error', errors);
    } else if (response.status === 401) {
      // Não esta autenticado
      window.location.href = window.location.origin + '/';
      alertCustom('error', errors);
    } else {
      alertCustom('error', response.responseJSON.message);
    }
  } // else {
  //     alertCustom('error', 'Erro ao executar esta ação!');
  // }

}

function extractIdFromPathName() {
  var urlParams = window.location.pathname.split('/');

  if (urlParams.length >= 2 && urlParams[urlParams.length - 1] == 'edit') {
    return urlParams[urlParams.length - 2];
  } else if (urlParams.length > 0) {
    return urlParams[urlParams.length - 1];
  } else {
    return '';
  }
}

function isEmptyValue(value) {
  return value.length !== 0;
}

function isEmpty(obj) {
  return Object.keys(obj ? obj : {}).length === 0;
}

function companyIsApproved(company) {
  return company.company_is_approved ? true : false;
}

function defaultSelectItemsFunction(item) {
  return {
    value: item.id_code,
    text: item.name
  };
}

function downloadFile(response, request) {
  var type = request.getResponseHeader("Content-Type"); // Get file name

  var contentDisposition = request.getResponseHeader("Content-Disposition");
  var fileName = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
  fileName = fileName ? fileName[0].replace("filename=", "") : '';
  var a = document.createElement("a");
  a.style.display = "none";
  document.body.appendChild(a);
  a.href = window.URL.createObjectURL(new Blob([response], {
    type: type
  }));
  a.setAttribute("download", fileName);
  a.click();
  window.URL.revokeObjectURL(a.href);
  document.body.removeChild(a);
}

$(document).on('click', 'a[data-copy_text],a[data-copy_id]', function (event, i) {
  event.preventDefault();
  var inputId = $(this).data('copy_id') || '#copyText';
  var copyText = inputId === '#copyText' ? $(this).data('copy_text') || '' : $(inputId).val() || '';

  if (copyText === '') {
    return false;
  }

  if (document.getElementById("copyText") === null) {
    var input = document.createElement("input");
    input.type = "text";
    input.id = "copyText";
    input.value = copyText;
    document.getElementsByTagName("body")[0].appendChild(input);
  } else {
    document.getElementById("copyText").value = copyText;
  }

  document.getElementById("copyText").select();
  document.execCommand("copy");
  setTimeout(function () {
    $('#copyText').remove();
  }, 1000);
  alert("Link " + $(inputId).val() + " copiado com Sucesso!");
});
/* TOP ALERT */

$('.top-alert-close').on('click', function () {
  $('#document-pending').fadeOut();
});
/* END - TOP ALERT */

/* Document Pending Alert */

sessionStorage.removeItem('documentsPending');

function verifyDocumentPending() {
  $.ajax({
    method: 'GET',
    url: '/api/core/verify-account/' + $('meta[name="user-id"]').attr('content'),
    headers: {
      'Authorization': $('meta[name="access-token"]').attr('content'),
      'Accept': 'application/json'
    },
    error: function error(response) {
      errorAjaxResponse(response);
    },
    success: function success(response) {
      if (response.data.account.type === 'collaborator') {
        return;
      }

      if (response.data.account.status !== 'approved') {
        var verifyAccount = localStorage.getItem('verifyAccount');

        if (verifyAccount == null) {
          $('.new-register-page-open-modal-container').fadeOut();
          $('.new-register-navbar-open-modal-container').fadeOut();
          setStepContainer();
          $('.new-register-overlay').fadeIn();
        } else {
          changeNewRegisterLayoutOnWindowResize();
        }

        localStorage.setItem('verifyAccount', JSON.stringify(response.data));

        if (!response.data.user.informations) {
          $('.extra-informations-user').show();
        } else {
          $('.extra-informations-user').hide();
        }

        var card_company_status = '';
        var card_company_icon = '';
        var card_company_title = '';
        var card_company_description = '';
        var card_company_button = '';
        var card_company_link = response.data.company.link;

        if (response.data.company.status == null) {
          card_company_status = 'redirect-to-accounts';
          card_company_icon = '/build/global/img/icon-company.svg';
          card_company_title = 'Cadastre sua empresa';
          card_company_description = 'Na Cloudfox você pode ter uma ou mais empresas.';
          card_company_button = '';
        } else {
          if (response.data.company.status == 'pending') {
            card_company_status = 'status-info';
            card_company_icon = '/build/global/img/icon-analysing.svg';
            card_company_title = 'Você cadastrou sua empresa, mas não recebemos nenhum documento';
            card_company_description = 'Você só poderá começar a sua operação depois de enviar e aprovar os documentos da sua empresa.';
            card_company_button = '<button class="btn btn-default redirect-to-accounts" data-url-value="' + card_company_link + '">Enviar documentos</button>';
          } else if (response.data.company.status == 'analyzing') {
            card_company_status = 'status-warning redirect-to-accounts';
            card_company_icon = '/build/global/img/icon-analysing.svg';
            card_company_title = 'Estamos analisando seus documentos da sua empresa';
            card_company_description = 'Esse processo de revisão leva um tempinho. Mas em breve retornaremos.';

            if (response.data.company.address_document !== 'pending' && response.data.company.contract_document !== 'pending') {
              card_company_button = '';
            } else {
              card_company_button = '<button class="btn btn-default redirect-to-accounts" data-url-value="' + card_company_link + '">Enviar documentos</button>';
            }
          } else if (response.data.company.status == 'refused') {
            card_company_status = 'status-error';
            card_company_icon = '/build/global/img/icon-error.svg';
            card_company_title = 'Tivemos problemas em verificar sua empresa';
            card_company_description = 'Há um problema com seus documentos.';
            card_company_button = '<button class="btn btn-default redirect-to-accounts" data-url-value="' + card_company_link + '">Reenviar documentos</button>';
          } else if (response.data.company.status == 'approved') {
            card_company_status = 'status-check redirect-to-accounts';
            card_company_icon = '/build/global/img/icon-check.svg';
            card_company_title = 'A documentação da sua empresa foi recebida e aprovada.';
            card_company_description = 'Se você já aprovou seus documentos pessoais, agora é só vender!';
            card_company_button = '';
          }
        }

        $('.company-status').html("\n                    <div class=\"card ".concat(card_company_status, "\" data-url-value=\"").concat(card_company_link, "\">\n                        <div class=\"d-flex\">\n                            <div>\n                                <div class=\"icon d-flex align-items-center\">\n                                    <img src=\"").concat(card_company_icon, "\" alt=\"\">\n                                </div>\n                            </div>\n                            <div class=\"content\">\n                                <h1 class=\"title\">").concat(card_company_title, "</h1>\n                                <p class=\"description\">").concat(card_company_description, "</p>\n                                ").concat(card_company_button, "\n                            </div>\n                        </div>\n                    </div>\n                "));
        var card_user_status = '';
        var card_user_icon = '';
        var card_user_title = '';
        var card_user_description = '';
        var card_user_button = '';
        var card_user_link = response.data.user.link;

        if (response.data.user.status == 'pending') {
          card_user_status = 'redirect-to-accounts';
          card_user_icon = '/build/global/img/icon-docs.svg';
          card_user_title = 'Envie sua documentação pessoal';
          card_user_description = 'Precisamos do seu documento oficial com foto e um comprovante de residência.';
          card_user_button = '';
        } else if (response.data.user.status == 'analyzing') {
          card_user_status = 'status-warning redirect-to-accounts';
          card_user_icon = '/build/global/img/icon-analysing.svg';
          card_user_title = 'Estamos analisando seus documentos';
          card_user_description = 'Esse processo de revisão leva um tempinho. Mas em breve retornaremos.';

          if (response.data.user.address_document !== 'pending' && response.data.user.personal_document !== 'pending') {
            card_user_button = '';
          } else {
            card_user_button = '<button class="btn btn-default redirect-to-accounts" data-url-value="' + card_user_link + '">Enviar documentos</button>';
          }
        } else if (response.data.user.status == 'refused') {
          card_user_status = 'status-error';
          card_user_icon = '/build/global/img/icon-error.svg';
          card_user_title = 'Tivemos um problema com o seu documento';
          card_user_description = 'Um ou mais documentos foram reprovados após a análise.';
          card_user_button = '<button class="btn btn-default redirect-to-accounts" data-url-value="' + card_user_link + '">Regularizar documentos</button>';
        } else if (response.data.user.status == 'approved') {
          card_user_status = 'status-check redirect-to-accounts';
          card_user_icon = '/build/global/img/icon-check.svg';
          card_user_title = 'Sua documentação foi recebida e aprovada';
          card_user_description = 'Se você já aprovou uma empresa com a gente, agora é só vender!';
          card_user_button = '';
        }

        $('.user-status').html("\n                    <div class=\"card ".concat(card_user_status, "\" data-url-value=\"").concat(card_user_link, "\">\n                        <div class=\"d-flex\">\n                            <div>\n                                <div class=\"icon d-flex align-items-center\">\n                                    <img src=\"").concat(card_user_icon, "\" alt=\"\">\n                                </div>\n                            </div>\n                            <div class=\"content\">\n                                <h1 class=\"title\">").concat(card_user_title, "</h1>\n                                <p class=\"description\">").concat(card_user_description, "</p>\n                                ").concat(card_user_button, "\n                            </div>\n                        </div>\n                    </div>\n                "));
      } else {
        $('.new-register-navbar-open-modal-container').remove();

        var _verifyAccount = JSON.parse(localStorage.getItem('verifyAccount'));

        if (_verifyAccount && _verifyAccount.account.status !== 'approved') {
          localStorage.setItem('verifyAccount', JSON.stringify(response.data));
        }
      }
    }
  });
}

function setNewRegisterSavedItem(item, value) {
  if (!localStorage.getItem('newRegisterData')) {
    localStorage.setItem('newRegisterData', JSON.stringify({}));
  }

  if (item) {
    var obj = JSON.parse(localStorage.getItem('newRegisterData'));
    obj[item] = value;
    localStorage.setItem('newRegisterData', JSON.stringify(obj));
  }
}

function removeNewRegisterSavedItem(item) {
  if (localStorage.getItem('newRegisterData')) {
    var obj = JSON.parse(localStorage.getItem('newRegisterData'));
    delete obj[item];
    localStorage.setItem('newRegisterData', JSON.stringify(obj));
  }
}

function setNewRegisterStep(step) {
  try {
    localStorage.setItem('new-register-step', step);
  } catch (e) {
    newRegisterStepAux = step;
  }
}

function getNewRegisterStep() {
  var value;

  try {
    value = localStorage.getItem('new-register-step');
  } catch (e) {
    value = newRegisterStepAux;
  }

  return value;
}

function changeProgressBar(step) {
  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'next';

  switch (parseInt(step)) {
    case 1:
      $(".new-register-step[data-step*='1']").addClass('step-active');
      $('#new-register-step-progress-bar-1').css('transition-delay', action !== 'next' ? '1.5s' : '');
      $('#new-register-step-progress-bar-1').css('width', '50%');
      $(".new-register-step[data-step*='2']").css('transition-delay', action !== 'next' ? '1s' : '');
      $(".new-register-step[data-step*='2']").removeClass('step-active');
      $('#new-register-step-progress-bar-2').css('transition-delay', action !== 'next' ? '0.5s' : '');
      $('#new-register-step-progress-bar-2').css('width', '0');
      break;

    case 2:
      $(".new-register-step[data-step*='1']").addClass('step-active');
      $('#new-register-step-progress-bar-1').css('transition-delay', '');
      $('#new-register-step-progress-bar-1').css('width', '100%');
      $(".new-register-step[data-step*='2']").css('transition-delay', action === 'next' ? '0.5s' : '1.5s');
      $(".new-register-step[data-step*='2']").addClass('step-active');
      $('#new-register-step-progress-bar-2').css('transition-delay', action === 'next' ? '1s' : '1s');
      $('#new-register-step-progress-bar-2').css('width', '50%');
      $(".new-register-step[data-step*='3']").css('transition-delay', action !== 'next' ? '0.5s' : '');
      $(".new-register-step[data-step*='3']").removeClass('step-active');
      break;

    case 3:
    case 4:
      $(".new-register-step[data-step*='1']").addClass('step-active');
      $('#new-register-step-progress-bar-1').css('width', '100%');
      $(".new-register-step[data-step*='2']").addClass('step-active');
      $('#new-register-step-progress-bar-2').css('transition-delay', action === 'next' ? '0.5s' : '1s');
      $('#new-register-step-progress-bar-2').css('width', '100%');
      $(".new-register-step[data-step*='3']").css('transition-delay', action === 'next' ? '1s' : '0.5s');
      $(".new-register-step[data-step*='3']").addClass('step-active');
      break;
  }
}

function changeNewRegisterLayoutOnWindowResize() {
  var userNameText = $('.new-register-overlay-title strong').text();

  if (window.innerWidth <= 370) {
    $('.new-register-overlay-title strong').css({
      'display': 'block',
      'padding-top': '8px'
    });
  } else if (window.innerWidth > 370 && window.innerWidth <= 470) {
    $('.new-register-overlay-title strong').css({
      'display': 'block',
      'padding-top': '0px'
    });

    if (userNameText.length > 10) {
      $('.new-register-overlay-title strong').text(userNameText.substring(0, 9) + '...');
    }
  } else if (window.innerWidth > 470 && window.innerWidth <= 665) {
    $('.new-register-overlay-title strong').css({
      'display': 'unset',
      'padding-top': '0px'
    });

    if (userNameText.length > 14) {
      $('.new-register-overlay-title strong').text(userNameText.substring(0, 13) + '...');
    }
  } else if (window.innerWidth > 665) {
    $('.new-register-overlay-title strong').css({
      'display': 'unset',
      'padding-top': '0px'
    });

    if (userNameText.length > 20) {
      $('.new-register-overlay-title strong').text(userNameText.substring(0, 19) + '...');
    }
  }

  if ($('.new-register-overlay').css('display') !== 'none') {
    return;
  }

  if (window.innerWidth >= 847) {
    $('.new-register-page-open-modal-container').fadeOut();
    $('.new-register-navbar-open-modal-container').fadeIn();
  } else {
    $('.new-register-navbar-open-modal-container').fadeOut();
    $('.new-register-page-open-modal-container').fadeIn();
  }
}

function validateStep(step) {
  var isValid = false;

  switch (parseInt(step)) {
    case 1:
      isValid = $("div[data-step-1-selected*='1']").length > 0;
      break;

    case 2:
      isValid = true;
      break;

    case 3:
      isValid = ($("input[name='step-3-sales-site-check']").is(':checked') || $("input[name='step-3-sales-site']").val()) && ($("input[name='step-3-gateway-check']").is(':checked') || $("input[name='step-3-gateway']").val());
      break;

    default:
      isValid = true;
      break;
  }

  return isValid;
}

function setStepContainer() {
  if (!getNewRegisterStep()) {
    setNewRegisterStep('1');
  }

  var step = getNewRegisterStep();
  changeProgressBar(step);
  setStepButton(step);
  $('#new-register-step-' + step + '-container').addClass('d-flex flex-column');
}

function setStepButton(step) {
  var btn = $('#new-register-next-step');

  if (!validateStep(step)) {
    btn.attr('disabled', true);
  } else {
    btn.removeAttr('disabled');
  }

  btn.attr('data-step-btn', step);
}

function step2CheckboxOnChange(checkbox, inputText) {
  if (checkbox.is(":checked")) {
    inputText.removeAttr('disabled');
  } else {
    inputText.val('');
    inputText.attr('disabled', true);
    removeNewRegisterSavedItem(inputText.attr('id'));
  }
}

function setInputRangeOnInput(target) {
  var minVal = target.min;
  var maxVal = target.max;
  var val = target.value;
  target.style.backgroundSize = (val - minVal) * 100 / (maxVal - minVal) + '% 100%';
  val = val * 1000;
  $('#new-register-month-revenue span:first-child').text((val === 5000 ? 'Até ' : val === 1000000 ? 'Acima de ' : '') + 'R$');
  $('#new-register-month-revenue span:last-child').text(val.toLocaleString('pt-BR', {
    maximumFractionDigits: 2,
    minimumFractionDigits: 2
  }));
  setNewRegisterSavedItem(target.id, target.value);
}

function loadNewRegisterSavedData() {
  if (localStorage.getItem('newRegisterData')) {
    var obj = JSON.parse(localStorage.getItem('newRegisterData'));

    for (var prop in obj) {
      var _element = $('#' + prop);

      if (_element.prop('nodeName') === 'DIV') {
        _element.addClass('option-selected').attr('data-step-1-selected', 1);
      }

      if (_element.prop('nodeName') === 'INPUT' && _element.attr('type') === 'checkbox') {
        _element.prop("checked", true);

        _element.trigger('change');
      }

      if (_element.prop('nodeName') === 'INPUT' && _element.attr('type') === 'text') {
        _element.val(obj[prop]);
      }

      if (_element.prop('nodeName') === 'INPUT' && _element.attr('type') === 'range') {
        _element.val(obj[prop]);

        setInputRangeOnInput(document.getElementById('new-register-range'));
      }
    }
  }
}

function saveNewRegisterData() {
  var newRegisterData = {
    document: JSON.parse(localStorage.getItem('verifyAccount')).user.document,
    email: JSON.parse(localStorage.getItem('verifyAccount')).user.email,
    niche: JSON.stringify({
      others: $("div[data-step-1-value=others]").attr('data-step-1-selected'),
      classes: $("div[data-step-1-value=classes]").attr('data-step-1-selected'),
      subscriptions: $("div[data-step-1-value=subscriptions]").attr('data-step-1-selected'),
      digitalProduct: $("div[data-step-1-value=digital-product]").attr('data-step-1-selected'),
      physicalProduct: $("div[data-step-1-value=physical-product]").attr('data-step-1-selected'),
      dropshippingImport: $("div[data-step-1-value=dropshipping-import]").attr('data-step-1-selected')
    }),
    ecommerce: JSON.stringify({
      wix: +$('#wix').is(':checked'),
      shopify: +$('#shopify').is(':checked'),
      pageLand: 0,
      wooCommerce: +$('#woo-commerce').is(':checked'),
      otherEcommerce: +$('#other-ecommerce').is(':checked'),
      integratedStore: +$('#integrated-store').is(':checked'),
      otherEcommerceName: $('#other-ecommerce-name').val()
    }),
    cloudfox_referer: JSON.stringify({
      ad: +$('#cloudfox-referer-ad').is(':checked'),
      email: 0,
      other: +$('#cloudfox-referer-other').is(':checked'),
      otherName: $('#know-cloudfox').val(),
      youtube: +$('#cloudfox-referer-youtube').is(':checked'),
      facebook: +$('#cloudfox-referer-facebook').is(':checked'),
      linkedin: +$('#cloudfox-referer-linkedin').is(':checked'),
      instagram: 0,
      recomendation: 0
    }),
    website_url: $('#step-3-sales-site').val(),
    gateway: $('#step-3-gateway').val(),
    monthly_income: $('#new-register-range').val() * 1000
  };
  loadingOnScreen();
  $.ajax({
    method: "POST",
    url: "/api/user-informations",
    data: newRegisterData,
    dataType: "json",
    headers: {
      'Authorization': $('meta[name="access-token"]').attr('content'),
      'Accept': 'application/json'
    },
    error: function error(response) {
      loadingOnScreenRemove();
      alertCustom('error', response.responseJSON.message);
    },
    success: function success(response) {
      verifyDocumentPending();
      setNewRegisterStep('4');
      $('#new-register-step-3-container').removeClass('d-flex flex-column');
      $('#new-register-step-4-container').addClass('d-flex flex-column');
      $('#new-register-steps-actions').removeClass('justify-content-between');
      $('#new-register-steps-actions').addClass('justify-content-center');
      $('.extra-informations-user').hide();
      $('#new-register-steps-actions').html('<button type="button" class="btn new-register-btn close-modal">Fechar</button>');
      localStorage.removeItem('newRegisterData');
      loadingOnScreenRemove();
    }
  });
}
/* End - Document Pending Alert */

/* Cookies */


function setCookie(name, exdays, object) {
  var expires;
  var date;
  var value;
  date = new Date(); // criando cookie com a data atual

  date.setTime(date.getTime() + exdays * 3600 * 1000);
  expires = date.toUTCString();
  value = JSON.stringify(object);
  document.cookie = name + "=" + value + "; expires=" + expires + ";path=/";
}

function getCookie(name) {
  name += "=";
  var decodedCookie = decodeURIComponent(document.cookie);
  var ca = decodedCookie.split(';');

  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];

    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }

    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }

  return "";
}

function deleteCookie(name) {
  setCookie(name, -1);
}
/* Cookies */


$.fn.shake = function () {
  var distance = 5;
  var speed = 50;
  var repeat = 3;
  var animation1 = {
    left: "+=" + distance
  };
  var animation2 = {
    left: "-=" + distance * 2
  };

  for (var i = 0; i < repeat; i++) {
    $(this).animate(animation1, speed).animate(animation2, speed).animate(animation1, speed);
  }
}; // sirius select


function initSiriusSelect(target) {
  var $target = $(target);
  var classes = Array.from(target[0].classList).filter(function (e) {
    return e !== 'sirius-select';
  }).join(' ');
  $target.removeClass(classes);
  $target.wrap("<div class=\"sirius-select-container ".concat(classes, "\"></div>"));
  $target.hide();
  $target.after("<div class=\"sirius-select-options\"></div>");
  $target.after("<div class=\"sirius-select-text\"></div>");
  renderSiriusSelect($target);
}

function renderSiriusSelect(target) {
  var $target = $(target);
  var $wrapper = $target.parent();
  var $text = $wrapper.find('.sirius-select-text');
  var $options = $wrapper.find('.sirius-select-options');
  $options.html('');
  $target.children('option').each(function () {
    var option = $(this);
    var attributes = Object.values(this.attributes).reduce(function (text, attr) {
      if (!['id', 'value', 'data-value', 'selected', 'disabled'].includes(attr.name)) {
        if (attr.value) return text + " ".concat(attr.name, "=\"").concat(attr.value, "\"");
        return text + " ".concat(attr.name);
      }

      return text;
    }, '');
    var disabled = option.is(':disabled') ? "class=\"disabled\"" : '';
    $options.append("<div data-value=\"".concat(option.val(), "\" ").concat(attributes, " ").concat(disabled, ">").concat(option.text(), "</div>"));
  });
  $text.text($target.children('option:selected').eq(0).text());
}

$.fn.siriusSelect = function () {
  initSiriusSelect(this);
}; // END sirius select

/**
 * Menu implementation
 */


$(document).ready(function () {
  var bodyEl = $('body');
  var menuBarToggle = $('[data-toggle="menubar"]');
  var toggle = $('[data-toggle="menubar"].nav-link');
  menuBarToggle.off().on('click', function () {
    bodyEl.toggleClass('site-menubar-unfold site-menubar-fold site-menubar-open site-menubar-hide');
    menuBarToggle.toggleClass('hided');

    if (toggle.hasClass('hided')) {
      $('#logoIconSirius').fadeOut().addClass('d-none');
      $('#logoSirius').fadeIn().removeClass('d-none');
    } else {
      $('#logoIconSirius').fadeIn().removeClass('d-none');
      $('#logoSirius').fadeOut().addClass('d-none');
    }
  });
  var siteMenuItems = $('.site-menu-item.has-sub');
  var siteMenuBar = $('.site-menubar');
  var menuTimeout;
  siteMenuBar.on('mouseenter', function () {
    bodyEl.addClass('site-menubar-hover');
    $('#logoIconSirius').fadeOut().addClass('d-none');
    $('#logoSirius').fadeIn().removeClass('d-none');
  }).on('mouseleave', function () {
    menuTimeout = setTimeout(function () {
      bodyEl.removeClass('site-menubar-hover');

      if (!toggle.hasClass('hided')) {
        $('#logoIconSirius').fadeIn().removeClass('d-none');
        $('#logoSirius').fadeOut().addClass('d-none');
      }
    }, 500);
  }).find('*').on('mouseenter', function (event) {
    clearTimeout(menuTimeout);
    bodyEl.addClass('site-menubar-hover');
  });
  siteMenuItems.on('click', function () {
    siteMenuItems.not($(this)).removeClass('active');
    $(this).toggleClass('active');
  });
  var links = $('.site-menubar .site-menu-item a');
  $.each(links, function (key, va) {
    var current = document.URL;

    if (va.href == document.URL || (current.match(va.href) || []).length >= 1) {
      $(this).addClass('menu-active');
      $(this).parents('.site-menu-item.has-sub').find('> a').addClass('menu-active');
    }
  }); // Disable page scroll when a modal is open

  $(document).on('shown.bs.modal', function (e) {
    document.querySelector('body').style.overflowY = 'hidden';
  });
  $(document).on('hidden.bs.modal', function (e) {
    document.querySelector('body').style.overflowY = 'unset';
  }); // sirius select

  $('.sirius-select').each(function () {
    $(this).siriusSelect();
  });
  $(document).on('DOMSubtreeModified propertychange change', '.sirius-select-container select', function () {
    renderSiriusSelect(this);
  });
  $('.sirius-select-text').each(function () {
    var $target = $(this);
    var $wrapper = $target.parent();
    var $options = $wrapper.find('.sirius-select-options');
    $target.on('click', function () {
      $target.hasClass('active') ? $target.removeClass('active') : $target.addClass('active');
      $target.hasClass('active') ? $options.fadeIn() : $options.fadeOut();
    });
  });
  $(document).on('click', '.sirius-select-options div', function () {
    var $target = $(this);

    if (!$target.hasClass('disabled')) {
      var $wrapper = $target.parents('.sirius-select-container');
      $wrapper.find('select').val($target.data('value')).trigger('change');
      $wrapper.find('.sirius-select-text').removeClass('active').text($target.text());
      $target.parent().fadeOut();
    }
  });
  $(document).on('click', function (e) {
    var target = $(e.target);

    if (!target.parents('.sirius-select-container').length) {
      $('.sirius-select-container .sirius-select-text').removeClass('active');
      $('.sirius-select-container .sirius-select-options').fadeOut();
    }
  }); // END sirius select
  // vertical scroll

  $('.vertical-scroll').on({
    'mousewheel wheel': function mousewheelWheel(e) {
      e.preventDefault();
      this.scrollLeft += e.originalEvent.deltaY;
    },
    'mousedown': function mousedown(e) {
      $(this).addClass('scrolling').data('x', e.clientX).data('left', this.scrollLeft);
    },
    'mouseup mouseleave': function mouseupMouseleave(e) {
      $(this).removeClass('scrolling').data('x', 0).data('left', 0);
    }
  });
  $(document).on('mousemove', '.vertical-scroll.scrolling', function (e) {
    var dx = e.clientX - $(this).data('x');
    this.scrollLeft = $(this).data('left') - dx;
  }); // END vertical scroll
});

function verifyAccountFrozen() {
  if ($('#accountStatus').val() == 'account frozen') {
    return true;
  }

  return false;
}

function onlyNumbers(string) {
  if (string == undefined) {
    return 0;
  }

  return string.replace(/\D/g, '');
}

function removeMoneyCurrency(string) {
  if (string.charAt(0) == '-') {
    return '-' + string.substring(4);
  }

  return string.substring(3);
}
/**
 * jQuery asScrollbar v0.5.4
 * https://github.com/amazingSurge/jquery-asScrollbar
 *
 * Copyright (c) amazingSurge
 * Released under the LGPL-3.0 license
 */


(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['jquery'], factory);
  } else if (typeof exports !== "undefined") {
    factory(require('jquery'));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.jQuery);
    global.jqueryAsScrollbarEs = mod.exports;
  }
})(this, function (_jquery) {
  'use strict';

  var _jquery2 = _interopRequireDefault(_jquery);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }

  var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return _typeof2(obj);
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : _typeof2(obj);
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var DEFAULTS = {
    namespace: 'asScrollbar',
    skin: null,
    handleSelector: null,
    handleTemplate: '<div class="{{handle}}"></div>',
    barClass: null,
    handleClass: null,
    disabledClass: 'is-disabled',
    draggingClass: 'is-dragging',
    hoveringClass: 'is-hovering',
    direction: 'vertical',
    barLength: null,
    handleLength: null,
    minHandleLength: 30,
    maxHandleLength: null,
    mouseDrag: true,
    touchDrag: true,
    pointerDrag: true,
    clickMove: true,
    clickMoveStep: 0.3,
    // 0 - 1
    mousewheel: true,
    mousewheelSpeed: 50,
    keyboard: true,
    useCssTransforms3d: true,
    useCssTransforms: true,
    useCssTransitions: true,
    duration: '500',
    easing: 'ease' // linear, ease-in, ease-out, ease-in-out

  };

  var easingBezier = function easingBezier(mX1, mY1, mX2, mY2) {
    'use strict';

    var a = function a(aA1, aA2) {
      return 1.0 - 3.0 * aA2 + 3.0 * aA1;
    };

    var b = function b(aA1, aA2) {
      return 3.0 * aA2 - 6.0 * aA1;
    };

    var c = function c(aA1) {
      return 3.0 * aA1;
    }; // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.


    var calcBezier = function calcBezier(aT, aA1, aA2) {
      return ((a(aA1, aA2) * aT + b(aA1, aA2)) * aT + c(aA1)) * aT;
    }; // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.


    var getSlope = function getSlope(aT, aA1, aA2) {
      return 3.0 * a(aA1, aA2) * aT * aT + 2.0 * b(aA1, aA2) * aT + c(aA1);
    };

    var getTForX = function getTForX(aX) {
      // Newton raphson iteration
      var aGuessT = aX;

      for (var i = 0; i < 4; ++i) {
        var currentSlope = getSlope(aGuessT, mX1, mX2);

        if (currentSlope === 0.0) {
          return aGuessT;
        }

        var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
        aGuessT -= currentX / currentSlope;
      }

      return aGuessT;
    };

    if (mX1 === mY1 && mX2 === mY2) {
      return {
        css: 'linear',
        fn: function fn(aX) {
          return aX;
        }
      };
    }

    return {
      css: 'cubic-bezier(' + mX1 + ',' + mY1 + ',' + mX2 + ',' + mY2 + ')',
      fn: function fn(aX) {
        return calcBezier(getTForX(aX), mY1, mY2);
      }
    };
  };

  var EASING = {
    ease: easingBezier(0.25, 0.1, 0.25, 1.0),
    linear: easingBezier(0.00, 0.0, 1.00, 1.0),
    'ease-in': easingBezier(0.42, 0.0, 1.00, 1.0),
    'ease-out': easingBezier(0.00, 0.0, 0.58, 1.0),
    'ease-in-out': easingBezier(0.42, 0.0, 0.58, 1.0)
  };

  if (!Date.now) {
    Date.now = function () {
      return new Date().getTime();
    };
  }

  var vendors = ['webkit', 'moz'];

  for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
    var vp = vendors[i];
    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
  }

  if (/iP(ad|hone|od).*OS (6|7|8)/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
    (function () {
      var lastTime = 0;

      window.requestAnimationFrame = function (callback) {
        var now = getTime();
        var timePlus = 16;
        var nextTime = Math.max(lastTime + timePlus, now);
        return setTimeout(function () {
          callback(lastTime = nextTime);
        }, nextTime - now);
      };

      window.cancelAnimationFrame = clearTimeout;
    })();
  }

  function isPercentage(n) {
    return typeof n === 'string' && n.indexOf('%') !== -1;
  }

  function convertPercentageToFloat(n) {
    return parseFloat(n.slice(0, -1) / 100, 10);
  }

  function convertMatrixToArray(value) {
    if (value && value.substr(0, 6) === 'matrix') {
      return value.replace(/^.*\((.*)\)$/g, '$1').replace(/px/g, '').split(/, +/);
    }

    return false;
  }

  function getTime() {
    if (typeof window.performance !== 'undefined' && window.performance.now) {
      return window.performance.now();
    }

    return Date.now();
  }
  /**
   * Css features detect
   **/


  var support = {};

  (function (support) {
    /**
     * Borrowed from Owl carousel
     **/
    'use strict';

    var events = {
      transition: {
        end: {
          WebkitTransition: 'webkitTransitionEnd',
          MozTransition: 'transitionend',
          OTransition: 'oTransitionEnd',
          transition: 'transitionend'
        }
      },
      animation: {
        end: {
          WebkitAnimation: 'webkitAnimationEnd',
          MozAnimation: 'animationend',
          OAnimation: 'oAnimationEnd',
          animation: 'animationend'
        }
      }
    },
        prefixes = ['webkit', 'Moz', 'O', 'ms'],
        style = (0, _jquery2["default"])('<support>').get(0).style,
        tests = {
      csstransforms: function csstransforms() {
        return Boolean(test('transform'));
      },
      csstransforms3d: function csstransforms3d() {
        return Boolean(test('perspective'));
      },
      csstransitions: function csstransitions() {
        return Boolean(test('transition'));
      },
      cssanimations: function cssanimations() {
        return Boolean(test('animation'));
      }
    };

    var test = function test(property, prefixed) {
      var result = false,
          upper = property.charAt(0).toUpperCase() + property.slice(1);

      if (style[property] !== undefined) {
        result = property;
      }

      if (!result) {
        _jquery2["default"].each(prefixes, function (i, prefix) {
          if (style[prefix + upper] !== undefined) {
            result = '-' + prefix.toLowerCase() + '-' + upper;
            return false;
          }

          return true;
        });
      }

      if (prefixed) {
        return result;
      }

      if (result) {
        return true;
      }

      return false;
    };

    var prefixed = function prefixed(property) {
      return test(property, true);
    };

    if (tests.csstransitions()) {
      /*eslint no-new-wrappers: "off"*/
      support.transition = new String(prefixed('transition'));
      support.transition.end = events.transition.end[support.transition];
    }

    if (tests.cssanimations()) {
      /*eslint no-new-wrappers: "off"*/
      support.animation = new String(prefixed('animation'));
      support.animation.end = events.animation.end[support.animation];
    }

    if (tests.csstransforms()) {
      /*eslint no-new-wrappers: "off"*/
      support.transform = new String(prefixed('transform'));
      support.transform3d = tests.csstransforms3d();
    }

    if ('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch) {
      support.touch = true;
    } else {
      support.touch = false;
    }

    if (window.PointerEvent || window.MSPointerEvent) {
      support.pointer = true;
    } else {
      support.pointer = false;
    }

    support.prefixPointerEvent = function (pointerEvent) {
      return window.MSPointerEvent ? 'MSPointer' + pointerEvent.charAt(9).toUpperCase() + pointerEvent.substr(10) : pointerEvent;
    };
  })(support);

  var NAMESPACE$1 = 'asScrollbar';
  /**
   * Plugin constructor
   **/

  var asScrollbar = function () {
    function asScrollbar(bar) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      _classCallCheck(this, asScrollbar);

      this.$bar = (0, _jquery2["default"])(bar);
      options = this.options = _jquery2["default"].extend({}, DEFAULTS, options, this.$bar.data('options') || {});
      bar.direction = this.options.direction;
      this.classes = {
        directionClass: options.namespace + '-' + options.direction,
        barClass: options.barClass ? options.barClass : options.namespace,
        handleClass: options.handleClass ? options.handleClass : options.namespace + '-handle'
      };

      if (this.options.direction === 'vertical') {
        this.attributes = {
          axis: 'Y',
          position: 'top',
          length: 'height',
          clientLength: 'clientHeight'
        };
      } else if (this.options.direction === 'horizontal') {
        this.attributes = {
          axis: 'X',
          position: 'left',
          length: 'width',
          clientLength: 'clientWidth'
        };
      } // Current state information.


      this._states = {}; // Current state information for the drag operation.

      this._drag = {
        time: null,
        pointer: null
      }; // Current timeout

      this._frameId = null; // Current handle position

      this.handlePosition = 0;
      this.easing = EASING[this.options.easing] || EASING.ease;
      this.init();
    }

    _createClass(asScrollbar, [{
      key: 'init',
      value: function init() {
        var options = this.options;
        this.$handle = this.$bar.find(this.options.handleSelector);

        if (this.$handle.length === 0) {
          this.$handle = (0, _jquery2["default"])(options.handleTemplate.replace(/\{\{handle\}\}/g, this.classes.handleClass)).appendTo(this.$bar);
        } else {
          this.$handle.addClass(this.classes.handleClass);
        }

        this.$bar.addClass(this.classes.barClass).addClass(this.classes.directionClass).attr('draggable', false);

        if (options.skin) {
          this.$bar.addClass(options.skin);
        }

        if (options.barLength !== null) {
          this.setBarLength(options.barLength);
        }

        if (options.handleLength !== null) {
          this.setHandleLength(options.handleLength);
        }

        this.updateLength();
        this.bindEvents();
        this.trigger('ready');
      }
    }, {
      key: 'trigger',
      value: function trigger(eventType) {
        for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }

        var data = [this].concat(params); // event

        this.$bar.trigger(NAMESPACE$1 + '::' + eventType, data); // callback

        eventType = eventType.replace(/\b\w+\b/g, function (word) {
          return word.substring(0, 1).toUpperCase() + word.substring(1);
        });
        var onFunction = 'on' + eventType;

        if (typeof this.options[onFunction] === 'function') {
          this.options[onFunction].apply(this, params);
        }
      }
    }, {
      key: 'is',
      value: function is(state) {
        return this._states[state] && this._states[state] > 0;
      }
    }, {
      key: 'enter',
      value: function enter(state) {
        if (this._states[state] === undefined) {
          this._states[state] = 0;
        }

        this._states[state]++;
      }
    }, {
      key: 'leave',
      value: function leave(state) {
        this._states[state]--;
      }
    }, {
      key: 'eventName',
      value: function eventName(events) {
        if (typeof events !== 'string' || events === '') {
          return '.' + this.options.namespace;
        }

        events = events.split(' ');
        var length = events.length;

        for (var _i = 0; _i < length; _i++) {
          events[_i] = events[_i] + '.' + this.options.namespace;
        }

        return events.join(' ');
      }
    }, {
      key: 'bindEvents',
      value: function bindEvents() {
        var _this = this;

        if (this.options.mouseDrag) {
          this.$handle.on(this.eventName('mousedown'), _jquery2["default"].proxy(this.onDragStart, this));
          this.$handle.on(this.eventName('dragstart selectstart'), function () {
            return false;
          });
        }

        if (this.options.touchDrag && support.touch) {
          this.$handle.on(this.eventName('touchstart'), _jquery2["default"].proxy(this.onDragStart, this));
          this.$handle.on(this.eventName('touchcancel'), _jquery2["default"].proxy(this.onDragEnd, this));
        }

        if (this.options.pointerDrag && support.pointer) {
          this.$handle.on(this.eventName(support.prefixPointerEvent('pointerdown')), _jquery2["default"].proxy(this.onDragStart, this));
          this.$handle.on(this.eventName(support.prefixPointerEvent('pointercancel')), _jquery2["default"].proxy(this.onDragEnd, this));
        }

        if (this.options.clickMove) {
          this.$bar.on(this.eventName('mousedown'), _jquery2["default"].proxy(this.onClick, this));
        }

        if (this.options.mousewheel) {
          this.$bar.on('mousewheel', function (e) {
            var delta = void 0;

            if (_this.options.direction === 'vertical') {
              delta = e.deltaFactor * e.deltaY;
            } else if (_this.options.direction === 'horizontal') {
              delta = -1 * e.deltaFactor * e.deltaX;
            }

            var offset = _this.getHandlePosition();

            if (offset <= 0 && delta > 0) {
              return true;
            } else if (offset >= _this.barLength && delta < 0) {
              return true;
            }

            offset -= _this.options.mousewheelSpeed * delta;

            _this.move(offset, true);

            return false;
          });
        }

        this.$bar.on(this.eventName('mouseenter'), function () {
          _this.$bar.addClass(_this.options.hoveringClass);

          _this.enter('hovering');

          _this.trigger('hover');
        });
        this.$bar.on(this.eventName('mouseleave'), function () {
          _this.$bar.removeClass(_this.options.hoveringClass);

          if (!_this.is('hovering')) {
            return;
          }

          _this.leave('hovering');

          _this.trigger('hovered');
        });

        if (this.options.keyboard) {
          (0, _jquery2["default"])(document).on(this.eventName('keydown'), function (e) {
            if (e.isDefaultPrevented && e.isDefaultPrevented()) {
              return;
            }

            if (!_this.is('hovering')) {
              return;
            }

            var activeElement = document.activeElement; // go deeper if element is a webcomponent

            while (activeElement.shadowRoot) {
              activeElement = activeElement.shadowRoot.activeElement;
            }

            if ((0, _jquery2["default"])(activeElement).is(':input,select,option,[contenteditable]')) {
              return;
            }

            var by = 0,
                to = null;
            var down = 40,
                end = 35,
                home = 36,
                left = 37,
                pageDown = 34,
                pageUp = 33,
                right = 39,
                spaceBar = 32,
                up = 38;
            var webkitDown = 63233,
                webkitEnd = 63275,
                webkitHome = 63273,
                webkitLeft = 63234,
                webkitPageDown = 63277,
                webkitPageUp = 63276,
                webkitRight = 63235,
                webkitUp = 63232;

            switch (e.which) {
              case left: // left

              case webkitUp:
                by = -30;
                break;

              case up: // up

              case webkitDown:
                by = -30;
                break;

              case right: // right

              case webkitLeft:
                by = 30;
                break;

              case down: // down

              case webkitRight:
                by = 30;
                break;

              case pageUp: // page up

              case webkitPageUp:
                by = -90;
                break;

              case spaceBar: // space bar

              case pageDown: // page down

              case webkitPageDown:
                by = -90;
                break;

              case end: // end

              case webkitEnd:
                to = '100%';
                break;

              case home: // home

              case webkitHome:
                to = 0;
                break;

              default:
                return;
            }

            if (by || to !== null) {
              if (by) {
                _this.moveBy(by, true);
              } else if (to !== null) {
                _this.moveTo(to, true);
              }

              e.preventDefault();
            }
          });
        }
      }
    }, {
      key: 'onClick',
      value: function onClick(event) {
        var num = 3;

        if (event.which === num) {
          return;
        }

        if (event.target === this.$handle[0]) {
          return;
        }

        this._drag.time = new Date().getTime();
        this._drag.pointer = this.pointer(event);
        var offset = this.$handle.offset();
        var distance = this.distance({
          x: offset.left,
          y: offset.top
        }, this._drag.pointer),
            factor = 1;

        if (distance > 0) {
          distance -= this.handleLength;
        } else {
          distance = Math.abs(distance);
          factor = -1;
        }

        if (distance > this.barLength * this.options.clickMoveStep) {
          distance = this.barLength * this.options.clickMoveStep;
        }

        this.moveBy(factor * distance, true);
      }
    }, {
      key: 'onDragStart',
      value: function onDragStart(event) {
        var _this2 = this;

        var num = 3;

        if (event.which === num) {
          return;
        } // this.$bar.toggleClass(this.options.draggingClass, event.type === 'mousedown');


        this.$bar.addClass(this.options.draggingClass);
        this._drag.time = new Date().getTime();
        this._drag.pointer = this.pointer(event);

        var callback = function callback() {
          _this2.enter('dragging');

          _this2.trigger('drag');
        };

        if (this.options.mouseDrag) {
          (0, _jquery2["default"])(document).on(this.eventName('mouseup'), _jquery2["default"].proxy(this.onDragEnd, this));
          (0, _jquery2["default"])(document).one(this.eventName('mousemove'), _jquery2["default"].proxy(function () {
            (0, _jquery2["default"])(document).on(_this2.eventName('mousemove'), _jquery2["default"].proxy(_this2.onDragMove, _this2));
            callback();
          }, this));
        }

        if (this.options.touchDrag && support.touch) {
          (0, _jquery2["default"])(document).on(this.eventName('touchend'), _jquery2["default"].proxy(this.onDragEnd, this));
          (0, _jquery2["default"])(document).one(this.eventName('touchmove'), _jquery2["default"].proxy(function () {
            (0, _jquery2["default"])(document).on(_this2.eventName('touchmove'), _jquery2["default"].proxy(_this2.onDragMove, _this2));
            callback();
          }, this));
        }

        if (this.options.pointerDrag && support.pointer) {
          (0, _jquery2["default"])(document).on(this.eventName(support.prefixPointerEvent('pointerup')), _jquery2["default"].proxy(this.onDragEnd, this));
          (0, _jquery2["default"])(document).one(this.eventName(support.prefixPointerEvent('pointermove')), _jquery2["default"].proxy(function () {
            (0, _jquery2["default"])(document).on(_this2.eventName(support.prefixPointerEvent('pointermove')), _jquery2["default"].proxy(_this2.onDragMove, _this2));
            callback();
          }, this));
        }

        (0, _jquery2["default"])(document).on(this.eventName('blur'), _jquery2["default"].proxy(this.onDragEnd, this));
      }
    }, {
      key: 'onDragMove',
      value: function onDragMove(event) {
        var distance = this.distance(this._drag.pointer, this.pointer(event));

        if (!this.is('dragging')) {
          return;
        }

        event.preventDefault();
        this.moveBy(distance, true);
      }
    }, {
      key: 'onDragEnd',
      value: function onDragEnd() {
        (0, _jquery2["default"])(document).off(this.eventName('mousemove mouseup touchmove touchend pointermove pointerup MSPointerMove MSPointerUp blur'));
        this.$bar.removeClass(this.options.draggingClass);
        this.handlePosition = this.getHandlePosition();

        if (!this.is('dragging')) {
          return;
        }

        this.leave('dragging');
        this.trigger('dragged');
      }
    }, {
      key: 'pointer',
      value: function pointer(event) {
        var result = {
          x: null,
          y: null
        };
        event = event.originalEvent || event || window.event;
        event = event.touches && event.touches.length ? event.touches[0] : event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event;

        if (event.pageX) {
          result.x = event.pageX;
          result.y = event.pageY;
        } else {
          result.x = event.clientX;
          result.y = event.clientY;
        }

        return result;
      }
    }, {
      key: 'distance',
      value: function distance(first, second) {
        if (this.options.direction === 'vertical') {
          return second.y - first.y;
        }

        return second.x - first.x;
      }
    }, {
      key: 'setBarLength',
      value: function setBarLength(length, update) {
        if (typeof length !== 'undefined') {
          this.$bar.css(this.attributes.length, length);
        }

        if (update !== false) {
          this.updateLength();
        }
      }
    }, {
      key: 'setHandleLength',
      value: function setHandleLength(length, update) {
        if (typeof length !== 'undefined') {
          if (length < this.options.minHandleLength) {
            length = this.options.minHandleLength;
          } else if (this.options.maxHandleLength && length > this.options.maxHandleLength) {
            length = this.options.maxHandleLength;
          }

          this.$handle.css(this.attributes.length, length);

          if (update !== false) {
            this.updateLength(length);
          }
        }
      }
    }, {
      key: 'updateLength',
      value: function updateLength(length, barLength) {
        if (typeof length !== 'undefined') {
          this.handleLength = length;
        } else {
          this.handleLength = this.getHandleLenght();
        }

        if (typeof barLength !== 'undefined') {
          this.barLength = barLength;
        } else {
          this.barLength = this.getBarLength();
        }
      }
    }, {
      key: 'getBarLength',
      value: function getBarLength() {
        return this.$bar[0][this.attributes.clientLength];
      }
    }, {
      key: 'getHandleLenght',
      value: function getHandleLenght() {
        return this.$handle[0][this.attributes.clientLength];
      }
    }, {
      key: 'getHandlePosition',
      value: function getHandlePosition() {
        var value = void 0;

        if (this.options.useCssTransforms && support.transform) {
          value = convertMatrixToArray(this.$handle.css(support.transform));

          if (!value) {
            return 0;
          }

          if (this.attributes.axis === 'X') {
            value = value[12] || value[4];
          } else {
            value = value[13] || value[5];
          }
        } else {
          value = this.$handle.css(this.attributes.position);
        }

        return parseFloat(value.replace('px', ''));
      }
    }, {
      key: 'makeHandlePositionStyle',
      value: function makeHandlePositionStyle(value) {
        var property = void 0,
            x = '0',
            y = '0';

        if (this.options.useCssTransforms && support.transform) {
          if (this.attributes.axis === 'X') {
            x = value + 'px';
          } else {
            y = value + 'px';
          }

          property = support.transform.toString();

          if (this.options.useCssTransforms3d && support.transform3d) {
            value = 'translate3d(' + x + ',' + y + ',0)';
          } else {
            value = 'translate(' + x + ',' + y + ')';
          }
        } else {
          property = this.attributes.position;
        }

        var temp = {};
        temp[property] = value;
        return temp;
      }
    }, {
      key: 'setHandlePosition',
      value: function setHandlePosition(value) {
        var style = this.makeHandlePositionStyle(value);
        this.$handle.css(style);

        if (!this.is('dragging')) {
          this.handlePosition = parseFloat(value);
        }
      }
    }, {
      key: 'moveTo',
      value: function moveTo(value, trigger, sync) {
        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

        if (type === 'string') {
          if (isPercentage(value)) {
            value = convertPercentageToFloat(value) * (this.barLength - this.handleLength);
          }

          value = parseFloat(value);
          type = 'number';
        }

        if (type !== 'number') {
          return;
        }

        this.move(value, trigger, sync);
      }
    }, {
      key: 'moveBy',
      value: function moveBy(value, trigger, sync) {
        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

        if (type === 'string') {
          if (isPercentage(value)) {
            value = convertPercentageToFloat(value) * (this.barLength - this.handleLength);
          }

          value = parseFloat(value);
          type = 'number';
        }

        if (type !== 'number') {
          return;
        }

        this.move(this.handlePosition + value, trigger, sync);
      }
    }, {
      key: 'move',
      value: function move(value, trigger, sync) {
        if (typeof value !== 'number' || this.is('disabled')) {
          return;
        }

        if (value < 0) {
          value = 0;
        } else if (value + this.handleLength > this.barLength) {
          value = this.barLength - this.handleLength;
        }

        if (!this.is('dragging') && sync !== true) {
          this.doMove(value, this.options.duration, this.options.easing, trigger);
        } else {
          this.setHandlePosition(value);

          if (trigger) {
            this.trigger('change', value / (this.barLength - this.handleLength));
          }
        }
      }
    }, {
      key: 'doMove',
      value: function doMove(value, duration, easing, trigger) {
        var _this3 = this;

        var property = void 0;
        this.enter('moving');
        duration = duration ? duration : this.options.duration;
        easing = easing ? easing : this.options.easing;
        var style = this.makeHandlePositionStyle(value);

        for (property in style) {
          if ({}.hasOwnProperty.call(style, property)) {
            break;
          }
        }

        if (this.options.useCssTransitions && support.transition) {
          this.enter('transition');
          this.prepareTransition(property, duration, easing);
          this.$handle.one(support.transition.end, function () {
            _this3.$handle.css(support.transition, '');

            if (trigger) {
              _this3.trigger('change', value / (_this3.barLength - _this3.handleLength));
            }

            _this3.leave('transition');

            _this3.leave('moving');
          });
          this.setHandlePosition(value);
        } else {
          (function () {
            _this3.enter('animating');

            var startTime = getTime();

            var start = _this3.getHandlePosition();

            var end = value;

            var run = function run(time) {
              var percent = (time - startTime) / _this3.options.duration;

              if (percent > 1) {
                percent = 1;
              }

              percent = _this3.easing.fn(percent);
              var scale = 10;
              var current = parseFloat(start + percent * (end - start), scale);

              _this3.setHandlePosition(current);

              if (trigger) {
                _this3.trigger('change', current / (_this3.barLength - _this3.handleLength));
              }

              if (percent === 1) {
                window.cancelAnimationFrame(_this3._frameId);
                _this3._frameId = null;

                _this3.leave('animating');

                _this3.leave('moving');
              } else {
                _this3._frameId = window.requestAnimationFrame(run);
              }
            };

            _this3._frameId = window.requestAnimationFrame(run);
          })();
        }
      }
    }, {
      key: 'prepareTransition',
      value: function prepareTransition(property, duration, easing, delay) {
        var temp = [];

        if (property) {
          temp.push(property);
        }

        if (duration) {
          if (_jquery2["default"].isNumeric(duration)) {
            duration = duration + 'ms';
          }

          temp.push(duration);
        }

        if (easing) {
          temp.push(easing);
        } else {
          temp.push(this.easing.css);
        }

        if (delay) {
          temp.push(delay);
        }

        this.$handle.css(support.transition, temp.join(' '));
      }
    }, {
      key: 'enable',
      value: function enable() {
        this._states.disabled = 0;
        this.$bar.removeClass(this.options.disabledClass);
        this.trigger('enable');
      }
    }, {
      key: 'disable',
      value: function disable() {
        this._states.disabled = 1;
        this.$bar.addClass(this.options.disabledClass);
        this.trigger('disable');
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$handle.removeClass(this.classes.handleClass);
        this.$bar.removeClass(this.classes.barClass).removeClass(this.classes.directionClass).attr('draggable', null);

        if (this.options.skin) {
          this.$bar.removeClass(this.options.skin);
        }

        this.$bar.off(this.eventName());
        this.$handle.off(this.eventName());
        this.trigger('destroy');
      }
    }], [{
      key: 'registerEasing',
      value: function registerEasing(name) {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        EASING[name] = easingBezier.apply(undefined, args);
      }
    }, {
      key: 'getEasing',
      value: function getEasing(name) {
        return EASING[name];
      }
    }, {
      key: 'setDefaults',
      value: function setDefaults(options) {
        _jquery2["default"].extend(DEFAULTS, _jquery2["default"].isPlainObject(options) && options);
      }
    }]);

    return asScrollbar;
  }();

  var info = {
    version: '0.5.4'
  };
  var NAMESPACE = 'asScrollbar';
  var OtherAsScrollbar = _jquery2["default"].fn.asScrollbar;

  var jQueryAsScrollbar = function jQueryAsScrollbar(options) {
    var _this4 = this;

    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    if (typeof options === 'string') {
      var _ret3 = function () {
        var method = options;

        if (/^_/.test(method)) {
          return {
            v: false
          };
        } else if (/^(get)/.test(method)) {
          var instance = _this4.first().data(NAMESPACE);

          if (instance && typeof instance[method] === 'function') {
            return {
              v: instance[method].apply(instance, args)
            };
          }
        } else {
          return {
            v: _this4.each(function () {
              var instance = _jquery2["default"].data(this, NAMESPACE);

              if (instance && typeof instance[method] === 'function') {
                instance[method].apply(instance, args);
              }
            })
          };
        }
      }();

      if ((typeof _ret3 === 'undefined' ? 'undefined' : _typeof(_ret3)) === "object") return _ret3.v;
    }

    return this.each(function () {
      if (!(0, _jquery2["default"])(this).data(NAMESPACE)) {
        (0, _jquery2["default"])(this).data(NAMESPACE, new asScrollbar(this, options));
      }
    });
  };

  _jquery2["default"].fn.asScrollbar = jQueryAsScrollbar;
  _jquery2["default"].asScrollbar = _jquery2["default"].extend({
    setDefaults: asScrollbar.setDefaults,
    registerEasing: asScrollbar.registerEasing,
    getEasing: asScrollbar.getEasing,
    noConflict: function noConflict() {
      _jquery2["default"].fn.asScrollbar = OtherAsScrollbar;
      return jQueryAsScrollbar;
    }
  }, info);
});
/**
 * jQuery asScrollable v0.4.10
 * https://github.com/amazingSurge/jquery-asScrollable
 *
 * Copyright (c) amazingSurge
 * Released under the LGPL-3.0 license
 */


(function (global, factory) {
  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else if (typeof exports !== 'undefined') {
    factory(require('jquery'));
  } else {
    var mod = {
      exports: {}
    };
    factory(global.jQuery);
    global.jqueryAsScrollableEs = mod.exports;
  }
})(this, function (_jquery) {
  'use strict';

  var _jquery2 = _interopRequireDefault(_jquery);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      "default": obj
    };
  }

  var _typeof = typeof Symbol === 'function' && _typeof2(Symbol.iterator) === 'symbol' ? function (obj) {
    return _typeof2(obj);
  } : function (obj) {
    return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : _typeof2(obj);
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var DEFAULTS = {
    namespace: 'asScrollable',
    skin: null,
    contentSelector: null,
    containerSelector: null,
    enabledClass: 'is-enabled',
    disabledClass: 'is-disabled',
    draggingClass: 'is-dragging',
    hoveringClass: 'is-hovering',
    scrollingClass: 'is-scrolling',
    direction: 'vertical',
    // vertical, horizontal, both, auto
    showOnHover: true,
    showOnBarHover: false,
    duration: 500,
    easing: 'ease-in',
    // linear, ease, ease-in, ease-out, ease-in-out
    responsive: true,
    throttle: 20,
    scrollbar: {}
  };

  function getTime() {
    if (typeof window.performance !== 'undefined' && window.performance.now) {
      return window.performance.now();
    }

    return Date.now();
  }

  function isPercentage(n) {
    return typeof n === 'string' && n.indexOf('%') !== -1;
  }

  function conventToPercentage(n) {
    if (n < 0) {
      n = 0;
    } else if (n > 1) {
      n = 1;
    }

    return parseFloat(n).toFixed(4) * 100 + '%';
  }

  function convertPercentageToFloat(n) {
    return parseFloat(n.slice(0, -1) / 100, 10);
  }

  var isFFLionScrollbar = function () {
    'use strict';

    var isOSXFF = void 0,
        ua = void 0,
        version = void 0;
    ua = window.navigator.userAgent;
    isOSXFF = /(?=.+Mac OS X)(?=.+Firefox)/.test(ua);

    if (!isOSXFF) {
      return false;
    }

    version = /Firefox\/\d{2}\./.exec(ua);

    if (version) {
      version = version[0].replace(/\D+/g, '');
    }

    return isOSXFF && +version > 23;
  }();

  var NAMESPACE$1 = 'asScrollable';
  var instanceId = 0;

  var AsScrollable = function () {
    function AsScrollable(element, options) {
      _classCallCheck(this, AsScrollable);

      this.$element = (0, _jquery2["default"])(element);
      options = this.options = _jquery2["default"].extend({}, DEFAULTS, options || {}, this.$element.data('options') || {});
      this.classes = {
        wrap: options.namespace,
        content: options.namespace + '-content',
        container: options.namespace + '-container',
        bar: options.namespace + '-bar',
        barHide: options.namespace + '-bar-hide',
        skin: options.skin
      };
      this.attributes = {
        vertical: {
          axis: 'Y',
          overflow: 'overflow-y',
          scroll: 'scrollTop',
          scrollLength: 'scrollHeight',
          pageOffset: 'pageYOffset',
          ffPadding: 'padding-right',
          length: 'height',
          clientLength: 'clientHeight',
          offset: 'offsetHeight',
          crossLength: 'width',
          crossClientLength: 'clientWidth',
          crossOffset: 'offsetWidth'
        },
        horizontal: {
          axis: 'X',
          overflow: 'overflow-x',
          scroll: 'scrollLeft',
          scrollLength: 'scrollWidth',
          pageOffset: 'pageXOffset',
          ffPadding: 'padding-bottom',
          length: 'width',
          clientLength: 'clientWidth',
          offset: 'offsetWidth',
          crossLength: 'height',
          crossClientLength: 'clientHeight',
          crossOffset: 'offsetHeight'
        }
      }; // Current state information.

      this._states = {}; // Supported direction

      this.horizontal = null;
      this.vertical = null;
      this.$bar = null; // Current timeout

      this._frameId = null;
      this._timeoutId = null;
      this.instanceId = ++instanceId;
      this.easing = _jquery2["default"].asScrollbar.getEasing(this.options.easing) || _jquery2["default"].asScrollbar.getEasing('ease');
      this.init();
    }

    _createClass(AsScrollable, [{
      key: 'init',
      value: function init() {
        var position = this.$element.css('position');

        if (this.options.containerSelector) {
          this.$container = this.$element.find(this.options.containerSelector);
          this.$wrap = this.$element;

          if (position === 'static') {
            this.$wrap.css('position', 'relative');
          }
        } else {
          this.$container = this.$element.wrap('<div>');
          this.$wrap = this.$container.parent();
          this.$wrap.height(this.$element.height());

          if (position !== 'static') {
            this.$wrap.css('position', position);
          } else {
            this.$wrap.css('position', 'relative');
          }
        }

        if (this.options.contentSelector) {
          this.$content = this.$container.find(this.options.contentSelector);
        } else {
          this.$content = this.$container.wrap('<div>');
          this.$container = this.$content.parent();
        }

        switch (this.options.direction) {
          case 'vertical':
            {
              this.vertical = true;
              break;
            }

          case 'horizontal':
            {
              this.horizontal = true;
              break;
            }

          case 'both':
            {
              this.horizontal = true;
              this.vertical = true;
              break;
            }

          case 'auto':
            {
              var overflowX = this.$element.css('overflow-x'),
                  overflowY = this.$element.css('overflow-y');

              if (overflowX === 'scroll' || overflowX === 'auto') {
                this.horizontal = true;
              }

              if (overflowY === 'scroll' || overflowY === 'auto') {
                this.vertical = true;
              }

              break;
            }

          default:
            {
              break;
            }
        }

        if (!this.vertical && !this.horizontal) {
          return;
        }

        this.$wrap.addClass(this.classes.wrap);
        this.$container.addClass(this.classes.container);
        this.$content.addClass(this.classes.content);

        if (this.options.skin) {
          this.$wrap.addClass(this.classes.skin);
        }

        this.$wrap.addClass(this.options.enabledClass);

        if (this.vertical) {
          this.$wrap.addClass(this.classes.wrap + '-vertical');
          this.initLayout('vertical');
          this.createBar('vertical');
        }

        if (this.horizontal) {
          this.$wrap.addClass(this.classes.wrap + '-horizontal');
          this.initLayout('horizontal');
          this.createBar('horizontal');
        }

        this.bindEvents();
        this.trigger('ready');
      }
    }, {
      key: 'bindEvents',
      value: function bindEvents() {
        var _this = this;

        if (this.options.responsive) {
          (0, _jquery2["default"])(window).on(this.eventNameWithId('orientationchange'), function () {
            _this.update();
          });
          (0, _jquery2["default"])(window).on(this.eventNameWithId('resize'), this.throttle(function () {
            _this.update();
          }, this.options.throttle));
        }

        if (!this.horizontal && !this.vertical) {
          return;
        }

        var that = this;
        this.$wrap.on(this.eventName('mouseenter'), function () {
          that.$wrap.addClass(_this.options.hoveringClass);
          that.enter('hovering');
          that.trigger('hover');
        });
        this.$wrap.on(this.eventName('mouseleave'), function () {
          that.$wrap.removeClass(_this.options.hoveringClass);

          if (!that.is('hovering')) {
            return;
          }

          that.leave('hovering');
          that.trigger('hovered');
        });

        if (this.options.showOnHover) {
          if (this.options.showOnBarHover) {
            this.$bar.on('asScrollbar::hover', function () {
              if (that.horizontal) {
                that.showBar('horizontal');
              }

              if (that.vertical) {
                that.showBar('vertical');
              }
            }).on('asScrollbar::hovered', function () {
              if (that.horizontal) {
                that.hideBar('horizontal');
              }

              if (that.vertical) {
                that.hideBar('vertical');
              }
            });
          } else {
            this.$element.on(NAMESPACE$1 + '::hover', _jquery2["default"].proxy(this.showBar, this));
            this.$element.on(NAMESPACE$1 + '::hovered', _jquery2["default"].proxy(this.hideBar, this));
          }
        }

        this.$container.on(this.eventName('scroll'), function () {
          if (that.horizontal) {
            var oldLeft = that.offsetLeft;
            that.offsetLeft = that.getOffset('horizontal');

            if (oldLeft !== that.offsetLeft) {
              that.trigger('scroll', that.getPercentOffset('horizontal'), 'horizontal');

              if (that.offsetLeft === 0) {
                that.trigger('scrolltop', 'horizontal');
              }

              if (that.offsetLeft === that.getScrollLength('horizontal')) {
                that.trigger('scrollend', 'horizontal');
              }
            }
          }

          if (that.vertical) {
            var oldTop = that.offsetTop;
            that.offsetTop = that.getOffset('vertical');

            if (oldTop !== that.offsetTop) {
              that.trigger('scroll', that.getPercentOffset('vertical'), 'vertical');

              if (that.offsetTop === 0) {
                that.trigger('scrolltop', 'vertical');
              }

              if (that.offsetTop === that.getScrollLength('vertical')) {
                that.trigger('scrollend', 'vertical');
              }
            }
          }
        });
        this.$element.on(NAMESPACE$1 + '::scroll', function (e, api, value, direction) {
          if (!that.is('scrolling')) {
            that.enter('scrolling');
            that.$wrap.addClass(that.options.scrollingClass);
          }

          var bar = api.getBarApi(direction);
          bar.moveTo(conventToPercentage(value), false, true);
          clearTimeout(that._timeoutId);
          that._timeoutId = setTimeout(function () {
            that.$wrap.removeClass(that.options.scrollingClass);
            that.leave('scrolling');
          }, 200);
        });
        this.$bar.on('asScrollbar::change', function (e, api, value) {
          if (typeof e.target.direction === 'string') {
            that.scrollTo(e.target.direction, conventToPercentage(value), false, true);
          }
        });
        this.$bar.on('asScrollbar::drag', function () {
          that.$wrap.addClass(that.options.draggingClass);
        }).on('asScrollbar::dragged', function () {
          that.$wrap.removeClass(that.options.draggingClass);
        });
      }
    }, {
      key: 'unbindEvents',
      value: function unbindEvents() {
        this.$wrap.off(this.eventName());
        this.$element.off(NAMESPACE$1 + '::scroll').off(NAMESPACE$1 + '::hover').off(NAMESPACE$1 + '::hovered');
        this.$container.off(this.eventName());
        (0, _jquery2["default"])(window).off(this.eventNameWithId());
      }
    }, {
      key: 'initLayout',
      value: function initLayout(direction) {
        if (direction === 'vertical') {
          this.$container.css('height', this.$wrap.height());
        }

        var attributes = this.attributes[direction],
            container = this.$container[0]; // this.$container.css(attributes.overflow, 'scroll');

        var parentLength = container.parentNode[attributes.crossClientLength],
            scrollbarWidth = this.getBrowserScrollbarWidth(direction);
        this.$content.css(attributes.crossLength, parentLength + 'px');
        this.$container.css(attributes.crossLength, scrollbarWidth + parentLength + 'px');

        if (scrollbarWidth === 0 && isFFLionScrollbar) {
          this.$container.css(attributes.ffPadding, 16);
        }
      }
    }, {
      key: 'createBar',
      value: function createBar(direction) {
        var options = _jquery2["default"].extend(this.options.scrollbar, {
          namespace: this.classes.bar,
          direction: direction,
          useCssTransitions: false,
          keyboard: false
        });

        var $bar = (0, _jquery2["default"])('<div>');
        $bar.asScrollbar(options);

        if (this.options.showOnHover) {
          $bar.addClass(this.classes.barHide);
        }

        $bar.appendTo(this.$wrap);
        this['$' + direction] = $bar;

        if (this.$bar === null) {
          this.$bar = $bar;
        } else {
          this.$bar = this.$bar.add($bar);
        }

        this.updateBarHandle(direction);
      }
    }, {
      key: 'trigger',
      value: function trigger(eventType) {
        for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }

        var data = [this].concat(params); // event

        this.$element.trigger(NAMESPACE$1 + '::' + eventType, data); // callback

        eventType = eventType.replace(/\b\w+\b/g, function (word) {
          return word.substring(0, 1).toUpperCase() + word.substring(1);
        });
        var onFunction = 'on' + eventType;

        if (typeof this.options[onFunction] === 'function') {
          this.options[onFunction].apply(this, params);
        }
      }
    }, {
      key: 'is',
      value: function is(state) {
        return this._states[state] && this._states[state] > 0;
      }
    }, {
      key: 'enter',
      value: function enter(state) {
        if (this._states[state] === undefined) {
          this._states[state] = 0;
        } // this._states[state]++;


        this._states[state] = 1;
      }
    }, {
      key: 'leave',
      value: function leave(state) {
        // this._states[state]--;
        this._states[state] = -1;
      }
    }, {
      key: 'eventName',
      value: function eventName(events) {
        if (typeof events !== 'string' || events === '') {
          return '.' + this.options.namespace;
        }

        events = events.split(' ');
        var length = events.length;

        for (var i = 0; i < length; i++) {
          events[i] = events[i] + '.' + this.options.namespace;
        }

        return events.join(' ');
      }
    }, {
      key: 'eventNameWithId',
      value: function eventNameWithId(events) {
        if (typeof events !== 'string' || events === '') {
          return '.' + this.options.namespace + '-' + this.instanceId;
        }

        events = events.split(' ');
        var length = events.length;

        for (var i = 0; i < length; i++) {
          events[i] = events[i] + '.' + this.options.namespace + '-' + this.instanceId;
        }

        return events.join(' ');
      }
    }, {
      key: 'throttle',
      value: function throttle(func, wait) {
        var _this2 = this;

        var _now = Date.now || function () {
          return new Date().getTime();
        };

        var timeout = void 0;
        var context = void 0;
        var args = void 0;
        var result = void 0;
        var previous = 0;

        var later = function later() {
          previous = _now();
          timeout = null;
          result = func.apply(context, args);

          if (!timeout) {
            context = args = null;
          }
        };

        return function () {
          for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            params[_key2] = arguments[_key2];
          }
          /*eslint consistent-this: "off"*/


          var now = _now();

          var remaining = wait - (now - previous);
          context = _this2;
          args = params;

          if (remaining <= 0 || remaining > wait) {
            if (timeout) {
              clearTimeout(timeout);
              timeout = null;
            }

            previous = now;
            result = func.apply(context, args);

            if (!timeout) {
              context = args = null;
            }
          } else if (!timeout) {
            timeout = setTimeout(later, remaining);
          }

          return result;
        };
      }
    }, {
      key: 'getBrowserScrollbarWidth',
      value: function getBrowserScrollbarWidth(direction) {
        var attributes = this.attributes[direction],
            outer = void 0,
            outerStyle = void 0;

        if (attributes.scrollbarWidth) {
          return attributes.scrollbarWidth;
        }

        outer = document.createElement('div');
        outerStyle = outer.style;
        outerStyle.position = 'absolute';
        outerStyle.width = '100px';
        outerStyle.height = '100px';
        outerStyle.overflow = 'scroll';
        outerStyle.top = '-9999px';
        document.body.appendChild(outer);
        attributes.scrollbarWidth = outer[attributes.offset] - outer[attributes.clientLength];
        document.body.removeChild(outer);
        return attributes.scrollbarWidth;
      }
    }, {
      key: 'getOffset',
      value: function getOffset(direction) {
        var attributes = this.attributes[direction],
            container = this.$container[0];
        return container[attributes.pageOffset] || container[attributes.scroll];
      }
    }, {
      key: 'getPercentOffset',
      value: function getPercentOffset(direction) {
        return this.getOffset(direction) / this.getScrollLength(direction);
      }
    }, {
      key: 'getContainerLength',
      value: function getContainerLength(direction) {
        return this.$container[0][this.attributes[direction].clientLength];
      }
    }, {
      key: 'getScrollLength',
      value: function getScrollLength(direction) {
        var scrollLength = this.$content[0][this.attributes[direction].scrollLength];
        return scrollLength - this.getContainerLength(direction);
      }
    }, {
      key: 'scrollTo',
      value: function scrollTo(direction, value, trigger, sync) {
        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

        if (type === 'string') {
          if (isPercentage(value)) {
            value = convertPercentageToFloat(value) * this.getScrollLength(direction);
          }

          value = parseFloat(value);
          type = 'number';
        }

        if (type !== 'number') {
          return;
        }

        this.move(direction, value, trigger, sync);
      }
    }, {
      key: 'scrollBy',
      value: function scrollBy(direction, value, trigger, sync) {
        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

        if (type === 'string') {
          if (isPercentage(value)) {
            value = convertPercentageToFloat(value) * this.getScrollLength(direction);
          }

          value = parseFloat(value);
          type = 'number';
        }

        if (type !== 'number') {
          return;
        }

        this.move(direction, this.getOffset(direction) + value, trigger, sync);
      }
    }, {
      key: 'move',
      value: function move(direction, value, trigger, sync) {
        if (this[direction] !== true || typeof value !== 'number') {
          return;
        }

        this.enter('moving');

        if (value < 0) {
          value = 0;
        } else if (value > this.getScrollLength(direction)) {
          value = this.getScrollLength(direction);
        }

        var attributes = this.attributes[direction];
        var that = this;

        var callback = function callback() {
          that.leave('moving');
        };

        if (sync) {
          this.$container[0][attributes.scroll] = value;

          if (trigger !== false) {
            this.trigger('change', value / this.getScrollLength(direction), direction);
          }

          callback();
        } else {
          this.enter('animating');
          var startTime = getTime();
          var start = this.getOffset(direction);
          var end = value;

          var run = function run(time) {
            var percent = (time - startTime) / that.options.duration;

            if (percent > 1) {
              percent = 1;
            }

            percent = that.easing.fn(percent);
            var current = parseFloat(start + percent * (end - start), 10);
            that.$container[0][attributes.scroll] = current;

            if (trigger !== false) {
              that.trigger('change', value / that.getScrollLength(direction), direction);
            }

            if (percent === 1) {
              window.cancelAnimationFrame(that._frameId);
              that._frameId = null;
              that.leave('animating');
              callback();
            } else {
              that._frameId = window.requestAnimationFrame(run);
            }
          };

          this._frameId = window.requestAnimationFrame(run);
        }
      }
    }, {
      key: 'scrollXto',
      value: function scrollXto(value, trigger, sync) {
        return this.scrollTo('horizontal', value, trigger, sync);
      }
    }, {
      key: 'scrollYto',
      value: function scrollYto(value, trigger, sync) {
        return this.scrollTo('vertical', value, trigger, sync);
      }
    }, {
      key: 'scrollXby',
      value: function scrollXby(value, trigger, sync) {
        return this.scrollBy('horizontal', value, trigger, sync);
      }
    }, {
      key: 'scrollYby',
      value: function scrollYby(value, trigger, sync) {
        return this.scrollBy('vertical', value, trigger, sync);
      }
    }, {
      key: 'getBar',
      value: function getBar(direction) {
        if (direction && this['$' + direction]) {
          return this['$' + direction];
        }

        return this.$bar;
      }
    }, {
      key: 'getBarApi',
      value: function getBarApi(direction) {
        return this.getBar(direction).data('asScrollbar');
      }
    }, {
      key: 'getBarX',
      value: function getBarX() {
        return this.getBar('horizontal');
      }
    }, {
      key: 'getBarY',
      value: function getBarY() {
        return this.getBar('vertical');
      }
    }, {
      key: 'showBar',
      value: function showBar(direction) {
        this.getBar(direction).removeClass(this.classes.barHide);
      }
    }, {
      key: 'hideBar',
      value: function hideBar(direction) {
        this.getBar(direction).addClass(this.classes.barHide);
      }
    }, {
      key: 'updateBarHandle',
      value: function updateBarHandle(direction) {
        var api = this.getBarApi(direction);

        if (!api) {
          return;
        }

        var containerLength = this.getContainerLength(direction),
            scrollLength = this.getScrollLength(direction);

        if (scrollLength > 0) {
          if (api.is('disabled')) {
            api.enable();
          }

          api.setHandleLength(api.getBarLength() * containerLength / (scrollLength + containerLength), true);
        } else {
          api.disable();
        }
      }
    }, {
      key: 'disable',
      value: function disable() {
        if (!this.is('disabled')) {
          this.enter('disabled');
          this.$wrap.addClass(this.options.disabledClass).removeClass(this.options.enabledClass);
          this.unbindEvents();
          this.unStyle();
        }

        this.trigger('disable');
      }
    }, {
      key: 'enable',
      value: function enable() {
        if (this.is('disabled')) {
          this.leave('disabled');
          this.$wrap.addClass(this.options.enabledClass).removeClass(this.options.disabledClass);
          this.bindEvents();
          this.update();
        }

        this.trigger('enable');
      }
    }, {
      key: 'update',
      value: function update() {
        if (this.is('disabled')) {
          return;
        }

        if (this.$element.is(':visible')) {
          if (this.vertical) {
            this.initLayout('vertical');
            this.updateBarHandle('vertical');
          }

          if (this.horizontal) {
            this.initLayout('horizontal');
            this.updateBarHandle('horizontal');
          }
        }
      }
    }, {
      key: 'unStyle',
      value: function unStyle() {
        if (this.horizontal) {
          this.$container.css({
            height: '',
            'padding-bottom': ''
          });
          this.$content.css({
            height: ''
          });
        }

        if (this.vertical) {
          this.$container.css({
            width: '',
            height: '',
            'padding-right': ''
          });
          this.$content.css({
            width: ''
          });
        }

        if (!this.options.containerSelector) {
          this.$wrap.css({
            height: ''
          });
        }
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$wrap.removeClass(this.classes.wrap + '-vertical').removeClass(this.classes.wrap + '-horizontal').removeClass(this.classes.wrap).removeClass(this.options.enabledClass).removeClass(this.classes.disabledClass);
        this.unStyle();

        if (this.$bar) {
          this.$bar.remove();
        }

        this.unbindEvents();

        if (this.options.containerSelector) {
          this.$container.removeClass(this.classes.container);
        } else {
          this.$container.unwrap();
        }

        if (!this.options.contentSelector) {
          this.$content.unwrap();
        }

        this.$content.removeClass(this.classes.content);
        this.$element.data(NAMESPACE$1, null);
        this.trigger('destroy');
      }
    }], [{
      key: 'setDefaults',
      value: function setDefaults(options) {
        _jquery2["default"].extend(DEFAULTS, _jquery2["default"].isPlainObject(options) && options);
      }
    }]);

    return AsScrollable;
  }();

  var info = {
    version: '0.4.10'
  };
  var NAMESPACE = 'asScrollable';
  var OtherAsScrollable = _jquery2["default"].fn.asScrollable;

  var jQueryAsScrollable = function jQueryAsScrollable(options) {
    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    if (typeof options === 'string') {
      var method = options;

      if (/^_/.test(method)) {
        return false;
      } else if (/^(get)/.test(method)) {
        var instance = this.first().data(NAMESPACE);

        if (instance && typeof instance[method] === 'function') {
          return instance[method].apply(instance, args);
        }
      } else {
        return this.each(function () {
          var instance = _jquery2["default"].data(this, NAMESPACE);

          if (instance && typeof instance[method] === 'function') {
            instance[method].apply(instance, args);
          }
        });
      }
    }

    return this.each(function () {
      if (!(0, _jquery2["default"])(this).data(NAMESPACE)) {
        (0, _jquery2["default"])(this).data(NAMESPACE, new AsScrollable(this, options));
      }
    });
  };

  _jquery2["default"].fn.asScrollable = jQueryAsScrollable;
  _jquery2["default"].asScrollable = _jquery2["default"].extend({
    setDefaults: AsScrollable.setDefaults,
    noConflict: function noConflict() {
      _jquery2["default"].fn.asScrollable = OtherAsScrollable;
      return jQueryAsScrollable;
    }
  }, info);
});

$(document).ready(function () {
  var user_id = $("#user_hash").val();
  var user_name = $("#user_name").val();
  var user_email = $("#user_email").val();
  window.announcekit = window.announcekit || {
    queue: [],
    on: function on(n, x) {
      window.announcekit.queue.push([n, x]);
    },
    push: function push(x) {
      window.announcekit.queue.push(x);
    }
  };
  announcekit.push({
    "widget": "https://updates.cloudfox.net/widgets/v2/2gTmDK",
    "selector": ".announcekit-widget",
    user: {
      id: user_id,
      name: user_name,
      email: user_email
    }
  });
});
